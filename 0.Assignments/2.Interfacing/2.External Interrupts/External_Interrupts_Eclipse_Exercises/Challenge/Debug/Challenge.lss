
Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001fe  2**0
                  ALLOC
  2 .stab         000003d8  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006ba  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
  74:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_18>:
/* global variable contain the 7-seg count value */
unsigned char g_num = 0;

/* External INT2 Interrupt Service Routine */
ISR(INT2_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	// check if overflow occurs at the 7-segment as its maximum count is 9
	if((PORTC & 0x0F) == 9)
  9a:	e5 e3       	ldi	r30, 0x35	; 53
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 2f       	mov	r24, r24
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	90 70       	andi	r25, 0x00	; 0
  a8:	89 30       	cpi	r24, 0x09	; 9
  aa:	91 05       	cpc	r25, r1
  ac:	79 f4       	brne	.+30     	; 0xcc <__vector_18+0x50>
	{
		g_num = 0;
  ae:	10 92 60 00 	sts	0x0060, r1
		PORTC = (PORTC & 0xF0) | (g_num & 0x0F);
  b2:	a5 e3       	ldi	r26, 0x35	; 53
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e5 e3       	ldi	r30, 0x35	; 53
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	98 2f       	mov	r25, r24
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	80 91 60 00 	lds	r24, 0x0060
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	89 2b       	or	r24, r25
  c8:	8c 93       	st	X, r24
  ca:	11 c0       	rjmp	.+34     	; 0xee <__vector_18+0x72>
	}
	else
	{
		// increment 7-segment every interrupt
		g_num++;
  cc:	80 91 60 00 	lds	r24, 0x0060
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 60 00 	sts	0x0060, r24
		PORTC = (PORTC & 0xF0) | (g_num & 0x0F);
  d6:	a5 e3       	ldi	r26, 0x35	; 53
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	e5 e3       	ldi	r30, 0x35	; 53
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	98 2f       	mov	r25, r24
  e2:	90 7f       	andi	r25, 0xF0	; 240
  e4:	80 91 60 00 	lds	r24, 0x0060
  e8:	8f 70       	andi	r24, 0x0F	; 15
  ea:	89 2b       	or	r24, r25
  ec:	8c 93       	st	X, r24
	}
}
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <INT2_Init>:

/* External INT2 enable and configuration function */
void INT2_Init(void)
{
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	SREG   &= ~(1<<7);       // Disable interrupts by clearing I-bit
 110:	af e5       	ldi	r26, 0x5F	; 95
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	ef e5       	ldi	r30, 0x5F	; 95
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8f 77       	andi	r24, 0x7F	; 127
 11c:	8c 93       	st	X, r24
	DDRB   &= (~(1<<PB2));   // Configure INT2/PB2 as input pin
 11e:	a7 e3       	ldi	r26, 0x37	; 55
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e7 e3       	ldi	r30, 0x37	; 55
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	8c 93       	st	X, r24
	GICR   |= (1<<INT2);	 // Enable external interrupt pin INT2
 12c:	ab e5       	ldi	r26, 0x5B	; 91
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	eb e5       	ldi	r30, 0x5B	; 91
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 62       	ori	r24, 0x20	; 32
 138:	8c 93       	st	X, r24
	MCUCSR |= (1<<ISC2);     // Trigger INT2 with the raising edge
 13a:	a4 e5       	ldi	r26, 0x54	; 84
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e4 e5       	ldi	r30, 0x54	; 84
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 64       	ori	r24, 0x40	; 64
 146:	8c 93       	st	X, r24
	SREG   |= (1<<7);        // Enable interrupts by setting I-bit
 148:	af e5       	ldi	r26, 0x5F	; 95
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	ef e5       	ldi	r30, 0x5F	; 95
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 68       	ori	r24, 0x80	; 128
 154:	8c 93       	st	X, r24
}
 156:	cf 91       	pop	r28
 158:	df 91       	pop	r29
 15a:	08 95       	ret

0000015c <main>:

int main(void)
{
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
	DDRC |= 0x0F; 			// Configure the first four pins in PORTC as output pins.
 164:	a4 e3       	ldi	r26, 0x34	; 52
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	e4 e3       	ldi	r30, 0x34	; 52
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8f 60       	ori	r24, 0x0F	; 15
 170:	8c 93       	st	X, r24
	PORTC &= 0xF0; 		    // 7-segment display zero at the beginning.
 172:	a5 e3       	ldi	r26, 0x35	; 53
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	e5 e3       	ldi	r30, 0x35	; 53
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	8c 93       	st	X, r24
	
	INT2_Init(); 			// Enable external INT2
 180:	0e 94 84 00 	call	0x108	; 0x108 <INT2_Init>
 184:	ff cf       	rjmp	.-2      	; 0x184 <main+0x28>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
