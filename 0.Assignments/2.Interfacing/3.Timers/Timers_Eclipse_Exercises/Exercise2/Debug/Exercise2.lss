
Exercise2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001c4  2**0
                  ALLOC
  2 .stab         000003d8  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000006d3  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 89 00 	call	0x112	; 0x112 <main>
  74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_19>:
/* global variable contain the ticks count of the timer */
unsigned char g_tick = 0;

/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
  8a:	af 93       	push	r26
  8c:	bf 93       	push	r27
  8e:	ef 93       	push	r30
  90:	ff 93       	push	r31
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 60 00 	sts	0x0060, r24
	if(g_tick == NUMBER_OF_OVERFLOWS_PER_HALF_SECOND)
  a4:	80 91 60 00 	lds	r24, 0x0060
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	51 f4       	brne	.+20     	; 0xc0 <__vector_19+0x44>
	{
		PORTC = PORTC ^ (1<<PC0); //toggle led every 0.5 second
  ac:	a5 e3       	ldi	r26, 0x35	; 53
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e5 e3       	ldi	r30, 0x35	; 53
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	90 81       	ld	r25, Z
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	89 27       	eor	r24, r25
  ba:	8c 93       	st	X, r24
		g_tick = 0; //clear the tick counter again to count a new 0.5 second
  bc:	10 92 60 00 	sts	0x0060, r1
	}
}
  c0:	cf 91       	pop	r28
  c2:	df 91       	pop	r29
  c4:	ff 91       	pop	r31
  c6:	ef 91       	pop	r30
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <timer0_init_CTC_mode>:
 * and output compare register=250 0 --> 250 (250ms per overflow)
 * so we need timer to overflow 2 times to get a 0.5 second 
 */
 
void timer0_init_CTC_mode(unsigned char tick)
{
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	0f 92       	push	r0
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0;    // Set Timer initial value to 0
  e6:	e2 e5       	ldi	r30, 0x52	; 82
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	10 82       	st	Z, r1
	OCR0  = tick; // Set Compare Value
  ec:	ec e5       	ldi	r30, 0x5C	; 92
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
  f4:	a9 e5       	ldi	r26, 0x59	; 89
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e9 e5       	ldi	r30, 0x59	; 89
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0 
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
 102:	e3 e5       	ldi	r30, 0x53	; 83
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	8d e8       	ldi	r24, 0x8D	; 141
 108:	80 83       	st	Z, r24
}
 10a:	0f 90       	pop	r0
 10c:	cf 91       	pop	r28
 10e:	df 91       	pop	r29
 110:	08 95       	ret

00000112 <main>:

int main(void)
{
 112:	df 93       	push	r29
 114:	cf 93       	push	r28
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
	DDRC  |= (1<<PC0);         // Configure the led pin as output pin.
 11a:	a4 e3       	ldi	r26, 0x34	; 52
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e4 e3       	ldi	r30, 0x34	; 52
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	81 60       	ori	r24, 0x01	; 1
 126:	8c 93       	st	X, r24
	PORTC &= ~(1<<PC0);        // LED is off at the beginning (Positive Logic).
 128:	a5 e3       	ldi	r26, 0x35	; 53
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	e5 e3       	ldi	r30, 0x35	; 53
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	8c 93       	st	X, r24
	SREG  |= (1<<7);           // Enable global interrupts in MC.
 136:	af e5       	ldi	r26, 0x5F	; 95
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	ef e5       	ldi	r30, 0x5F	; 95
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 68       	ori	r24, 0x80	; 128
 142:	8c 93       	st	X, r24
	timer0_init_CTC_mode(250); // Start the timer.
 144:	8a ef       	ldi	r24, 0xFA	; 250
 146:	0e 94 6d 00 	call	0xda	; 0xda <timer0_init_CTC_mode>
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0x38>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
