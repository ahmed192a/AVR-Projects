
Challenge3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000354  00000000  00000000  0000010c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006b7  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Timer0_PWM_Init>:
#include <util/delay.h>

/* F_CPU = 8Mhz */

void Timer0_PWM_Init(unsigned char set_duty_cycle)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
  78:	e2 e5       	ldi	r30, 0x52	; 82
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	10 82       	st	Z, r1
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */ 
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
  7e:	e3 e5       	ldi	r30, 0x53	; 83
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	8a e6       	ldi	r24, 0x6A	; 106
  84:	80 83       	st	Z, r24
	
	OCR0  = set_duty_cycle; 
  86:	ec e5       	ldi	r30, 0x5C	; 92
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	80 83       	st	Z, r24
	
	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
  8e:	a7 e3       	ldi	r26, 0x37	; 55
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	e7 e3       	ldi	r30, 0x37	; 55
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	8c 93       	st	X, r24
}
  9c:	0f 90       	pop	r0
  9e:	cf 91       	pop	r28
  a0:	df 91       	pop	r29
  a2:	08 95       	ret

000000a4 <main>:
int main(void)
{
  a4:	df 93       	push	r29
  a6:	cf 93       	push	r28
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
    Timer0_PWM_Init(128); // Generate 50% duty cycle
  ac:	80 e8       	ldi	r24, 0x80	; 128
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <Timer0_PWM_Init>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0xe>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
