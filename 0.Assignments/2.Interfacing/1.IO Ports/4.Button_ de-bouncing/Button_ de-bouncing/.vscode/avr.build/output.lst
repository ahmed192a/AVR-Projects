
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\4.Button_ de-bouncing\Button_ de-bouncing\.vscode\avr.build\output.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vector_default():
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
__ctors_end():
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <_exit>

00000068 <__bad_interrupt>:
__vector_20():
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Dio_Init>:
Dio_Init():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\4.Button_ de-bouncing\Button_ de-bouncing/main.c:58
 * @version 0.1
 * @author Ahmed Mohamed (ahmed.mohamed.eng.25@gmail.com)
 */
void Dio_Init(void)
{
    DDRB  &= ~(1<<DDB0);       // Define portB pin0 as input
  6c:	b8 98       	cbi	0x17, 0	; 23
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\4.Button_ de-bouncing\Button_ de-bouncing/main.c:59
    PORTB |=  (1<<PB0);        // Enable internal pull-up resistor
  6e:	c0 9a       	sbi	0x18, 0	; 24
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\4.Button_ de-bouncing\Button_ de-bouncing/main.c:61

    DDRC  |=  (1<<DDC0);       // Define PORTC pin0 as output
  70:	a0 9a       	sbi	0x14, 0	; 20
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\4.Button_ de-bouncing\Button_ de-bouncing/main.c:62
  72:	08 95       	ret

00000074 <main>:
main():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\4.Button_ de-bouncing\Button_ de-bouncing/main.c:32
 * @version 0.1
 * @author Ahmed Mohamed (ahmed.mohamed.eng.25@gmail.com)
 */
int main(){
    bool_t flag = FALSE;
    Dio_Init();     // Initialize the DIO
  74:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_Init>
  78:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h:105
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	4c e4       	ldi	r20, 0x4C	; 76
  7c:	5d e1       	ldi	r21, 0x1D	; 29
main():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\4.Button_ de-bouncing\Button_ de-bouncing/main.c:38
    while(1){
        if (! (PINB & (1<<PINB0))){
            if(!flag){
                _delay_ms(30);
                if (! (PINB & (1<<PINB0))){
                    PORTC ^= (1<<PORTC0);
  7e:	31 e0       	ldi	r19, 0x01	; 1
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\4.Button_ de-bouncing\Button_ de-bouncing/main.c:34
 */
int main(){
    bool_t flag = FALSE;
    Dio_Init();     // Initialize the DIO
    while(1){
        if (! (PINB & (1<<PINB0))){
  80:	b0 9b       	sbis	0x16, 0	; 22
  82:	02 c0       	rjmp	.+4      	; 0x88 <main+0x14>
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	fc cf       	rjmp	.-8      	; 0x80 <main+0xc>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\4.Button_ de-bouncing\Button_ de-bouncing/main.c:35
            if(!flag){
  88:	22 23       	and	r18, r18
  8a:	d1 f7       	brne	.-12     	; 0x80 <main+0xc>
_delay_loop_2():
c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h:105
  8c:	ca 01       	movw	r24, r20
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <main+0x1a>
main():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\4.Button_ de-bouncing\Button_ de-bouncing/main.c:37
                _delay_ms(30);
                if (! (PINB & (1<<PINB0))){
  92:	b0 99       	sbic	0x16, 0	; 22
  94:	f5 cf       	rjmp	.-22     	; 0x80 <main+0xc>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\4.Button_ de-bouncing\Button_ de-bouncing/main.c:38
                    PORTC ^= (1<<PORTC0);
  96:	85 b3       	in	r24, 0x15	; 21
  98:	83 27       	eor	r24, r19
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	f0 cf       	rjmp	.-32     	; 0x80 <main+0xc>

000000a0 <_exit>:
_exit():
  a0:	f8 94       	cli

000000a2 <__stop_program>:
__stop_program():
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
