
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2\.vscode\avr.build\output.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vector_default():
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
__ctors_end():
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
__vector_20():
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
Dio_Init():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:45


void Dio_Init(void)
{
    // PortA pin 0,1 as input
    DDRA &= ~((1 << DDA0) | (1 << DDA1));
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8c 7f       	andi	r24, 0xFC	; 252
  70:	8a bb       	out	0x1a, r24	; 26
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:47
    // PortD 4 pins as output
    DDRD |= (1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8f 60       	ori	r24, 0x0F	; 15
  76:	81 bb       	out	0x11, r24	; 17
  78:	20 e0       	ldi	r18, 0x00	; 0
_delay_loop_2():
c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h:105
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	4c e4       	ldi	r20, 0x4C	; 76
  7c:	5d e1       	ldi	r21, 0x1D	; 29
main():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:23
{
    uint8_t counter = 0;
    Dio_Init();
    while (1)
    {   
        if(PINA & (1<<PINA0))
  7e:	c8 9b       	sbis	0x19, 0	; 25
  80:	09 c0       	rjmp	.+18     	; 0x94 <main+0x28>
_delay_loop_2():
c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h:105
  82:	ca 01       	movw	r24, r20
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <main+0x18>
main():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:26
        {
            _delay_ms(30);
            counter = counter == 9? counter: counter + 1;
  88:	29 30       	cpi	r18, 0x09	; 9
  8a:	09 f0       	breq	.+2      	; 0x8e <main+0x22>
  8c:	2f 5f       	subi	r18, 0xFF	; 255
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:27
            PORTD = counter;
  8e:	22 bb       	out	0x12, r18	; 18
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:28
            while (PINA & (1<<PINA0));
  90:	c8 99       	sbic	0x19, 0	; 25
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x24>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:30
        }
        if(PINA & (1<<PINA1))
  94:	c9 9b       	sbis	0x19, 1	; 25
  96:	f3 cf       	rjmp	.-26     	; 0x7e <main+0x12>
_delay_loop_2():
c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h:105
  98:	ca 01       	movw	r24, r20
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x2e>
main():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:33
        {
            _delay_ms(30);
            counter = counter == 0? counter: counter - 1;
  9e:	21 11       	cpse	r18, r1
  a0:	21 50       	subi	r18, 0x01	; 1
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:34
            PORTD = counter;
  a2:	22 bb       	out	0x12, r18	; 18
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:35
            while (PINA & (1<<PINA1));
  a4:	c9 99       	sbic	0x19, 1	; 25
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0x38>
  a8:	ea cf       	rjmp	.-44     	; 0x7e <main+0x12>

000000aa <Dio_Init>:
Dio_Init():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:45


void Dio_Init(void)
{
    // PortA pin 0,1 as input
    DDRA &= ~((1 << DDA0) | (1 << DDA1));
  aa:	8a b3       	in	r24, 0x1a	; 26
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	8a bb       	out	0x1a, r24	; 26
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:47
    // PortD 4 pins as output
    DDRD |= (1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3);
  b0:	81 b3       	in	r24, 0x11	; 17
  b2:	8f 60       	ori	r24, 0x0F	; 15
  b4:	81 bb       	out	0x11, r24	; 17
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\7.Challenge2_7Segment_2Buttons\Challenge2/main.c:49

  b6:	08 95       	ret

000000b8 <_exit>:
_exit():
  b8:	f8 94       	cli

000000ba <__stop_program>:
__stop_program():
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
