
d:\Github\AVR-Projects\Assingment_Interfacing\2.Led_flashing\Led_flashing_project\.vscode\avr.build\output.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vector_default():
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
__ctors_end():
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
__vector_20():
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
DIO_init():
d:\Github\AVR-Projects\Assingment_Interfacing\2.Led_flashing\Led_flashing_project/main.c:45
 * 
 * @date 2022-09-17 @ 20:09:37
 * @author Ahmed Mohamed 
 */
void DIO_init(){
    DDRD |= (1<<6);	    // PORTD Pin 6 Output
  6c:	8e 9a       	sbi	0x11, 6	; 17
d:\Github\AVR-Projects\Assingment_Interfacing\2.Led_flashing\Led_flashing_project/main.c:46
    PORTD &= ~(1<<6);   // PORTD Pin 6 Low initially
  6e:	96 98       	cbi	0x12, 6	; 18
  70:	20 e1       	ldi	r18, 0x10	; 16
  72:	37 e2       	ldi	r19, 0x27	; 39
main():
d:\Github\AVR-Projects\Assingment_Interfacing\2.Led_flashing\Led_flashing_project/main.c:30
int main(){
	DIO_init();

	while(1){
		_delay_ms(1000);
		PORTD ^= (1<<6);
  74:	60 e4       	ldi	r22, 0x40	; 64
_delay_loop_2():
c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h:105
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  76:	48 ec       	ldi	r20, 0xC8	; 200
  78:	50 e0       	ldi	r21, 0x00	; 0
  7a:	05 c0       	rjmp	.+10     	; 0x86 <main+0x1a>
  7c:	ca 01       	movw	r24, r20
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <main+0x12>
_delay_ms():
c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h:124
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  82:	21 50       	subi	r18, 0x01	; 1
  84:	30 40       	sbci	r19, 0x00	; 0
c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h:120
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  86:	21 15       	cp	r18, r1
  88:	31 05       	cpc	r19, r1
  8a:	c1 f7       	brne	.-16     	; 0x7c <main+0x10>
main():
d:\Github\AVR-Projects\Assingment_Interfacing\2.Led_flashing\Led_flashing_project/main.c:30
  8c:	82 b3       	in	r24, 0x12	; 18
  8e:	86 27       	eor	r24, r22
  90:	82 bb       	out	0x12, r24	; 18
  92:	20 e1       	ldi	r18, 0x10	; 16
  94:	37 e2       	ldi	r19, 0x27	; 39
  96:	f2 cf       	rjmp	.-28     	; 0x7c <main+0x10>

00000098 <DIO_init>:
DIO_init():
d:\Github\AVR-Projects\Assingment_Interfacing\2.Led_flashing\Led_flashing_project/main.c:45
 * 
 * @date 2022-09-17 @ 20:09:37
 * @author Ahmed Mohamed 
 */
void DIO_init(){
    DDRD |= (1<<6);	    // PORTD Pin 6 Output
  98:	8e 9a       	sbi	0x11, 6	; 17
d:\Github\AVR-Projects\Assingment_Interfacing\2.Led_flashing\Led_flashing_project/main.c:46
    PORTD &= ~(1<<6);   // PORTD Pin 6 Low initially
  9a:	96 98       	cbi	0x12, 6	; 18
d:\Github\AVR-Projects\Assingment_Interfacing\2.Led_flashing\Led_flashing_project/main.c:47
}
  9c:	08 95       	ret

0000009e <_exit>:
_exit():
  9e:	f8 94       	cli

000000a0 <__stop_program>:
__stop_program():
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
