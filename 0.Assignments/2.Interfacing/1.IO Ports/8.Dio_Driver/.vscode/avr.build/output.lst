
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver\.vscode\avr.build\output.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vector_default():
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
__ctors_end():
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
__do_copy_data():
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
.do_copy_data_loop():
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
.do_copy_data_start():
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 20 02 	call	0x440	; 0x440 <main>
  7a:	0c 94 3c 02 	jmp	0x478	; 0x478 <_exit>

0000007e <__bad_interrupt>:
__vector_20():
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_Init>:
Dio_Init():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:29
 * @author Ahmed Mohamed (ahmed.mohamed.eng.25@gmail.com)
 */
void Dio_Init(const DioConfig * ConfigPtr){
    uint8_t _Pin = 0;
    // check if the pointer is not null
    if (ConfigPtr == NULL_PTR)
  82:	00 97       	sbiw	r24, 0x00	; 0
  84:	09 f4       	brne	.+2      	; 0x88 <Dio_Init+0x6>
  86:	d3 c0       	rjmp	.+422    	; 0x22e <Dio_Init+0x1ac>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:31
    {
        return;
  88:	fc 01       	movw	r30, r24
  8a:	a0 e0       	ldi	r26, 0x00	; 0
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:51
                    CLEAR_BIT(PORTA,ConfigPtr[_Pin].Pin);
                }
            }
            else
            {
                CLEAR_BIT(DDRA,ConfigPtr[_Pin].Pin);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	70 e0       	ldi	r23, 0x00	; 0
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:34
    if (ConfigPtr == NULL_PTR)
    {
        return;
    }
    for( _Pin = 0; _Pin < DIO_CONFIGURED_PINS; _Pin++){
       switch (ConfigPtr[_Pin].Port)
  90:	20 81       	ld	r18, Z
  92:	31 81       	ldd	r19, Z+1	; 0x01
  94:	21 30       	cpi	r18, 0x01	; 1
  96:	31 05       	cpc	r19, r1
  98:	d1 f1       	breq	.+116    	; 0x10e <Dio_Init+0x8c>
  9a:	21 30       	cpi	r18, 0x01	; 1
  9c:	31 05       	cpc	r19, r1
  9e:	48 f0       	brcs	.+18     	; 0xb2 <Dio_Init+0x30>
  a0:	22 30       	cpi	r18, 0x02	; 2
  a2:	31 05       	cpc	r19, r1
  a4:	09 f4       	brne	.+2      	; 0xa8 <Dio_Init+0x26>
  a6:	63 c0       	rjmp	.+198    	; 0x16e <Dio_Init+0xec>
  a8:	23 30       	cpi	r18, 0x03	; 3
  aa:	31 05       	cpc	r19, r1
  ac:	09 f0       	breq	.+2      	; 0xb0 <Dio_Init+0x2e>
  ae:	ba c0       	rjmp	.+372    	; 0x224 <Dio_Init+0x1a2>
  b0:	8c c0       	rjmp	.+280    	; 0x1ca <Dio_Init+0x148>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:37
        {
        case Dio_PortA:
            if (ConfigPtr[_Pin].PinDirection == Dio_PinDirectionOutput)
  b2:	24 81       	ldd	r18, Z+4	; 0x04
  b4:	35 81       	ldd	r19, Z+5	; 0x05
  b6:	21 30       	cpi	r18, 0x01	; 1
  b8:	31 05       	cpc	r19, r1
  ba:	89 f4       	brne	.+34     	; 0xde <Dio_Init+0x5c>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:39
            {
                SET_BIT(DDRA,ConfigPtr[_Pin].Pin);
  bc:	8a b3       	in	r24, 0x1a	; 26
  be:	02 80       	ldd	r0, Z+2	; 0x02
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <Dio_Init+0x44>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	0a 94       	dec	r0
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <Dio_Init+0x40>
  ca:	82 2b       	or	r24, r18
  cc:	8a bb       	out	0x1a, r24	; 26
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:40
                if (ConfigPtr[_Pin].PinLevel == Dio_PinLevelHigh)
  ce:	86 81       	ldd	r24, Z+6	; 0x06
  d0:	97 81       	ldd	r25, Z+7	; 0x07
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	a1 f0       	breq	.+40     	; 0xfe <Dio_Init+0x7c>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:46
                {
                    SET_BIT(PORTA,ConfigPtr[_Pin].Pin);
                }
                else
                {
                    CLEAR_BIT(PORTA,ConfigPtr[_Pin].Pin);
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	20 95       	com	r18
  da:	28 23       	and	r18, r24
  dc:	12 c0       	rjmp	.+36     	; 0x102 <Dio_Init+0x80>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:51
                }
            }
            else
            {
                CLEAR_BIT(DDRA,ConfigPtr[_Pin].Pin);
  de:	8a b3       	in	r24, 0x1a	; 26
  e0:	9b 01       	movw	r18, r22
  e2:	02 80       	ldd	r0, Z+2	; 0x02
  e4:	02 c0       	rjmp	.+4      	; 0xea <Dio_Init+0x68>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <Dio_Init+0x64>
  ee:	42 2f       	mov	r20, r18
  f0:	40 95       	com	r20
  f2:	84 23       	and	r24, r20
  f4:	8a bb       	out	0x1a, r24	; 26
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:52
                if (ConfigPtr[_Pin].InternalPullUp == Dio_InternalPullUpEnable)
  f6:	80 85       	ldd	r24, Z+8	; 0x08
  f8:	91 85       	ldd	r25, Z+9	; 0x09
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	21 f4       	brne	.+8      	; 0x106 <Dio_Init+0x84>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:54
                {
                    SET_BIT(PORTA,ConfigPtr[_Pin].Pin);
  fe:	8b b3       	in	r24, 0x1b	; 27
 100:	28 2b       	or	r18, r24
 102:	2b bb       	out	0x1b, r18	; 27
 104:	8f c0       	rjmp	.+286    	; 0x224 <Dio_Init+0x1a2>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:58
                }
                else
                {
                    CLEAR_BIT(PORTA,ConfigPtr[_Pin].Pin);
 106:	8b b3       	in	r24, 0x1b	; 27
 108:	48 23       	and	r20, r24
 10a:	4b bb       	out	0x1b, r20	; 27
 10c:	8b c0       	rjmp	.+278    	; 0x224 <Dio_Init+0x1a2>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:63
                }
            }
            break;
        case Dio_PortB:
            if (ConfigPtr[_Pin].PinDirection == Dio_PinDirectionOutput)
 10e:	44 81       	ldd	r20, Z+4	; 0x04
 110:	55 81       	ldd	r21, Z+5	; 0x05
 112:	41 30       	cpi	r20, 0x01	; 1
 114:	51 05       	cpc	r21, r1
 116:	a1 f4       	brne	.+40     	; 0x140 <Dio_Init+0xbe>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:65
            {
                SET_BIT(DDRB,ConfigPtr[_Pin].Pin);
 118:	87 b3       	in	r24, 0x17	; 23
 11a:	02 80       	ldd	r0, Z+2	; 0x02
 11c:	02 c0       	rjmp	.+4      	; 0x122 <Dio_Init+0xa0>
 11e:	44 0f       	add	r20, r20
 120:	55 1f       	adc	r21, r21
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <Dio_Init+0x9c>
 126:	24 2f       	mov	r18, r20
 128:	84 2b       	or	r24, r20
 12a:	87 bb       	out	0x17, r24	; 23
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:66
                if (ConfigPtr[_Pin].PinLevel == Dio_PinLevelHigh)
 12c:	86 81       	ldd	r24, Z+6	; 0x06
 12e:	97 81       	ldd	r25, Z+7	; 0x07
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	19 f4       	brne	.+6      	; 0x13a <Dio_Init+0xb8>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:68
                {
                    SET_BIT(PORTB,ConfigPtr[_Pin].Pin);
 134:	88 b3       	in	r24, 0x18	; 24
 136:	28 2b       	or	r18, r24
 138:	18 c0       	rjmp	.+48     	; 0x16a <Dio_Init+0xe8>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:72
                }
                else
                {
                    CLEAR_BIT(PORTB,ConfigPtr[_Pin].Pin);
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	20 95       	com	r18
 13e:	14 c0       	rjmp	.+40     	; 0x168 <Dio_Init+0xe6>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:77
                }
            }
            else
            {
                CLEAR_BIT(DDRB,ConfigPtr[_Pin].Pin);
 140:	87 b3       	in	r24, 0x17	; 23
 142:	02 80       	ldd	r0, Z+2	; 0x02
 144:	02 c0       	rjmp	.+4      	; 0x14a <Dio_Init+0xc8>
 146:	22 0f       	add	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <Dio_Init+0xc4>
 14e:	32 2f       	mov	r19, r18
 150:	20 95       	com	r18
 152:	82 23       	and	r24, r18
 154:	87 bb       	out	0x17, r24	; 23
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:78
                if (ConfigPtr[_Pin].InternalPullUp == Dio_InternalPullUpEnable)
 156:	80 85       	ldd	r24, Z+8	; 0x08
 158:	91 85       	ldd	r25, Z+9	; 0x09
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	21 f4       	brne	.+8      	; 0x166 <Dio_Init+0xe4>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:80
                {
                    SET_BIT(PORTB,ConfigPtr[_Pin].Pin);
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	38 2b       	or	r19, r24
 162:	38 bb       	out	0x18, r19	; 24
 164:	5f c0       	rjmp	.+190    	; 0x224 <Dio_Init+0x1a2>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:84
                }
                else
                {
                    CLEAR_BIT(PORTB,ConfigPtr[_Pin].Pin);
 166:	88 b3       	in	r24, 0x18	; 24
 168:	28 23       	and	r18, r24
 16a:	28 bb       	out	0x18, r18	; 24
 16c:	5b c0       	rjmp	.+182    	; 0x224 <Dio_Init+0x1a2>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:89
                }
            }
            break;
        case Dio_PortC:
            if (ConfigPtr[_Pin].PinDirection == Dio_PinDirectionOutput)
 16e:	24 81       	ldd	r18, Z+4	; 0x04
 170:	35 81       	ldd	r19, Z+5	; 0x05
 172:	21 30       	cpi	r18, 0x01	; 1
 174:	31 05       	cpc	r19, r1
 176:	89 f4       	brne	.+34     	; 0x19a <Dio_Init+0x118>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:91
            {
                SET_BIT(DDRC,ConfigPtr[_Pin].Pin);
 178:	84 b3       	in	r24, 0x14	; 20
 17a:	02 80       	ldd	r0, Z+2	; 0x02
 17c:	02 c0       	rjmp	.+4      	; 0x182 <Dio_Init+0x100>
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <Dio_Init+0xfc>
 186:	82 2b       	or	r24, r18
 188:	84 bb       	out	0x14, r24	; 20
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:92
                if (ConfigPtr[_Pin].PinLevel == Dio_PinLevelHigh)
 18a:	86 81       	ldd	r24, Z+6	; 0x06
 18c:	97 81       	ldd	r25, Z+7	; 0x07
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	a1 f0       	breq	.+40     	; 0x1ba <Dio_Init+0x138>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:98
                {
                    SET_BIT(PORTC,ConfigPtr[_Pin].Pin);
                }
                else
                {
                    CLEAR_BIT(PORTC,ConfigPtr[_Pin].Pin);
 192:	85 b3       	in	r24, 0x15	; 21
 194:	20 95       	com	r18
 196:	28 23       	and	r18, r24
 198:	12 c0       	rjmp	.+36     	; 0x1be <Dio_Init+0x13c>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:103
                }
            }
            else
            {
                CLEAR_BIT(DDRC,ConfigPtr[_Pin].Pin);
 19a:	84 b3       	in	r24, 0x14	; 20
 19c:	9b 01       	movw	r18, r22
 19e:	02 80       	ldd	r0, Z+2	; 0x02
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <Dio_Init+0x124>
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <Dio_Init+0x120>
 1aa:	42 2f       	mov	r20, r18
 1ac:	40 95       	com	r20
 1ae:	84 23       	and	r24, r20
 1b0:	84 bb       	out	0x14, r24	; 20
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:104
                if (ConfigPtr[_Pin].InternalPullUp == Dio_InternalPullUpEnable)
 1b2:	80 85       	ldd	r24, Z+8	; 0x08
 1b4:	91 85       	ldd	r25, Z+9	; 0x09
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	21 f4       	brne	.+8      	; 0x1c2 <Dio_Init+0x140>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:106
                {
                    SET_BIT(PORTC,ConfigPtr[_Pin].Pin);
 1ba:	85 b3       	in	r24, 0x15	; 21
 1bc:	28 2b       	or	r18, r24
 1be:	25 bb       	out	0x15, r18	; 21
 1c0:	31 c0       	rjmp	.+98     	; 0x224 <Dio_Init+0x1a2>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:110
                }
                else
                {
                    CLEAR_BIT(PORTC,ConfigPtr[_Pin].Pin);
 1c2:	85 b3       	in	r24, 0x15	; 21
 1c4:	48 23       	and	r20, r24
 1c6:	45 bb       	out	0x15, r20	; 21
 1c8:	2d c0       	rjmp	.+90     	; 0x224 <Dio_Init+0x1a2>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:115
                }
            }
            break;
        case Dio_PortD:
            if (ConfigPtr[_Pin].PinDirection == Dio_PinDirectionOutput)
 1ca:	24 81       	ldd	r18, Z+4	; 0x04
 1cc:	35 81       	ldd	r19, Z+5	; 0x05
 1ce:	21 30       	cpi	r18, 0x01	; 1
 1d0:	31 05       	cpc	r19, r1
 1d2:	89 f4       	brne	.+34     	; 0x1f6 <Dio_Init+0x174>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:117
            {
                SET_BIT(DDRD,ConfigPtr[_Pin].Pin);
 1d4:	81 b3       	in	r24, 0x11	; 17
 1d6:	02 80       	ldd	r0, Z+2	; 0x02
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <Dio_Init+0x15c>
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <Dio_Init+0x158>
 1e2:	82 2b       	or	r24, r18
 1e4:	81 bb       	out	0x11, r24	; 17
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:118
                if (ConfigPtr[_Pin].PinLevel == Dio_PinLevelHigh)
 1e6:	86 81       	ldd	r24, Z+6	; 0x06
 1e8:	97 81       	ldd	r25, Z+7	; 0x07
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	a1 f0       	breq	.+40     	; 0x216 <Dio_Init+0x194>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:124
                {
                    SET_BIT(PORTD,ConfigPtr[_Pin].Pin);
                }
                else
                {
                    CLEAR_BIT(PORTD,ConfigPtr[_Pin].Pin);
 1ee:	82 b3       	in	r24, 0x12	; 18
 1f0:	20 95       	com	r18
 1f2:	28 23       	and	r18, r24
 1f4:	12 c0       	rjmp	.+36     	; 0x21a <Dio_Init+0x198>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:129
                }
            }
            else
            {
                CLEAR_BIT(DDRD,ConfigPtr[_Pin].Pin);
 1f6:	81 b3       	in	r24, 0x11	; 17
 1f8:	9b 01       	movw	r18, r22
 1fa:	02 80       	ldd	r0, Z+2	; 0x02
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <Dio_Init+0x180>
 1fe:	22 0f       	add	r18, r18
 200:	33 1f       	adc	r19, r19
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <Dio_Init+0x17c>
 206:	42 2f       	mov	r20, r18
 208:	40 95       	com	r20
 20a:	84 23       	and	r24, r20
 20c:	81 bb       	out	0x11, r24	; 17
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:130
                if (ConfigPtr[_Pin].InternalPullUp == Dio_InternalPullUpEnable)
 20e:	80 85       	ldd	r24, Z+8	; 0x08
 210:	91 85       	ldd	r25, Z+9	; 0x09
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	21 f4       	brne	.+8      	; 0x21e <Dio_Init+0x19c>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:132
                {
                    SET_BIT(PORTD,ConfigPtr[_Pin].Pin);
 216:	82 b3       	in	r24, 0x12	; 18
 218:	28 2b       	or	r18, r24
 21a:	22 bb       	out	0x12, r18	; 18
 21c:	03 c0       	rjmp	.+6      	; 0x224 <Dio_Init+0x1a2>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:136
                }
                else
                {
                    CLEAR_BIT(PORTD,ConfigPtr[_Pin].Pin);
 21e:	82 b3       	in	r24, 0x12	; 18
 220:	48 23       	and	r20, r24
 222:	42 bb       	out	0x12, r20	; 18
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:33
    // check if the pointer is not null
    if (ConfigPtr == NULL_PTR)
    {
        return;
    }
    for( _Pin = 0; _Pin < DIO_CONFIGURED_PINS; _Pin++){
 224:	af 5f       	subi	r26, 0xFF	; 255
 226:	3a 96       	adiw	r30, 0x0a	; 10
 228:	a4 30       	cpi	r26, 0x04	; 4
 22a:	09 f0       	breq	.+2      	; 0x22e <Dio_Init+0x1ac>
 22c:	31 cf       	rjmp	.-414    	; 0x90 <Dio_Init+0xe>
 22e:	08 95       	ret

00000230 <Dio_WriteChannel>:
Dio_WriteChannel():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:156
 * @param PinLevel  Dio Pin Level
 * 
 * @version 0.1
 * @author Ahmed Mohamed (ahmed.mohamed.eng.25@gmail.com)
 */
void Dio_WriteChannel(Dio_PortType Port, Dio_PinType Pin, Dio_PinLevelType PinLevel){
 230:	9c 01       	movw	r18, r24
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:157
    switch (Port)
 232:	81 30       	cpi	r24, 0x01	; 1
 234:	91 05       	cpc	r25, r1
 236:	11 f1       	breq	.+68     	; 0x27c <Dio_WriteChannel+0x4c>
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	91 05       	cpc	r25, r1
 23c:	40 f0       	brcs	.+16     	; 0x24e <Dio_WriteChannel+0x1e>
 23e:	82 30       	cpi	r24, 0x02	; 2
 240:	91 05       	cpc	r25, r1
 242:	91 f1       	breq	.+100    	; 0x2a8 <Dio_WriteChannel+0x78>
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	91 05       	cpc	r25, r1
 248:	09 f0       	breq	.+2      	; 0x24c <Dio_WriteChannel+0x1c>
 24a:	5c c0       	rjmp	.+184    	; 0x304 <Dio_WriteChannel+0xd4>
 24c:	44 c0       	rjmp	.+136    	; 0x2d6 <Dio_WriteChannel+0xa6>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:160
    {
    case Dio_PortA:
        if (PinLevel == Dio_PinLevelHigh)
 24e:	41 30       	cpi	r20, 0x01	; 1
 250:	51 05       	cpc	r21, r1
 252:	41 f4       	brne	.+16     	; 0x264 <Dio_WriteChannel+0x34>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:162
        {
            SET_BIT(PORTA,Pin);
 254:	8b b3       	in	r24, 0x1b	; 27
 256:	02 c0       	rjmp	.+4      	; 0x25c <Dio_WriteChannel+0x2c>
 258:	44 0f       	add	r20, r20
 25a:	55 1f       	adc	r21, r21
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <Dio_WriteChannel+0x28>
 260:	84 2b       	or	r24, r20
 262:	0a c0       	rjmp	.+20     	; 0x278 <Dio_WriteChannel+0x48>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:166
        }
        else
        {
            CLEAR_BIT(PORTA,Pin);
 264:	2b b3       	in	r18, 0x1b	; 27
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <Dio_WriteChannel+0x40>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <Dio_WriteChannel+0x3c>
 274:	80 95       	com	r24
 276:	82 23       	and	r24, r18
 278:	8b bb       	out	0x1b, r24	; 27
 27a:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:170
        }
        break;
    case Dio_PortB:
        if (PinLevel == Dio_PinLevelHigh)
 27c:	41 30       	cpi	r20, 0x01	; 1
 27e:	51 05       	cpc	r21, r1
 280:	41 f4       	brne	.+16     	; 0x292 <Dio_WriteChannel+0x62>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:172
        {
            SET_BIT(PORTB,Pin);
 282:	88 b3       	in	r24, 0x18	; 24
 284:	02 c0       	rjmp	.+4      	; 0x28a <Dio_WriteChannel+0x5a>
 286:	44 0f       	add	r20, r20
 288:	55 1f       	adc	r21, r21
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <Dio_WriteChannel+0x56>
 28e:	84 2b       	or	r24, r20
 290:	09 c0       	rjmp	.+18     	; 0x2a4 <Dio_WriteChannel+0x74>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:176
        }
        else
        {
            CLEAR_BIT(PORTB,Pin);
 292:	98 b3       	in	r25, 0x18	; 24
 294:	02 c0       	rjmp	.+4      	; 0x29a <Dio_WriteChannel+0x6a>
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <Dio_WriteChannel+0x66>
 29e:	82 2f       	mov	r24, r18
 2a0:	80 95       	com	r24
 2a2:	89 23       	and	r24, r25
 2a4:	88 bb       	out	0x18, r24	; 24
 2a6:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:180
        }
        break;
    case Dio_PortC:
        if (PinLevel == Dio_PinLevelHigh)
 2a8:	41 30       	cpi	r20, 0x01	; 1
 2aa:	51 05       	cpc	r21, r1
 2ac:	41 f4       	brne	.+16     	; 0x2be <Dio_WriteChannel+0x8e>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:182
        {
            SET_BIT(PORTC,Pin);
 2ae:	85 b3       	in	r24, 0x15	; 21
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <Dio_WriteChannel+0x86>
 2b2:	44 0f       	add	r20, r20
 2b4:	55 1f       	adc	r21, r21
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <Dio_WriteChannel+0x82>
 2ba:	84 2b       	or	r24, r20
 2bc:	0a c0       	rjmp	.+20     	; 0x2d2 <Dio_WriteChannel+0xa2>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:186
        }
        else
        {
            CLEAR_BIT(PORTC,Pin);
 2be:	25 b3       	in	r18, 0x15	; 21
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <Dio_WriteChannel+0x9a>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <Dio_WriteChannel+0x96>
 2ce:	80 95       	com	r24
 2d0:	82 23       	and	r24, r18
 2d2:	85 bb       	out	0x15, r24	; 21
 2d4:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:190
        }
        break;
    case Dio_PortD:
        if (PinLevel == Dio_PinLevelHigh)
 2d6:	41 30       	cpi	r20, 0x01	; 1
 2d8:	51 05       	cpc	r21, r1
 2da:	49 f4       	brne	.+18     	; 0x2ee <Dio_WriteChannel+0xbe>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:192
        {
            SET_BIT(PORTD,Pin);
 2dc:	82 b3       	in	r24, 0x12	; 18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <Dio_WriteChannel+0xb4>
 2e0:	44 0f       	add	r20, r20
 2e2:	55 1f       	adc	r21, r21
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <Dio_WriteChannel+0xb0>
 2e8:	84 2b       	or	r24, r20
 2ea:	82 bb       	out	0x12, r24	; 18
 2ec:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:196
        }
        else
        {
            CLEAR_BIT(PORTD,Pin);
 2ee:	22 b3       	in	r18, 0x12	; 18
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <Dio_WriteChannel+0xca>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <Dio_WriteChannel+0xc6>
 2fe:	80 95       	com	r24
 300:	82 23       	and	r24, r18
 302:	82 bb       	out	0x12, r24	; 18
 304:	08 95       	ret

00000306 <Dio_ReadChannel>:
Dio_ReadChannel():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:215
 * @version 0.1
 * @author Ahmed Mohamed (ahmed.mohamed.eng.25@gmail.com)
 */
Dio_PinLevelType Dio_ReadChannel(Dio_PortType Port, Dio_PinType Pin){
    Dio_PinLevelType _PinLevel = Dio_PinLevelLow;
    switch (Port)
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	91 05       	cpc	r25, r1
 30a:	69 f0       	breq	.+26     	; 0x326 <Dio_ReadChannel+0x20>
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	91 05       	cpc	r25, r1
 310:	40 f0       	brcs	.+16     	; 0x322 <Dio_ReadChannel+0x1c>
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	91 05       	cpc	r25, r1
 316:	49 f0       	breq	.+18     	; 0x32a <Dio_ReadChannel+0x24>
 318:	03 97       	sbiw	r24, 0x03	; 3
 31a:	49 f0       	breq	.+18     	; 0x32e <Dio_ReadChannel+0x28>
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	10 c0       	rjmp	.+32     	; 0x342 <Dio_ReadChannel+0x3c>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:218
    {
    case Dio_PortA:
        _PinLevel = GET_BIT(PINA,Pin);
 322:	89 b3       	in	r24, 0x19	; 25
 324:	05 c0       	rjmp	.+10     	; 0x330 <Dio_ReadChannel+0x2a>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:221
        break;
    case Dio_PortB:
        _PinLevel = GET_BIT(PINB,Pin);
 326:	86 b3       	in	r24, 0x16	; 22
 328:	03 c0       	rjmp	.+6      	; 0x330 <Dio_ReadChannel+0x2a>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:224
        break;
    case Dio_PortC:
        _PinLevel = GET_BIT(PINC,Pin);
 32a:	83 b3       	in	r24, 0x13	; 19
 32c:	01 c0       	rjmp	.+2      	; 0x330 <Dio_ReadChannel+0x2a>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:227
        break;
    case Dio_PortD:
        _PinLevel = GET_BIT(PIND,Pin);
 32e:	80 b3       	in	r24, 0x10	; 16
 330:	28 2f       	mov	r18, r24
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <Dio_ReadChannel+0x34>
 336:	35 95       	asr	r19
 338:	27 95       	ror	r18
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <Dio_ReadChannel+0x30>
 33e:	21 70       	andi	r18, 0x01	; 1
 340:	30 70       	andi	r19, 0x00	; 0
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:233
        break;
    default:
        break;
    }
    return _PinLevel;
}
 342:	c9 01       	movw	r24, r18
 344:	08 95       	ret

00000346 <Dio_FlipChannel>:
Dio_FlipChannel():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:244
 * @param Pin       Dio Pin
 * 
 * @version 0.1
 * @author Ahmed Mohamed (ahmed.mohamed.eng.25@gmail.com)
 */
void Dio_FlipChannel(Dio_PortType Port, Dio_PinType Pin){
 346:	9c 01       	movw	r18, r24
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:245
    switch (Port)
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	91 05       	cpc	r25, r1
 34c:	a9 f0       	breq	.+42     	; 0x378 <Dio_FlipChannel+0x32>
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	91 05       	cpc	r25, r1
 352:	38 f0       	brcs	.+14     	; 0x362 <Dio_FlipChannel+0x1c>
 354:	82 30       	cpi	r24, 0x02	; 2
 356:	91 05       	cpc	r25, r1
 358:	c1 f0       	breq	.+48     	; 0x38a <Dio_FlipChannel+0x44>
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	91 05       	cpc	r25, r1
 35e:	51 f5       	brne	.+84     	; 0x3b4 <Dio_FlipChannel+0x6e>
 360:	1f c0       	rjmp	.+62     	; 0x3a0 <Dio_FlipChannel+0x5a>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:248
    {
    case Dio_PortA:
        TOGGLE_BIT(PORTA,Pin);
 362:	2b b3       	in	r18, 0x1b	; 27
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <Dio_FlipChannel+0x28>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <Dio_FlipChannel+0x24>
 372:	28 27       	eor	r18, r24
 374:	2b bb       	out	0x1b, r18	; 27
 376:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:251
        break;
    case Dio_PortB:
        TOGGLE_BIT(PORTB,Pin);
 378:	88 b3       	in	r24, 0x18	; 24
 37a:	02 c0       	rjmp	.+4      	; 0x380 <Dio_FlipChannel+0x3a>
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <Dio_FlipChannel+0x36>
 384:	82 27       	eor	r24, r18
 386:	88 bb       	out	0x18, r24	; 24
 388:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:254
        break;
    case Dio_PortC:
        TOGGLE_BIT(PORTC,Pin);
 38a:	25 b3       	in	r18, 0x15	; 21
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <Dio_FlipChannel+0x50>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <Dio_FlipChannel+0x4c>
 39a:	28 27       	eor	r18, r24
 39c:	25 bb       	out	0x15, r18	; 21
 39e:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:257
        break;
    case Dio_PortD:
        TOGGLE_BIT(PORTD,Pin);
 3a0:	22 b3       	in	r18, 0x12	; 18
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <Dio_FlipChannel+0x66>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	6a 95       	dec	r22
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <Dio_FlipChannel+0x62>
 3b0:	28 27       	eor	r18, r24
 3b2:	22 bb       	out	0x12, r18	; 18
 3b4:	08 95       	ret

000003b6 <Dio_WritePort>:
Dio_WritePort():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:274
 * 
 * @version 0.1
 * @author Ahmed Mohamed (ahmed.mohamed.eng.25@gmail.com)
 */
void Dio_WritePort(Dio_PortType Port, uint8_t PortLevel){
    switch (Port)
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	91 05       	cpc	r25, r1
 3ba:	59 f0       	breq	.+22     	; 0x3d2 <Dio_WritePort+0x1c>
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	91 05       	cpc	r25, r1
 3c0:	30 f0       	brcs	.+12     	; 0x3ce <Dio_WritePort+0x18>
 3c2:	82 30       	cpi	r24, 0x02	; 2
 3c4:	91 05       	cpc	r25, r1
 3c6:	39 f0       	breq	.+14     	; 0x3d6 <Dio_WritePort+0x20>
 3c8:	03 97       	sbiw	r24, 0x03	; 3
 3ca:	41 f4       	brne	.+16     	; 0x3dc <Dio_WritePort+0x26>
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <Dio_WritePort+0x24>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:277
    {
    case Dio_PortA:
        PORTA = PortLevel;
 3ce:	6b bb       	out	0x1b, r22	; 27
 3d0:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:280
        break;
    case Dio_PortB:
        PORTB = PortLevel;
 3d2:	68 bb       	out	0x18, r22	; 24
 3d4:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:283
        break;
    case Dio_PortC:
        PORTC = PortLevel;
 3d6:	65 bb       	out	0x15, r22	; 21
 3d8:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:286
        break;
    case Dio_PortD:
        PORTD = PortLevel;
 3da:	62 bb       	out	0x12, r22	; 18
 3dc:	08 95       	ret

000003de <Dio_ReadPort>:
Dio_ReadPort():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:304
 * @version 0.1
 * @author Ahmed Mohamed (ahmed.mohamed.eng.25@gmail.com)
 */
uint8_t Dio_ReadPort(Dio_PortType Port){
    uint8_t _PortLevel = 0;
    switch (Port)
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	91 05       	cpc	r25, r1
 3e2:	61 f0       	breq	.+24     	; 0x3fc <Dio_ReadPort+0x1e>
 3e4:	81 30       	cpi	r24, 0x01	; 1
 3e6:	91 05       	cpc	r25, r1
 3e8:	38 f0       	brcs	.+14     	; 0x3f8 <Dio_ReadPort+0x1a>
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	91 05       	cpc	r25, r1
 3ee:	41 f0       	breq	.+16     	; 0x400 <Dio_ReadPort+0x22>
 3f0:	03 97       	sbiw	r24, 0x03	; 3
 3f2:	41 f0       	breq	.+16     	; 0x404 <Dio_ReadPort+0x26>
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:307
    {
    case Dio_PortA:
        _PortLevel = PINA;
 3f8:	89 b3       	in	r24, 0x19	; 25
 3fa:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:310
        break;
    case Dio_PortB:
        _PortLevel = PINB;
 3fc:	86 b3       	in	r24, 0x16	; 22
 3fe:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:313
        break;
    case Dio_PortC:
        _PortLevel = PINC;
 400:	83 b3       	in	r24, 0x13	; 19
 402:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:316
        break;
    case Dio_PortD:
        _PortLevel = PIND;
 404:	80 b3       	in	r24, 0x10	; 16
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:322
        break;
    default:
        break;
    }
    return _PortLevel;
}
 406:	08 95       	ret

00000408 <Dio_FlipPort>:
Dio_FlipPort():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:333
 * 
 * @version 0.1
 * @author Ahmed Mohamed (ahmed.mohamed.eng.25@gmail.com)
 */
void Dio_FlipPort(Dio_PortType Port){
    switch (Port)
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	91 05       	cpc	r25, r1
 40c:	69 f0       	breq	.+26     	; 0x428 <Dio_FlipPort+0x20>
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	91 05       	cpc	r25, r1
 412:	30 f0       	brcs	.+12     	; 0x420 <Dio_FlipPort+0x18>
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	91 05       	cpc	r25, r1
 418:	59 f0       	breq	.+22     	; 0x430 <Dio_FlipPort+0x28>
 41a:	03 97       	sbiw	r24, 0x03	; 3
 41c:	81 f4       	brne	.+32     	; 0x43e <Dio_FlipPort+0x36>
 41e:	0c c0       	rjmp	.+24     	; 0x438 <Dio_FlipPort+0x30>
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:336
    {
    case Dio_PortA:
        PORTA = ~PORTA;
 420:	8b b3       	in	r24, 0x1b	; 27
 422:	80 95       	com	r24
 424:	8b bb       	out	0x1b, r24	; 27
 426:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:339
        break;
    case Dio_PortB:
        PORTB = ~PORTB;
 428:	88 b3       	in	r24, 0x18	; 24
 42a:	80 95       	com	r24
 42c:	88 bb       	out	0x18, r24	; 24
 42e:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:342
        break;
    case Dio_PortC:
        PORTC = ~PORTC;
 430:	85 b3       	in	r24, 0x15	; 21
 432:	80 95       	com	r24
 434:	85 bb       	out	0x15, r24	; 21
 436:	08 95       	ret
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/dio.c:345
        break;
    case Dio_PortD:
        PORTD = ~PORTD;
 438:	82 b3       	in	r24, 0x12	; 18
 43a:	80 95       	com	r24
 43c:	82 bb       	out	0x12, r24	; 18
 43e:	08 95       	ret

00000440 <main>:
main():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/main.c:18
#include <avr/delay.h>

extern DioConfig dioconf [DIO_CONFIGURED_PINS];

int main(void)
{
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/main.c:20
    uint8_t data = 1;
    Dio_Init(dioconf);
 446:	80 e6       	ldi	r24, 0x60	; 96
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 41 00 	call	0x82	; 0x82 <Dio_Init>
 44e:	11 e0       	ldi	r17, 0x01	; 1
_delay_loop_2():
c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h:105
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 450:	c9 e1       	ldi	r28, 0x19	; 25
 452:	d0 e0       	ldi	r29, 0x00	; 0
main():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/main.c:20
 454:	88 e8       	ldi	r24, 0x88	; 136
 456:	93 e1       	ldi	r25, 0x13	; 19
_delay_loop_2():
c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h:105
 458:	fe 01       	movw	r30, r28
 45a:	31 97       	sbiw	r30, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <main+0x1a>
_delay_ms():
c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h:124
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 45e:	01 97       	sbiw	r24, 0x01	; 1
c:/winavr-20100110/lib/gcc/../../avr/include/util/delay.h:120
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 460:	d9 f7       	brne	.-10     	; 0x458 <main+0x18>
main():
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/main.c:25
    while (1) 
    {

        _delay_ms(500);
        data = data & 0x08? 1 : data << 1;
 462:	13 ff       	sbrs	r17, 3
 464:	02 c0       	rjmp	.+4      	; 0x46a <__stack+0xb>
 466:	11 e0       	ldi	r17, 0x01	; 1
 468:	01 c0       	rjmp	.+2      	; 0x46c <__stack+0xd>
 46a:	11 0f       	add	r17, r17
d:\Github\AVR-Projects\0.Assignments\2.Interfacing\1.IO Ports\8.Dio_Driver/main.c:26
        Dio_WritePort(Dio_PortA,data);
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	61 2f       	mov	r22, r17
 472:	0e 94 db 01 	call	0x3b6	; 0x3b6 <Dio_WritePort>
 476:	ee cf       	rjmp	.-36     	; 0x454 <main+0x14>

00000478 <_exit>:
_exit():
 478:	f8 94       	cli

0000047a <__stop_program>:
__stop_program():
 47a:	ff cf       	rjmp	.-2      	; 0x47a <__stop_program>
