
Exercise1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000378  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000686  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */

#include <avr/io.h>

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/* configure pin PA0, PA1 and PA2 as input pins */ 
	DDRA &= 0xF8;
  74:	aa e3       	ldi	r26, 0x3A	; 58
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	88 7f       	andi	r24, 0xF8	; 248
  80:	8c 93       	st	X, r24
	
	/* configure pin PC0 and PC1 as output pins */
	DDRC |= 0x03;
  82:	a4 e3       	ldi	r26, 0x34	; 52
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e4 e3       	ldi	r30, 0x34	; 52
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	8c 93       	st	X, r24
	
	/* Motor is stop at the beginning */
	PORTC &= 0xFC;
  90:	a5 e3       	ldi	r26, 0x35	; 53
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e5 e3       	ldi	r30, 0x35	; 53
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8c 7f       	andi	r24, 0xFC	; 252
  9c:	8c 93       	st	X, r24
	 
    while(1)
    {
		/* check if the first push button at PA0 is pressed/not */
		if(PINA & (1<<PA0))
  9e:	e9 e3       	ldi	r30, 0x39	; 57
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	88 2f       	mov	r24, r24
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	81 70       	andi	r24, 0x01	; 1
  aa:	90 70       	andi	r25, 0x00	; 0
  ac:	88 23       	and	r24, r24
  ae:	79 f0       	breq	.+30     	; 0xce <main+0x62>
		{
			// Rotate the motor --> clock wise
			PORTC &= (~(1<<PC0));
  b0:	a5 e3       	ldi	r26, 0x35	; 53
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e5 e3       	ldi	r30, 0x35	; 53
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	8e 7f       	andi	r24, 0xFE	; 254
  bc:	8c 93       	st	X, r24
			PORTC |= (1<<PC1);
  be:	a5 e3       	ldi	r26, 0x35	; 53
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	e5 e3       	ldi	r30, 0x35	; 53
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	8c 93       	st	X, r24
  cc:	e8 cf       	rjmp	.-48     	; 0x9e <main+0x32>
		}
		
		/* check if the second push button at PA1 is pressed/not */
		else if(PINA & (1<<PA1))
  ce:	e9 e3       	ldi	r30, 0x39	; 57
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 2f       	mov	r24, r24
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	82 70       	andi	r24, 0x02	; 2
  da:	90 70       	andi	r25, 0x00	; 0
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	79 f0       	breq	.+30     	; 0xfe <main+0x92>
		{
			// Rotate the motor --> anti-clock wise
			PORTC |= (1<<PC0);
  e0:	a5 e3       	ldi	r26, 0x35	; 53
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e5 e3       	ldi	r30, 0x35	; 53
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	8c 93       	st	X, r24
			PORTC &= (~(1<<PC1));	
  ee:	a5 e3       	ldi	r26, 0x35	; 53
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e5 e3       	ldi	r30, 0x35	; 53
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	8c 93       	st	X, r24
  fc:	d0 cf       	rjmp	.-96     	; 0x9e <main+0x32>
		}
				
		/* check if the third push button at PA2 is pressed/not */
		else if(PINA & (1<<PA2))
  fe:	e9 e3       	ldi	r30, 0x39	; 57
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	88 2f       	mov	r24, r24
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	84 70       	andi	r24, 0x04	; 4
 10a:	90 70       	andi	r25, 0x00	; 0
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	39 f2       	breq	.-114    	; 0x9e <main+0x32>
		{
			// Stop the motor
			PORTC &= (~(1<<PC0));
 110:	a5 e3       	ldi	r26, 0x35	; 53
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e5 e3       	ldi	r30, 0x35	; 53
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	8c 93       	st	X, r24
			PORTC &= (~(1<<PC1));
 11e:	a5 e3       	ldi	r26, 0x35	; 53
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e5 e3       	ldi	r30, 0x35	; 53
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	8d 7f       	andi	r24, 0xFD	; 253
 12a:	8c 93       	st	X, r24
 12c:	b8 cf       	rjmp	.-144    	; 0x9e <main+0x32>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
