
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control\.vscode\avr.build\output.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vector_default():
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
__ctors_end():
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
__vector_20():
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_init>:
DIO_init():
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:47

/**
 * @brief DIO_init function
 */
void DIO_init(){
    DDRB  &= ~((1<<1) | (1<<0));    // PORTB Pin 0,1 Input
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8c 7f       	andi	r24, 0xFC	; 252
  70:	87 bb       	out	0x17, r24	; 23
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:48
    PORTB &= ~((1<<1) | (1<<0));    // PORTB Pin 0,1 Pull down
  72:	88 b3       	in	r24, 0x18	; 24
  74:	8c 7f       	andi	r24, 0xFC	; 252
  76:	88 bb       	out	0x18, r24	; 24
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:50

    DDRC  |=  ((1<<1) | (1<<0));	// PORTC Pin 0,1 Output
  78:	84 b3       	in	r24, 0x14	; 20
  7a:	83 60       	ori	r24, 0x03	; 3
  7c:	84 bb       	out	0x14, r24	; 20
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:51
    PORTC &= ~((1<<1) | (1<<0));    // PORTC Pin 0,1 Low initially
  7e:	85 b3       	in	r24, 0x15	; 21
  80:	8c 7f       	andi	r24, 0xFC	; 252
  82:	85 bb       	out	0x15, r24	; 21
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:52
}
  84:	08 95       	ret

00000086 <main>:
main():
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:17
/**
 * @brief main function
 * @return int
 */
int main(){
	DIO_init();
  86:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:21

	while(1){
        // if button is pressed
		switch(PINB & 0x3){
  8a:	86 b3       	in	r24, 0x16	; 22
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	83 70       	andi	r24, 0x03	; 3
  90:	90 70       	andi	r25, 0x00	; 0
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	91 05       	cpc	r25, r1
  96:	41 f0       	breq	.+16     	; 0xa8 <main+0x22>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	91 05       	cpc	r25, r1
  9c:	41 f0       	breq	.+16     	; 0xae <main+0x28>
  9e:	89 2b       	or	r24, r25
  a0:	49 f4       	brne	.+18     	; 0xb4 <main+0x2e>
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:23
		case 0:
		    PORTC &= ~((1<<1) | (1<<0));
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	8c 7f       	andi	r24, 0xFC	; 252
  a6:	08 c0       	rjmp	.+16     	; 0xb8 <main+0x32>
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:26
		    break;
		case 1:
			PORTC |=  (1<<0);
  a8:	a8 9a       	sbi	0x15, 0	; 21
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:27
			PORTC &= ~(1<<1);
  aa:	a9 98       	cbi	0x15, 1	; 21
  ac:	ee cf       	rjmp	.-36     	; 0x8a <main+0x4>
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:30
			break;
		case 2:
			PORTC |=  (1<<1);
  ae:	a9 9a       	sbi	0x15, 1	; 21
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:31
			PORTC &= ~(1<<0);
  b0:	a8 98       	cbi	0x15, 0	; 21
  b2:	eb cf       	rjmp	.-42     	; 0x8a <main+0x4>
d:\Github\AVR-Projects\Assingment_Interfacing\3.Two_Led_control\Two_Leds_control/main.c:34
			break;
		default:
			PORTC |= ((1<<1) | (1<<0));
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	83 60       	ori	r24, 0x03	; 3
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	e7 cf       	rjmp	.-50     	; 0x8a <main+0x4>

000000bc <_exit>:
_exit():
  bc:	f8 94       	cli

000000be <__stop_program>:
__stop_program():
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
