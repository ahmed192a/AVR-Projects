
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001f9a  0000202e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800068  00800068  00002036  2**0
                  ALLOC
  3 .stab         00001f80  00000000  00000000  00002038  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001355  00000000  00000000  00003fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000530d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000544d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000055bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007206  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000080f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009000  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000928d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009a5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__vector_3>
      10:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__vector_6>
      1c:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <__vector_7>
      20:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__vector_8>
      24:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a6 37       	cpi	r26, 0x76	; 118
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e9       	ldi	r30, 0x9A	; 154
      78:	ff e1       	ldi	r31, 0x1F	; 31
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 70 07 	call	0xee0	; 0xee0 <main>
      8a:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_init>:
#include "external_eeprom.h"



void EEPROM_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EEPROM_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <EEPROM_init+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <EEPROM_init+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
	/* I2C Struct configuration*/
	TWI_ConfigType twi_Struct;

	twi_Struct.Address		 = ADDRESS_OF_MC_IN_SLAVE_MODE;
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	89 83       	std	Y+1, r24	; 0x01
	twi_Struct.BitRate		 = FAST_MODE_400KB;
     b58:	80 e8       	ldi	r24, 0x80	; 128
     b5a:	9a e1       	ldi	r25, 0x1A	; 26
     b5c:	a6 e0       	ldi	r26, 0x06	; 6
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	8a 83       	std	Y+2, r24	; 0x02
     b62:	9b 83       	std	Y+3, r25	; 0x03
     b64:	ac 83       	std	Y+4, r26	; 0x04
     b66:	bd 83       	std	Y+5, r27	; 0x05
	twi_Struct.InterruptMode = INTERRUPT_MODE_DISABLE;
     b68:	1e 82       	std	Y+6, r1	; 0x06

	/* initializa I2C Module */
	TWI_init(&twi_Struct);
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	0e 94 96 06 	call	0xd2c	; 0xd2c <TWI_init>

}
     b72:	26 96       	adiw	r28, 0x06	; 6
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
     b7e:	cf 91       	pop	r28
     b80:	df 91       	pop	r29
     b82:	08 95       	ret

00000b84 <EEPROM_writeByte>:


uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     b84:	df 93       	push	r29
     b86:	cf 93       	push	r28
     b88:	00 d0       	rcall	.+0      	; 0xb8a <EEPROM_writeByte+0x6>
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <EEPROM_writeByte+0x8>
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	9a 83       	std	Y+2, r25	; 0x02
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     b96:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_start>
    if (TWI_getStatus() != TW_START)
     b9a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TWI_getStatus>
     b9e:	88 30       	cpi	r24, 0x08	; 8
     ba0:	11 f0       	breq	.+4      	; 0xba6 <EEPROM_writeByte+0x22>
        return ERROR;
     ba2:	1c 82       	std	Y+4, r1	; 0x04
     ba4:	28 c0       	rjmp	.+80     	; 0xbf6 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	9a 81       	ldd	r25, Y+2	; 0x02
     baa:	80 70       	andi	r24, 0x00	; 0
     bac:	97 70       	andi	r25, 0x07	; 7
     bae:	88 0f       	add	r24, r24
     bb0:	89 2f       	mov	r24, r25
     bb2:	88 1f       	adc	r24, r24
     bb4:	99 0b       	sbc	r25, r25
     bb6:	91 95       	neg	r25
     bb8:	80 6a       	ori	r24, 0xA0	; 160
     bba:	0e 94 12 07 	call	0xe24	; 0xe24 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     bbe:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TWI_getStatus>
     bc2:	88 31       	cpi	r24, 0x18	; 24
     bc4:	11 f0       	breq	.+4      	; 0xbca <EEPROM_writeByte+0x46>
        return ERROR;
     bc6:	1c 82       	std	Y+4, r1	; 0x04
     bc8:	16 c0       	rjmp	.+44     	; 0xbf6 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	0e 94 12 07 	call	0xe24	; 0xe24 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     bd0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TWI_getStatus>
     bd4:	88 32       	cpi	r24, 0x28	; 40
     bd6:	11 f0       	breq	.+4      	; 0xbdc <EEPROM_writeByte+0x58>
        return ERROR;
     bd8:	1c 82       	std	Y+4, r1	; 0x04
     bda:	0d c0       	rjmp	.+26     	; 0xbf6 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_write(u8data);
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	0e 94 12 07 	call	0xe24	; 0xe24 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     be2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TWI_getStatus>
     be6:	88 32       	cpi	r24, 0x28	; 40
     be8:	11 f0       	breq	.+4      	; 0xbee <EEPROM_writeByte+0x6a>
        return ERROR;
     bea:	1c 82       	std	Y+4, r1	; 0x04
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     bee:	0e 94 07 07 	call	0xe0e	; 0xe0e <TWI_stop>

    return SUCCESS;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	8c 83       	std	Y+4, r24	; 0x04
     bf6:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <EEPROM_readByte>:



uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <EEPROM_readByte+0x6>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <EEPROM_readByte+0x8>
     c0e:	0f 92       	push	r0
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	9a 83       	std	Y+2, r25	; 0x02
     c16:	89 83       	std	Y+1, r24	; 0x01
     c18:	7c 83       	std	Y+4, r23	; 0x04
     c1a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c1c:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_start>
    if (TWI_getStatus() != TW_START)
     c20:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TWI_getStatus>
     c24:	88 30       	cpi	r24, 0x08	; 8
     c26:	11 f0       	breq	.+4      	; 0xc2c <EEPROM_readByte+0x26>
        return ERROR;
     c28:	1d 82       	std	Y+5, r1	; 0x05
     c2a:	44 c0       	rjmp	.+136    	; 0xcb4 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	80 70       	andi	r24, 0x00	; 0
     c32:	97 70       	andi	r25, 0x07	; 7
     c34:	88 0f       	add	r24, r24
     c36:	89 2f       	mov	r24, r25
     c38:	88 1f       	adc	r24, r24
     c3a:	99 0b       	sbc	r25, r25
     c3c:	91 95       	neg	r25
     c3e:	80 6a       	ori	r24, 0xA0	; 160
     c40:	0e 94 12 07 	call	0xe24	; 0xe24 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c44:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TWI_getStatus>
     c48:	88 31       	cpi	r24, 0x18	; 24
     c4a:	11 f0       	breq	.+4      	; 0xc50 <EEPROM_readByte+0x4a>
        return ERROR;
     c4c:	1d 82       	std	Y+5, r1	; 0x05
     c4e:	32 c0       	rjmp	.+100    	; 0xcb4 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	0e 94 12 07 	call	0xe24	; 0xe24 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c56:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TWI_getStatus>
     c5a:	88 32       	cpi	r24, 0x28	; 40
     c5c:	11 f0       	breq	.+4      	; 0xc62 <EEPROM_readByte+0x5c>
        return ERROR;
     c5e:	1d 82       	std	Y+5, r1	; 0x05
     c60:	29 c0       	rjmp	.+82     	; 0xcb4 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
     c62:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     c66:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TWI_getStatus>
     c6a:	80 31       	cpi	r24, 0x10	; 16
     c6c:	11 f0       	breq	.+4      	; 0xc72 <EEPROM_readByte+0x6c>
        return ERROR;
     c6e:	1d 82       	std	Y+5, r1	; 0x05
     c70:	21 c0       	rjmp	.+66     	; 0xcb4 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	80 70       	andi	r24, 0x00	; 0
     c78:	97 70       	andi	r25, 0x07	; 7
     c7a:	88 0f       	add	r24, r24
     c7c:	89 2f       	mov	r24, r25
     c7e:	88 1f       	adc	r24, r24
     c80:	99 0b       	sbc	r25, r25
     c82:	91 95       	neg	r25
     c84:	81 6a       	ori	r24, 0xA1	; 161
     c86:	0e 94 12 07 	call	0xe24	; 0xe24 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     c8a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TWI_getStatus>
     c8e:	80 34       	cpi	r24, 0x40	; 64
     c90:	11 f0       	breq	.+4      	; 0xc96 <EEPROM_readByte+0x90>
        return ERROR;
     c92:	1d 82       	std	Y+5, r1	; 0x05
     c94:	0f c0       	rjmp	.+30     	; 0xcb4 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     c96:	0e 94 3c 07 	call	0xe78	; 0xe78 <TWI_readWithNACK>
     c9a:	eb 81       	ldd	r30, Y+3	; 0x03
     c9c:	fc 81       	ldd	r31, Y+4	; 0x04
     c9e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     ca0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TWI_getStatus>
     ca4:	88 35       	cpi	r24, 0x58	; 88
     ca6:	11 f0       	breq	.+4      	; 0xcac <EEPROM_readByte+0xa6>
        return ERROR;
     ca8:	1d 82       	std	Y+5, r1	; 0x05
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     cac:	0e 94 07 07 	call	0xe0e	; 0xe0e <TWI_stop>
    return SUCCESS;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	8d 83       	std	Y+5, r24	; 0x05
     cb4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <__vector_17>:


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TWI_vect){
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	2f 93       	push	r18
     cd2:	3f 93       	push	r19
     cd4:	4f 93       	push	r20
     cd6:	5f 93       	push	r21
     cd8:	6f 93       	push	r22
     cda:	7f 93       	push	r23
     cdc:	8f 93       	push	r24
     cde:	9f 93       	push	r25
     ce0:	af 93       	push	r26
     ce2:	bf 93       	push	r27
     ce4:	ef 93       	push	r30
     ce6:	ff 93       	push	r31
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWI != NULL_PTR){
     cf0:	80 91 68 00 	lds	r24, 0x0068
     cf4:	90 91 69 00 	lds	r25, 0x0069
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	29 f0       	breq	.+10     	; 0xd06 <__vector_17+0x40>

		/* Call the Call Back function for TWI Interrupt */
		(*g_callBackPtrTWI)();
     cfc:	e0 91 68 00 	lds	r30, 0x0068
     d00:	f0 91 69 00 	lds	r31, 0x0069
     d04:	09 95       	icall
	}
}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <TWI_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void TWI_init(const TWI_ConfigType* config_Ptr){
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	00 d0       	rcall	.+0      	; 0xd3a <TWI_init+0xe>
     d3a:	0f 92       	push	r0
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	9b 83       	std	Y+3, r25	; 0x03
     d42:	8a 83       	std	Y+2, r24	; 0x02
	TWCR &= 0x00;
	TWDR &= 0x00;
	TWAR &= 0x00;
*/
	/* Bit rate calculations */
	bitRateCalculation = ( ( (F_CPU) - ( (config_Ptr -> BitRate) * 16) ) / (2 * (config_Ptr -> BitRate) ) );
     d44:	ea 81       	ldd	r30, Y+2	; 0x02
     d46:	fb 81       	ldd	r31, Y+3	; 0x03
     d48:	21 81       	ldd	r18, Z+1	; 0x01
     d4a:	32 81       	ldd	r19, Z+2	; 0x02
     d4c:	43 81       	ldd	r20, Z+3	; 0x03
     d4e:	54 81       	ldd	r21, Z+4	; 0x04
     d50:	80 e2       	ldi	r24, 0x20	; 32
     d52:	91 ea       	ldi	r25, 0xA1	; 161
     d54:	a7 e0       	ldi	r26, 0x07	; 7
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	82 1b       	sub	r24, r18
     d5a:	93 0b       	sbc	r25, r19
     d5c:	a4 0b       	sbc	r26, r20
     d5e:	b5 0b       	sbc	r27, r21
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	aa 1f       	adc	r26, r26
     d66:	bb 1f       	adc	r27, r27
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	aa 1f       	adc	r26, r26
     d6e:	bb 1f       	adc	r27, r27
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	aa 1f       	adc	r26, r26
     d76:	bb 1f       	adc	r27, r27
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	aa 1f       	adc	r26, r26
     d7e:	bb 1f       	adc	r27, r27
     d80:	7c 01       	movw	r14, r24
     d82:	8d 01       	movw	r16, r26
     d84:	ea 81       	ldd	r30, Y+2	; 0x02
     d86:	fb 81       	ldd	r31, Y+3	; 0x03
     d88:	81 81       	ldd	r24, Z+1	; 0x01
     d8a:	92 81       	ldd	r25, Z+2	; 0x02
     d8c:	a3 81       	ldd	r26, Z+3	; 0x03
     d8e:	b4 81       	ldd	r27, Z+4	; 0x04
     d90:	9c 01       	movw	r18, r24
     d92:	ad 01       	movw	r20, r26
     d94:	22 0f       	add	r18, r18
     d96:	33 1f       	adc	r19, r19
     d98:	44 1f       	adc	r20, r20
     d9a:	55 1f       	adc	r21, r21
     d9c:	c8 01       	movw	r24, r16
     d9e:	b7 01       	movw	r22, r14
     da0:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
     da4:	da 01       	movw	r26, r20
     da6:	c9 01       	movw	r24, r18
     da8:	89 83       	std	Y+1, r24	; 0x01

	/* Check if number is Bigger than zero or not */
	if(bitRateCalculation >= 0){
		/*Bit Rate calculation proper with this clock*/
		TWBR = bitRateCalculation;
     daa:	e0 e2       	ldi	r30, 0x20	; 32
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	80 83       	st	Z, r24
		bitRateCalculation = ( ( (F_CPU) - ( (NORMAL_MODE_100KB) * 16) ) / (2 * (NORMAL_MODE_100KB) ) );
		TWBR = bitRateCalculation;
	}

	/* Zero Prescaler */
	TWSR = 0x00;
     db2:	e1 e2       	ldi	r30, 0x21	; 33
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	10 82       	st	Z, r1
     * Two Wire Bus address my address
     * if any master device want to call me: 0x1
     * (used in case this MC is a slave device)
     *  General Call Recognition: Off
    */
    TWAR = ( (config_Ptr -> Address) & 0xFE);
     db8:	a2 e2       	ldi	r26, 0x22	; 34
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	ea 81       	ldd	r30, Y+2	; 0x02
     dbe:	fb 81       	ldd	r31, Y+3	; 0x03
     dc0:	80 81       	ld	r24, Z
     dc2:	8e 7f       	andi	r24, 0xFE	; 254
     dc4:	8c 93       	st	X, r24

    /* Choose Operating mode (Interrupt or polling) */
    TWCR = ( (config_Ptr -> InterruptMode) );
     dc6:	a6 e5       	ldi	r26, 0x56	; 86
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	ea 81       	ldd	r30, Y+2	; 0x02
     dcc:	fb 81       	ldd	r31, Y+3	; 0x03
     dce:	85 81       	ldd	r24, Z+5	; 0x05
     dd0:	8c 93       	st	X, r24

    /* Enable TWI Module */
    TWCR = (1<<TWEN);
     dd2:	e6 e5       	ldi	r30, 0x56	; 86
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	84 e0       	ldi	r24, 0x04	; 4
     dd8:	80 83       	st	Z, r24

}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	08 95       	ret

00000dee <TWI_start>:

void TWI_start(void)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     df6:	e6 e5       	ldi	r30, 0x56	; 86
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	84 ea       	ldi	r24, 0xA4	; 164
     dfc:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     dfe:	e6 e5       	ldi	r30, 0x56	; 86
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	88 23       	and	r24, r24
     e06:	dc f7       	brge	.-10     	; 0xdfe <TWI_start+0x10>
}
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <TWI_stop>:

void TWI_stop(void)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     e16:	e6 e5       	ldi	r30, 0x56	; 86
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	84 e9       	ldi	r24, 0x94	; 148
     e1c:	80 83       	st	Z, r24
}
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <TWI_write>:

void TWI_write(uint8 data)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	0f 92       	push	r0
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     e30:	e3 e2       	ldi	r30, 0x23	; 35
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e38:	e6 e5       	ldi	r30, 0x56	; 86
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	84 e8       	ldi	r24, 0x84	; 132
     e3e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e40:	e6 e5       	ldi	r30, 0x56	; 86
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 23       	and	r24, r24
     e48:	dc f7       	brge	.-10     	; 0xe40 <TWI_write+0x1c>
}
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     e5a:	e6 e5       	ldi	r30, 0x56	; 86
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	84 ec       	ldi	r24, 0xC4	; 196
     e60:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e62:	e6 e5       	ldi	r30, 0x56	; 86
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	88 23       	and	r24, r24
     e6a:	dc f7       	brge	.-10     	; 0xe62 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
     e6c:	e3 e2       	ldi	r30, 0x23	; 35
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
}
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e80:	e6 e5       	ldi	r30, 0x56	; 86
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	84 e8       	ldi	r24, 0x84	; 132
     e86:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e88:	e6 e5       	ldi	r30, 0x56	; 86
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	88 23       	and	r24, r24
     e90:	dc f7       	brge	.-10     	; 0xe88 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
     e92:	e3 e2       	ldi	r30, 0x23	; 35
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	0f 92       	push	r0
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     ea8:	e1 e2       	ldi	r30, 0x21	; 33
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	88 7f       	andi	r24, 0xF8	; 248
     eb0:	89 83       	std	Y+1, r24	; 0x01
    return status;
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <TWI_setCallBack>:



void TWI_setCallBack(void (*f_ptr)(void)){
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <TWI_setCallBack+0x6>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	9a 83       	std	Y+2, r25	; 0x02
     ec8:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrTWI = f_ptr;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	90 93 69 00 	sts	0x0069, r25
     ed2:	80 93 68 00 	sts	0x0068, r24
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <main>:
volatile uint8 g_timer1_SecFlag = 0;

/************************************************************************
  	  	  	  	  	  	  	  Main Function
 ***********************************************************************/
int main(){
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	c5 54       	subi	r28, 0x45	; 69
     eea:	d0 40       	sbci	r29, 0x00	; 0
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
	uint8 pass[5];
	uint8 check;
	uint8 message;
	uint8 flag;
	/* Enable Global Interrupt */
	SREG |= (1<<7);
     ef6:	af e5       	ldi	r26, 0x5F	; 95
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	ef e5       	ldi	r30, 0x5F	; 95
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	80 68       	ori	r24, 0x80	; 128
     f02:	8c 93       	st	X, r24

	/* UART Structure for its configurations */
	UART_ConfigType uart_Struct;
	uart_Struct.BaudRate			= 9600;
     f04:	80 e8       	ldi	r24, 0x80	; 128
     f06:	95 e2       	ldi	r25, 0x25	; 37
     f08:	a0 e0       	ldi	r26, 0x00	; 0
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	88 af       	std	Y+56, r24	; 0x38
     f0e:	99 af       	std	Y+57, r25	; 0x39
     f10:	aa af       	std	Y+58, r26	; 0x3a
     f12:	bb af       	std	Y+59, r27	; 0x3b
	uart_Struct.InterruptMode		= POLLING;
     f14:	1d aa       	std	Y+53, r1	; 0x35
	uart_Struct.ParityMode			= NO_PARIT_BITS;
     f16:	1f aa       	std	Y+55, r1	; 0x37
	uart_Struct.StopBit				= STOP_BIT_1_BIT;
     f18:	1e aa       	std	Y+54, r1	; 0x36

	/* Timer Structure for timer 1 configurations */
	/* Configure Timer1 to count for 1 Second*/
	Timer_ConfigType timer1_Strut;
	timer1_Strut.mode				= CTC_MODE_CHANNEL_A;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	8d af       	std	Y+61, r24	; 0x3d
	timer1_Strut.compare_output		= NORMAL;
     f1e:	1e ae       	std	Y+62, r1	; 0x3e
	timer1_Strut.OutputPin			= NONE;
     f20:	1f ae       	std	Y+63, r1	; 0x3f
	timer1_Strut.clock				= F_CPU_1024;
     f22:	85 e0       	ldi	r24, 0x05	; 5
     f24:	8c af       	std	Y+60, r24	; 0x3c
	timer1_Strut.initial			= 0;
     f26:	fe 01       	movw	r30, r28
     f28:	e0 5c       	subi	r30, 0xC0	; 192
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	11 82       	std	Z+1, r1	; 0x01
     f2e:	10 82       	st	Z, r1
	timer1_Strut.compare_value		= 7900;
     f30:	fe 01       	movw	r30, r28
     f32:	ee 5b       	subi	r30, 0xBE	; 190
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	8c ed       	ldi	r24, 0xDC	; 220
     f38:	9e e1       	ldi	r25, 0x1E	; 30
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	80 83       	st	Z, r24

	/*Buzzer Initialization*/
	SET_BIT(DDRC,2);
     f3e:	a4 e3       	ldi	r26, 0x34	; 52
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e4 e3       	ldi	r30, 0x34	; 52
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	84 60       	ori	r24, 0x04	; 4
     f4a:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC,2);
     f4c:	a5 e3       	ldi	r26, 0x35	; 53
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e5 e3       	ldi	r30, 0x35	; 53
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	8b 7f       	andi	r24, 0xFB	; 251
     f58:	8c 93       	st	X, r24

	/*Motor Initialization*/
	motor_init();
     f5a:	0e 94 cc 09 	call	0x1398	; 0x1398 <motor_init>

	/* EEPROM Initialization */
	EEPROM_init();
     f5e:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_init>

	/* Timer 1 Initialization */
	TIMER1_init(&timer1_Strut);
     f62:	ce 01       	movw	r24, r28
     f64:	cc 96       	adiw	r24, 0x3c	; 60
     f66:	0e 94 1f 0c 	call	0x183e	; 0x183e <TIMER1_init>

	/* CallBack Function for timer 1 CTC Channel A Interrupt Function */
	Timer1_setCallBack(Timer1_INT);
     f6a:	80 ec       	ldi	r24, 0xC0	; 192
     f6c:	99 e0       	ldi	r25, 0x09	; 9
     f6e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Timer1_setCallBack>

	/* UART Initialization */
	UART_init(&uart_Struct);
     f72:	ce 01       	movw	r24, r28
     f74:	c5 96       	adiw	r24, 0x35	; 53
     f76:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <UART_init>


	/* Wait till MC1 is ready */
	while(UART_recieveByte() != M1_READY){}
     f7a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <UART_recieveByte>
     f7e:	86 30       	cpi	r24, 0x06	; 6
     f80:	e1 f7       	brne	.-8      	; 0xf7a <main+0x9a>



	while(1){
		flag = 1;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	8d a7       	std	Y+45, r24	; 0x2d
		/* Wait and Recieve for the message from MC1 */
		message = UART_recieveByte();
     f86:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <UART_recieveByte>
     f8a:	8e a7       	std	Y+46, r24	; 0x2e
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	a8 e4       	ldi	r26, 0x48	; 72
     f92:	b2 e4       	ldi	r27, 0x42	; 66
     f94:	8f a3       	std	Y+39, r24	; 0x27
     f96:	98 a7       	std	Y+40, r25	; 0x28
     f98:	a9 a7       	std	Y+41, r26	; 0x29
     f9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9c:	6f a1       	ldd	r22, Y+39	; 0x27
     f9e:	78 a5       	ldd	r23, Y+40	; 0x28
     fa0:	89 a5       	ldd	r24, Y+41	; 0x29
     fa2:	9a a5       	ldd	r25, Y+42	; 0x2a
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	4a ef       	ldi	r20, 0xFA	; 250
     faa:	54 e4       	ldi	r21, 0x44	; 68
     fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	8b a3       	std	Y+35, r24	; 0x23
     fb6:	9c a3       	std	Y+36, r25	; 0x24
     fb8:	ad a3       	std	Y+37, r26	; 0x25
     fba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fbc:	6b a1       	ldd	r22, Y+35	; 0x23
     fbe:	7c a1       	ldd	r23, Y+36	; 0x24
     fc0:	8d a1       	ldd	r24, Y+37	; 0x25
     fc2:	9e a1       	ldd	r25, Y+38	; 0x26
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e8       	ldi	r20, 0x80	; 128
     fca:	5f e3       	ldi	r21, 0x3F	; 63
     fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fd0:	88 23       	and	r24, r24
     fd2:	2c f4       	brge	.+10     	; 0xfde <main+0xfe>
		__ticks = 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9a a3       	std	Y+34, r25	; 0x22
     fda:	89 a3       	std	Y+33, r24	; 0x21
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <main+0x17c>
	else if (__tmp > 65535)
     fde:	6b a1       	ldd	r22, Y+35	; 0x23
     fe0:	7c a1       	ldd	r23, Y+36	; 0x24
     fe2:	8d a1       	ldd	r24, Y+37	; 0x25
     fe4:	9e a1       	ldd	r25, Y+38	; 0x26
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	3f ef       	ldi	r19, 0xFF	; 255
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	57 e4       	ldi	r21, 0x47	; 71
     fee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff2:	18 16       	cp	r1, r24
     ff4:	4c f5       	brge	.+82     	; 0x1048 <main+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff6:	6f a1       	ldd	r22, Y+39	; 0x27
     ff8:	78 a5       	ldd	r23, Y+40	; 0x28
     ffa:	89 a5       	ldd	r24, Y+41	; 0x29
     ffc:	9a a5       	ldd	r25, Y+42	; 0x2a
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e2       	ldi	r20, 0x20	; 32
    1004:	51 e4       	ldi	r21, 0x41	; 65
    1006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	9a a3       	std	Y+34, r25	; 0x22
    101c:	89 a3       	std	Y+33, r24	; 0x21
    101e:	0f c0       	rjmp	.+30     	; 0x103e <main+0x15e>
    1020:	88 ec       	ldi	r24, 0xC8	; 200
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	98 a3       	std	Y+32, r25	; 0x20
    1026:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1028:	8f 8d       	ldd	r24, Y+31	; 0x1f
    102a:	98 a1       	ldd	r25, Y+32	; 0x20
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <main+0x14c>
    1030:	98 a3       	std	Y+32, r25	; 0x20
    1032:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1034:	89 a1       	ldd	r24, Y+33	; 0x21
    1036:	9a a1       	ldd	r25, Y+34	; 0x22
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	9a a3       	std	Y+34, r25	; 0x22
    103c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103e:	89 a1       	ldd	r24, Y+33	; 0x21
    1040:	9a a1       	ldd	r25, Y+34	; 0x22
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	69 f7       	brne	.-38     	; 0x1020 <main+0x140>
    1046:	14 c0       	rjmp	.+40     	; 0x1070 <main+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1048:	6b a1       	ldd	r22, Y+35	; 0x23
    104a:	7c a1       	ldd	r23, Y+36	; 0x24
    104c:	8d a1       	ldd	r24, Y+37	; 0x25
    104e:	9e a1       	ldd	r25, Y+38	; 0x26
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9a a3       	std	Y+34, r25	; 0x22
    105a:	89 a3       	std	Y+33, r24	; 0x21
    105c:	89 a1       	ldd	r24, Y+33	; 0x21
    105e:	9a a1       	ldd	r25, Y+34	; 0x22
    1060:	9e 8f       	std	Y+30, r25	; 0x1e
    1062:	8d 8f       	std	Y+29, r24	; 0x1d
    1064:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1066:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <main+0x188>
    106c:	9e 8f       	std	Y+30, r25	; 0x1e
    106e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		/*Check which Case to do*/
		switch (message){
    1070:	8e a5       	ldd	r24, Y+46	; 0x2e
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	26 96       	adiw	r28, 0x06	; 6
    1078:	3f af       	std	Y+63, r19	; 0x3f
    107a:	2e af       	std	Y+62, r18	; 0x3e
    107c:	26 97       	sbiw	r28, 0x06	; 6
    107e:	26 96       	adiw	r28, 0x06	; 6
    1080:	8e ad       	ldd	r24, Y+62	; 0x3e
    1082:	9f ad       	ldd	r25, Y+63	; 0x3f
    1084:	26 97       	sbiw	r28, 0x06	; 6
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	91 05       	cpc	r25, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <main+0x1ae>
    108c:	62 c1       	rjmp	.+708    	; 0x1352 <main+0x472>
    108e:	26 96       	adiw	r28, 0x06	; 6
    1090:	2e ad       	ldd	r18, Y+62	; 0x3e
    1092:	3f ad       	ldd	r19, Y+63	; 0x3f
    1094:	26 97       	sbiw	r28, 0x06	; 6
    1096:	25 30       	cpi	r18, 0x05	; 5
    1098:	31 05       	cpc	r19, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <main+0x1be>
    109c:	8e c0       	rjmp	.+284    	; 0x11ba <main+0x2da>
    109e:	26 96       	adiw	r28, 0x06	; 6
    10a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    10a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    10a4:	26 97       	sbiw	r28, 0x06	; 6
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f0       	breq	.+2      	; 0x10ae <main+0x1ce>
    10ac:	6a cf       	rjmp	.-300    	; 0xf82 <main+0xa2>

		case NEW_PASSWORD:
			/*Get the new password form MC1 and Store it in EEPROM*/
			for(uint8 i = 0; i < 5; i++){
    10ae:	1c a6       	std	Y+44, r1	; 0x2c
    10b0:	7f c0       	rjmp	.+254    	; 0x11b0 <main+0x2d0>
				/*Recieve one byte from the password*/
				message = UART_recieveByte();
    10b2:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <UART_recieveByte>
    10b6:	8e a7       	std	Y+46, r24	; 0x2e
				/*Write the password in the EEPROM*/
				EEPROM_writeByte( 0x0A+1+i , message);
    10b8:	8c a5       	ldd	r24, Y+44	; 0x2c
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0b 96       	adiw	r24, 0x0b	; 11
    10c0:	6e a5       	ldd	r22, Y+46	; 0x2e
    10c2:	0e 94 c2 05 	call	0xb84	; 0xb84 <EEPROM_writeByte>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a8 ec       	ldi	r26, 0xC8	; 200
    10cc:	b2 e4       	ldi	r27, 0x42	; 66
    10ce:	89 8f       	std	Y+25, r24	; 0x19
    10d0:	9a 8f       	std	Y+26, r25	; 0x1a
    10d2:	ab 8f       	std	Y+27, r26	; 0x1b
    10d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	69 8d       	ldd	r22, Y+25	; 0x19
    10d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a ef       	ldi	r20, 0xFA	; 250
    10e4:	54 e4       	ldi	r21, 0x44	; 68
    10e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	8d 8b       	std	Y+21, r24	; 0x15
    10f0:	9e 8b       	std	Y+22, r25	; 0x16
    10f2:	af 8b       	std	Y+23, r26	; 0x17
    10f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10f6:	6d 89       	ldd	r22, Y+21	; 0x15
    10f8:	7e 89       	ldd	r23, Y+22	; 0x16
    10fa:	8f 89       	ldd	r24, Y+23	; 0x17
    10fc:	98 8d       	ldd	r25, Y+24	; 0x18
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    110a:	88 23       	and	r24, r24
    110c:	2c f4       	brge	.+10     	; 0x1118 <main+0x238>
		__ticks = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9c 8b       	std	Y+20, r25	; 0x14
    1114:	8b 8b       	std	Y+19, r24	; 0x13
    1116:	3f c0       	rjmp	.+126    	; 0x1196 <main+0x2b6>
	else if (__tmp > 65535)
    1118:	6d 89       	ldd	r22, Y+21	; 0x15
    111a:	7e 89       	ldd	r23, Y+22	; 0x16
    111c:	8f 89       	ldd	r24, Y+23	; 0x17
    111e:	98 8d       	ldd	r25, Y+24	; 0x18
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    112c:	18 16       	cp	r1, r24
    112e:	4c f5       	brge	.+82     	; 0x1182 <main+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1130:	69 8d       	ldd	r22, Y+25	; 0x19
    1132:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1134:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1136:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9c 8b       	std	Y+20, r25	; 0x14
    1156:	8b 8b       	std	Y+19, r24	; 0x13
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <main+0x298>
    115a:	88 ec       	ldi	r24, 0xC8	; 200
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9a 8b       	std	Y+18, r25	; 0x12
    1160:	89 8b       	std	Y+17, r24	; 0x11
    1162:	89 89       	ldd	r24, Y+17	; 0x11
    1164:	9a 89       	ldd	r25, Y+18	; 0x12
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <main+0x286>
    116a:	9a 8b       	std	Y+18, r25	; 0x12
    116c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	8b 89       	ldd	r24, Y+19	; 0x13
    1170:	9c 89       	ldd	r25, Y+20	; 0x14
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9c 8b       	std	Y+20, r25	; 0x14
    1176:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1178:	8b 89       	ldd	r24, Y+19	; 0x13
    117a:	9c 89       	ldd	r25, Y+20	; 0x14
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	69 f7       	brne	.-38     	; 0x115a <main+0x27a>
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <main+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1182:	6d 89       	ldd	r22, Y+21	; 0x15
    1184:	7e 89       	ldd	r23, Y+22	; 0x16
    1186:	8f 89       	ldd	r24, Y+23	; 0x17
    1188:	98 8d       	ldd	r25, Y+24	; 0x18
    118a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9c 8b       	std	Y+20, r25	; 0x14
    1194:	8b 8b       	std	Y+19, r24	; 0x13
    1196:	8b 89       	ldd	r24, Y+19	; 0x13
    1198:	9c 89       	ldd	r25, Y+20	; 0x14
    119a:	98 8b       	std	Y+16, r25	; 0x10
    119c:	8f 87       	std	Y+15, r24	; 0x0f
    119e:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a0:	98 89       	ldd	r25, Y+16	; 0x10
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <main+0x2c2>
    11a6:	98 8b       	std	Y+16, r25	; 0x10
    11a8:	8f 87       	std	Y+15, r24	; 0x0f
		/*Check which Case to do*/
		switch (message){

		case NEW_PASSWORD:
			/*Get the new password form MC1 and Store it in EEPROM*/
			for(uint8 i = 0; i < 5; i++){
    11aa:	8c a5       	ldd	r24, Y+44	; 0x2c
    11ac:	8f 5f       	subi	r24, 0xFF	; 255
    11ae:	8c a7       	std	Y+44, r24	; 0x2c
    11b0:	8c a5       	ldd	r24, Y+44	; 0x2c
    11b2:	85 30       	cpi	r24, 0x05	; 5
    11b4:	08 f4       	brcc	.+2      	; 0x11b8 <main+0x2d8>
    11b6:	7d cf       	rjmp	.-262    	; 0x10b2 <main+0x1d2>
    11b8:	e4 ce       	rjmp	.-568    	; 0xf82 <main+0xa2>
			}
			break;

		case CHECK_PASSWORD:
			/*Compare between the Recieved password and the Password Stored in the EEPROM*/
			for(uint8 i = 0; i < 5; i++){
    11ba:	1b a6       	std	Y+43, r1	; 0x2b
    11bc:	96 c0       	rjmp	.+300    	; 0x12ea <main+0x40a>
				/*Recive one byte from the password from MC1*/
				check = UART_recieveByte();
    11be:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <UART_recieveByte>
    11c2:	8f a7       	std	Y+47, r24	; 0x2f
				/* Get one Byte from the password from the EEPROM*/
				EEPROM_readByte(0x0A+1+i,&pass[i]);
    11c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0b 96       	adiw	r24, 0x0b	; 11
    11cc:	ac 01       	movw	r20, r24
    11ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9e 01       	movw	r18, r28
    11d6:	20 5d       	subi	r18, 0xD0	; 208
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	28 0f       	add	r18, r24
    11dc:	39 1f       	adc	r19, r25
    11de:	ca 01       	movw	r24, r20
    11e0:	b9 01       	movw	r22, r18
    11e2:	0e 94 03 06 	call	0xc06	; 0xc06 <EEPROM_readByte>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a8 e4       	ldi	r26, 0x48	; 72
    11ec:	b2 e4       	ldi	r27, 0x42	; 66
    11ee:	8b 87       	std	Y+11, r24	; 0x0b
    11f0:	9c 87       	std	Y+12, r25	; 0x0c
    11f2:	ad 87       	std	Y+13, r26	; 0x0d
    11f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	4a ef       	ldi	r20, 0xFA	; 250
    1204:	54 e4       	ldi	r21, 0x44	; 68
    1206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	8f 83       	std	Y+7, r24	; 0x07
    1210:	98 87       	std	Y+8, r25	; 0x08
    1212:	a9 87       	std	Y+9, r26	; 0x09
    1214:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1216:	6f 81       	ldd	r22, Y+7	; 0x07
    1218:	78 85       	ldd	r23, Y+8	; 0x08
    121a:	89 85       	ldd	r24, Y+9	; 0x09
    121c:	9a 85       	ldd	r25, Y+10	; 0x0a
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	40 e8       	ldi	r20, 0x80	; 128
    1224:	5f e3       	ldi	r21, 0x3F	; 63
    1226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    122a:	88 23       	and	r24, r24
    122c:	2c f4       	brge	.+10     	; 0x1238 <main+0x358>
		__ticks = 1;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	9e 83       	std	Y+6, r25	; 0x06
    1234:	8d 83       	std	Y+5, r24	; 0x05
    1236:	3f c0       	rjmp	.+126    	; 0x12b6 <main+0x3d6>
	else if (__tmp > 65535)
    1238:	6f 81       	ldd	r22, Y+7	; 0x07
    123a:	78 85       	ldd	r23, Y+8	; 0x08
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	3f ef       	ldi	r19, 0xFF	; 255
    1244:	4f e7       	ldi	r20, 0x7F	; 127
    1246:	57 e4       	ldi	r21, 0x47	; 71
    1248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    124c:	18 16       	cp	r1, r24
    124e:	4c f5       	brge	.+82     	; 0x12a2 <main+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1250:	6b 85       	ldd	r22, Y+11	; 0x0b
    1252:	7c 85       	ldd	r23, Y+12	; 0x0c
    1254:	8d 85       	ldd	r24, Y+13	; 0x0d
    1256:	9e 85       	ldd	r25, Y+14	; 0x0e
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e2       	ldi	r20, 0x20	; 32
    125e:	51 e4       	ldi	r21, 0x41	; 65
    1260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	9e 83       	std	Y+6, r25	; 0x06
    1276:	8d 83       	std	Y+5, r24	; 0x05
    1278:	0f c0       	rjmp	.+30     	; 0x1298 <main+0x3b8>
    127a:	88 ec       	ldi	r24, 0xC8	; 200
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	9c 83       	std	Y+4, r25	; 0x04
    1280:	8b 83       	std	Y+3, r24	; 0x03
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	f1 f7       	brne	.-4      	; 0x1286 <main+0x3a6>
    128a:	9c 83       	std	Y+4, r25	; 0x04
    128c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	9e 83       	std	Y+6, r25	; 0x06
    1296:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1298:	8d 81       	ldd	r24, Y+5	; 0x05
    129a:	9e 81       	ldd	r25, Y+6	; 0x06
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	69 f7       	brne	.-38     	; 0x127a <main+0x39a>
    12a0:	14 c0       	rjmp	.+40     	; 0x12ca <main+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a2:	6f 81       	ldd	r22, Y+7	; 0x07
    12a4:	78 85       	ldd	r23, Y+8	; 0x08
    12a6:	89 85       	ldd	r24, Y+9	; 0x09
    12a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ae:	dc 01       	movw	r26, r24
    12b0:	cb 01       	movw	r24, r22
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	8d 83       	std	Y+5, r24	; 0x05
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	89 83       	std	Y+1, r24	; 0x01
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <main+0x3e2>
    12c6:	9a 83       	std	Y+2, r25	; 0x02
    12c8:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				/*Compare the PASSWORDS*/
				if(check != pass[i])
    12ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	ce 01       	movw	r24, r28
    12d2:	c0 96       	adiw	r24, 0x30	; 48
    12d4:	fc 01       	movw	r30, r24
    12d6:	e2 0f       	add	r30, r18
    12d8:	f3 1f       	adc	r31, r19
    12da:	90 81       	ld	r25, Z
    12dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    12de:	98 17       	cp	r25, r24
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <main+0x404>
				{
					/*If the two passwords are not matched the flag will be 0 */
					/*if the two passwords are matched the flag will remain 1 */
					flag = 0;
    12e2:	1d a6       	std	Y+45, r1	; 0x2d
			}
			break;

		case CHECK_PASSWORD:
			/*Compare between the Recieved password and the Password Stored in the EEPROM*/
			for(uint8 i = 0; i < 5; i++){
    12e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    12e6:	8f 5f       	subi	r24, 0xFF	; 255
    12e8:	8b a7       	std	Y+43, r24	; 0x2b
    12ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    12ec:	85 30       	cpi	r24, 0x05	; 5
    12ee:	08 f4       	brcc	.+2      	; 0x12f2 <main+0x412>
    12f0:	66 cf       	rjmp	.-308    	; 0x11be <main+0x2de>
					flag = 0;
				}
			}

			/* check if matched or not*/
			if(flag){
    12f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    12f4:	88 23       	and	r24, r24
    12f6:	31 f0       	breq	.+12     	; 0x1304 <main+0x424>
				/*Send that the two passwords are matched*/
				UART_sendByte(CORRECT_PASSWORD);
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <UART_sendByte>
				Wrong = 0;
    12fe:	10 92 6a 00 	sts	0x006A, r1
    1302:	3f ce       	rjmp	.-898    	; 0xf82 <main+0xa2>
			}
			else{
				/*PASSWORDS not matched*/
				/*increase the wrong tries counter*/
				Wrong ++;
    1304:	80 91 6a 00 	lds	r24, 0x006A
    1308:	8f 5f       	subi	r24, 0xFF	; 255
    130a:	80 93 6a 00 	sts	0x006A, r24
				/*if the passwords were not matched 3 times in row turn on the buzzer*/
				if(Wrong == 3){
    130e:	80 91 6a 00 	lds	r24, 0x006A
    1312:	83 30       	cpi	r24, 0x03	; 3
    1314:	d1 f4       	brne	.+52     	; 0x134a <main+0x46a>
					/*Send to MC1 that the password was entered wrong 3 times in row */
					UART_sendByte(PASSWORD_WRONG_3_TIMES);
    1316:	87 e0       	ldi	r24, 0x07	; 7
    1318:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <UART_sendByte>
					/*reset the wrong counter*/
					Wrong = 0;
    131c:	10 92 6a 00 	sts	0x006A, r1
					/*Reset the second counter*/
					g_timer1_SecFlag = 0;
    1320:	10 92 6b 00 	sts	0x006B, r1
					/*turn on the buzzer*/
					SET_BIT(PORTC,2);
    1324:	a5 e3       	ldi	r26, 0x35	; 53
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e5 e3       	ldi	r30, 0x35	; 53
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	84 60       	ori	r24, 0x04	; 4
    1330:	8c 93       	st	X, r24
					/*Wait for 10 seconds*/
					while(g_timer1_SecFlag<10){}
    1332:	80 91 6b 00 	lds	r24, 0x006B
    1336:	8a 30       	cpi	r24, 0x0A	; 10
    1338:	e0 f3       	brcs	.-8      	; 0x1332 <main+0x452>
					/*turn off the buzzer*/
					CLEAR_BIT(PORTC,2);
    133a:	a5 e3       	ldi	r26, 0x35	; 53
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e3       	ldi	r30, 0x35	; 53
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	8b 7f       	andi	r24, 0xFB	; 251
    1346:	8c 93       	st	X, r24
    1348:	1c ce       	rjmp	.-968    	; 0xf82 <main+0xa2>
				}
				else{
					/*Send wwrong password to MC1 if passwords not matched and the wrong counter < 3*/
					UART_sendByte(WRONG_PASSWORD);
    134a:	84 e0       	ldi	r24, 0x04	; 4
    134c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <UART_sendByte>
    1350:	18 ce       	rjmp	.-976    	; 0xf82 <main+0xa2>
			}
			break;

		case OPEN_DOOR:
			/*Reset the second counter*/
			g_timer1_SecFlag = 0;
    1352:	10 92 6b 00 	sts	0x006B, r1
			/*Start the motor Clockwise*/
			motor_CW();
    1356:	0e 94 fd 09 	call	0x13fa	; 0x13fa <motor_CW>
			/*Wait for 10 seconds*/
			while(g_timer1_SecFlag<10){}
    135a:	80 91 6b 00 	lds	r24, 0x006B
    135e:	8a 30       	cpi	r24, 0x0A	; 10
    1360:	e0 f3       	brcs	.-8      	; 0x135a <main+0x47a>
			/*Stop the motor*/
			motor_stop();
    1362:	0e 94 27 0a 	call	0x144e	; 0x144e <motor_stop>
			/*Wait for 2 seconds*/
			while(g_timer1_SecFlag<12){}
    1366:	80 91 6b 00 	lds	r24, 0x006B
    136a:	8c 30       	cpi	r24, 0x0C	; 12
    136c:	e0 f3       	brcs	.-8      	; 0x1366 <main+0x486>
			/*Start the motor Anti Clockwise*/
			motor_ACW();
    136e:	0e 94 12 0a 	call	0x1424	; 0x1424 <motor_ACW>
			/*Wait for 10 seconds*/
			while(g_timer1_SecFlag<22){}
    1372:	80 91 6b 00 	lds	r24, 0x006B
    1376:	86 31       	cpi	r24, 0x16	; 22
    1378:	e0 f3       	brcs	.-8      	; 0x1372 <main+0x492>
			/*Stop the motor*/
			motor_stop();
    137a:	0e 94 27 0a 	call	0x144e	; 0x144e <motor_stop>
    137e:	01 ce       	rjmp	.-1022   	; 0xf82 <main+0xa2>

00001380 <Timer1_INT>:
}

/************************************************************************
  	  	  	  	  	  	  	  Functions Definition
 ***********************************************************************/
void Timer1_INT(){
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	/* increment the timer counter every one second*/
	g_timer1_SecFlag++;
    1388:	80 91 6b 00 	lds	r24, 0x006B
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	80 93 6b 00 	sts	0x006B, r24
}
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <motor_init>:
 *      Author: ah132
 */
#include "motor.h"


void motor_init(){
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB,1);
    13a0:	a7 e3       	ldi	r26, 0x37	; 55
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e7 e3       	ldi	r30, 0x37	; 55
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	82 60       	ori	r24, 0x02	; 2
    13ac:	8c 93       	st	X, r24
	SET_BIT(DDRB,2);
    13ae:	a7 e3       	ldi	r26, 0x37	; 55
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e7 e3       	ldi	r30, 0x37	; 55
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	84 60       	ori	r24, 0x04	; 4
    13ba:	8c 93       	st	X, r24
	SET_BIT(DDRB,3);
    13bc:	a7 e3       	ldi	r26, 0x37	; 55
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e7 e3       	ldi	r30, 0x37	; 55
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	88 60       	ori	r24, 0x08	; 8
    13c8:	8c 93       	st	X, r24

	CLEAR_BIT(PORTB,1);
    13ca:	a8 e3       	ldi	r26, 0x38	; 56
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e8 e3       	ldi	r30, 0x38	; 56
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8d 7f       	andi	r24, 0xFD	; 253
    13d6:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,2);
    13d8:	a8 e3       	ldi	r26, 0x38	; 56
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e8 e3       	ldi	r30, 0x38	; 56
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	8b 7f       	andi	r24, 0xFB	; 251
    13e4:	8c 93       	st	X, r24
	SET_BIT(PORTB,3);
    13e6:	a8 e3       	ldi	r26, 0x38	; 56
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e8 e3       	ldi	r30, 0x38	; 56
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	88 60       	ori	r24, 0x08	; 8
    13f2:	8c 93       	st	X, r24
}
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <motor_CW>:

void motor_CW(){
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(PORTB,1);
    1402:	a8 e3       	ldi	r26, 0x38	; 56
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e8 e3       	ldi	r30, 0x38	; 56
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	82 60       	ori	r24, 0x02	; 2
    140e:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,2);
    1410:	a8 e3       	ldi	r26, 0x38	; 56
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e8 e3       	ldi	r30, 0x38	; 56
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8b 7f       	andi	r24, 0xFB	; 251
    141c:	8c 93       	st	X, r24
}
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <motor_ACW>:
void motor_ACW()
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(PORTB,1);
    142c:	a8 e3       	ldi	r26, 0x38	; 56
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e8 e3       	ldi	r30, 0x38	; 56
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8d 7f       	andi	r24, 0xFD	; 253
    1438:	8c 93       	st	X, r24
	SET_BIT(PORTB,2);
    143a:	a8 e3       	ldi	r26, 0x38	; 56
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e8 e3       	ldi	r30, 0x38	; 56
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	84 60       	ori	r24, 0x04	; 4
    1446:	8c 93       	st	X, r24
}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <motor_stop>:
void motor_stop(){
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(PORTB,1);
    1456:	a8 e3       	ldi	r26, 0x38	; 56
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e8 e3       	ldi	r30, 0x38	; 56
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	8d 7f       	andi	r24, 0xFD	; 253
    1462:	8c 93       	st	X, r24
	CLEAR_BIT(PORTB,2);
    1464:	a8 e3       	ldi	r26, 0x38	; 56
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	8b 7f       	andi	r24, 0xFB	; 251
    1470:	8c 93       	st	X, r24
}
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1478:	1f 92       	push	r1
    147a:	0f 92       	push	r0
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	0f 92       	push	r0
    1480:	11 24       	eor	r1, r1
    1482:	2f 93       	push	r18
    1484:	3f 93       	push	r19
    1486:	4f 93       	push	r20
    1488:	5f 93       	push	r21
    148a:	6f 93       	push	r22
    148c:	7f 93       	push	r23
    148e:	8f 93       	push	r24
    1490:	9f 93       	push	r25
    1492:	af 93       	push	r26
    1494:	bf 93       	push	r27
    1496:	ef 93       	push	r30
    1498:	ff 93       	push	r31
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    14a2:	80 91 6c 00 	lds	r24, 0x006C
    14a6:	90 91 6d 00 	lds	r25, 0x006D
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	29 f0       	breq	.+10     	; 0x14b8 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    14ae:	e0 91 6c 00 	lds	r30, 0x006C
    14b2:	f0 91 6d 00 	lds	r31, 0x006D
    14b6:	09 95       	icall
	}
}
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	ff 91       	pop	r31
    14be:	ef 91       	pop	r30
    14c0:	bf 91       	pop	r27
    14c2:	af 91       	pop	r26
    14c4:	9f 91       	pop	r25
    14c6:	8f 91       	pop	r24
    14c8:	7f 91       	pop	r23
    14ca:	6f 91       	pop	r22
    14cc:	5f 91       	pop	r21
    14ce:	4f 91       	pop	r20
    14d0:	3f 91       	pop	r19
    14d2:	2f 91       	pop	r18
    14d4:	0f 90       	pop	r0
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	0f 90       	pop	r0
    14da:	1f 90       	pop	r1
    14dc:	18 95       	reti

000014de <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    14de:	1f 92       	push	r1
    14e0:	0f 92       	push	r0
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	0f 92       	push	r0
    14e6:	11 24       	eor	r1, r1
    14e8:	2f 93       	push	r18
    14ea:	3f 93       	push	r19
    14ec:	4f 93       	push	r20
    14ee:	5f 93       	push	r21
    14f0:	6f 93       	push	r22
    14f2:	7f 93       	push	r23
    14f4:	8f 93       	push	r24
    14f6:	9f 93       	push	r25
    14f8:	af 93       	push	r26
    14fa:	bf 93       	push	r27
    14fc:	ef 93       	push	r30
    14fe:	ff 93       	push	r31
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    1508:	80 91 6c 00 	lds	r24, 0x006C
    150c:	90 91 6d 00 	lds	r25, 0x006D
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	29 f0       	breq	.+10     	; 0x151e <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    1514:	e0 91 6c 00 	lds	r30, 0x006C
    1518:	f0 91 6d 00 	lds	r31, 0x006D
    151c:	09 95       	icall
	}
}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	7f 91       	pop	r23
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	0f 90       	pop	r0
    1540:	1f 90       	pop	r1
    1542:	18 95       	reti

00001544 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    1544:	1f 92       	push	r1
    1546:	0f 92       	push	r0
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	0f 92       	push	r0
    154c:	11 24       	eor	r1, r1
    154e:	2f 93       	push	r18
    1550:	3f 93       	push	r19
    1552:	4f 93       	push	r20
    1554:	5f 93       	push	r21
    1556:	6f 93       	push	r22
    1558:	7f 93       	push	r23
    155a:	8f 93       	push	r24
    155c:	9f 93       	push	r25
    155e:	af 93       	push	r26
    1560:	bf 93       	push	r27
    1562:	ef 93       	push	r30
    1564:	ff 93       	push	r31
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    156e:	80 91 6e 00 	lds	r24, 0x006E
    1572:	90 91 6f 00 	lds	r25, 0x006F
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	29 f0       	breq	.+10     	; 0x1584 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    157a:	e0 91 6e 00 	lds	r30, 0x006E
    157e:	f0 91 6f 00 	lds	r31, 0x006F
    1582:	09 95       	icall
	}
}
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	ff 91       	pop	r31
    158a:	ef 91       	pop	r30
    158c:	bf 91       	pop	r27
    158e:	af 91       	pop	r26
    1590:	9f 91       	pop	r25
    1592:	8f 91       	pop	r24
    1594:	7f 91       	pop	r23
    1596:	6f 91       	pop	r22
    1598:	5f 91       	pop	r21
    159a:	4f 91       	pop	r20
    159c:	3f 91       	pop	r19
    159e:	2f 91       	pop	r18
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	0f 90       	pop	r0
    15a6:	1f 90       	pop	r1
    15a8:	18 95       	reti

000015aa <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    15aa:	1f 92       	push	r1
    15ac:	0f 92       	push	r0
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	0f 92       	push	r0
    15b2:	11 24       	eor	r1, r1
    15b4:	2f 93       	push	r18
    15b6:	3f 93       	push	r19
    15b8:	4f 93       	push	r20
    15ba:	5f 93       	push	r21
    15bc:	6f 93       	push	r22
    15be:	7f 93       	push	r23
    15c0:	8f 93       	push	r24
    15c2:	9f 93       	push	r25
    15c4:	af 93       	push	r26
    15c6:	bf 93       	push	r27
    15c8:	ef 93       	push	r30
    15ca:	ff 93       	push	r31
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    15d4:	80 91 6e 00 	lds	r24, 0x006E
    15d8:	90 91 6f 00 	lds	r25, 0x006F
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	29 f0       	breq	.+10     	; 0x15ea <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    15e0:	e0 91 6e 00 	lds	r30, 0x006E
    15e4:	f0 91 6f 00 	lds	r31, 0x006F
    15e8:	09 95       	icall
	}
}
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	ff 91       	pop	r31
    15f0:	ef 91       	pop	r30
    15f2:	bf 91       	pop	r27
    15f4:	af 91       	pop	r26
    15f6:	9f 91       	pop	r25
    15f8:	8f 91       	pop	r24
    15fa:	7f 91       	pop	r23
    15fc:	6f 91       	pop	r22
    15fe:	5f 91       	pop	r21
    1600:	4f 91       	pop	r20
    1602:	3f 91       	pop	r19
    1604:	2f 91       	pop	r18
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	0f 90       	pop	r0
    160c:	1f 90       	pop	r1
    160e:	18 95       	reti

00001610 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    1610:	1f 92       	push	r1
    1612:	0f 92       	push	r0
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	0f 92       	push	r0
    1618:	11 24       	eor	r1, r1
    161a:	2f 93       	push	r18
    161c:	3f 93       	push	r19
    161e:	4f 93       	push	r20
    1620:	5f 93       	push	r21
    1622:	6f 93       	push	r22
    1624:	7f 93       	push	r23
    1626:	8f 93       	push	r24
    1628:	9f 93       	push	r25
    162a:	af 93       	push	r26
    162c:	bf 93       	push	r27
    162e:	ef 93       	push	r30
    1630:	ff 93       	push	r31
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    163a:	80 91 6e 00 	lds	r24, 0x006E
    163e:	90 91 6f 00 	lds	r25, 0x006F
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	29 f0       	breq	.+10     	; 0x1650 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    1646:	e0 91 6e 00 	lds	r30, 0x006E
    164a:	f0 91 6f 00 	lds	r31, 0x006F
    164e:	09 95       	icall
	}
}
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	ff 91       	pop	r31
    1656:	ef 91       	pop	r30
    1658:	bf 91       	pop	r27
    165a:	af 91       	pop	r26
    165c:	9f 91       	pop	r25
    165e:	8f 91       	pop	r24
    1660:	7f 91       	pop	r23
    1662:	6f 91       	pop	r22
    1664:	5f 91       	pop	r21
    1666:	4f 91       	pop	r20
    1668:	3f 91       	pop	r19
    166a:	2f 91       	pop	r18
    166c:	0f 90       	pop	r0
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	0f 90       	pop	r0
    1672:	1f 90       	pop	r1
    1674:	18 95       	reti

00001676 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    1676:	1f 92       	push	r1
    1678:	0f 92       	push	r0
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	0f 92       	push	r0
    167e:	11 24       	eor	r1, r1
    1680:	2f 93       	push	r18
    1682:	3f 93       	push	r19
    1684:	4f 93       	push	r20
    1686:	5f 93       	push	r21
    1688:	6f 93       	push	r22
    168a:	7f 93       	push	r23
    168c:	8f 93       	push	r24
    168e:	9f 93       	push	r25
    1690:	af 93       	push	r26
    1692:	bf 93       	push	r27
    1694:	ef 93       	push	r30
    1696:	ff 93       	push	r31
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    16a0:	80 91 70 00 	lds	r24, 0x0070
    16a4:	90 91 71 00 	lds	r25, 0x0071
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	29 f0       	breq	.+10     	; 0x16b6 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    16ac:	e0 91 70 00 	lds	r30, 0x0070
    16b0:	f0 91 71 00 	lds	r31, 0x0071
    16b4:	09 95       	icall
	}
}
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	ff 91       	pop	r31
    16bc:	ef 91       	pop	r30
    16be:	bf 91       	pop	r27
    16c0:	af 91       	pop	r26
    16c2:	9f 91       	pop	r25
    16c4:	8f 91       	pop	r24
    16c6:	7f 91       	pop	r23
    16c8:	6f 91       	pop	r22
    16ca:	5f 91       	pop	r21
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	0f 90       	pop	r0
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	0f 90       	pop	r0
    16d8:	1f 90       	pop	r1
    16da:	18 95       	reti

000016dc <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    16dc:	1f 92       	push	r1
    16de:	0f 92       	push	r0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	0f 92       	push	r0
    16e4:	11 24       	eor	r1, r1
    16e6:	2f 93       	push	r18
    16e8:	3f 93       	push	r19
    16ea:	4f 93       	push	r20
    16ec:	5f 93       	push	r21
    16ee:	6f 93       	push	r22
    16f0:	7f 93       	push	r23
    16f2:	8f 93       	push	r24
    16f4:	9f 93       	push	r25
    16f6:	af 93       	push	r26
    16f8:	bf 93       	push	r27
    16fa:	ef 93       	push	r30
    16fc:	ff 93       	push	r31
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    1706:	80 91 70 00 	lds	r24, 0x0070
    170a:	90 91 71 00 	lds	r25, 0x0071
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	29 f0       	breq	.+10     	; 0x171c <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    1712:	e0 91 70 00 	lds	r30, 0x0070
    1716:	f0 91 71 00 	lds	r31, 0x0071
    171a:	09 95       	icall
	}
}
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	ff 91       	pop	r31
    1722:	ef 91       	pop	r30
    1724:	bf 91       	pop	r27
    1726:	af 91       	pop	r26
    1728:	9f 91       	pop	r25
    172a:	8f 91       	pop	r24
    172c:	7f 91       	pop	r23
    172e:	6f 91       	pop	r22
    1730:	5f 91       	pop	r21
    1732:	4f 91       	pop	r20
    1734:	3f 91       	pop	r19
    1736:	2f 91       	pop	r18
    1738:	0f 90       	pop	r0
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	0f 90       	pop	r0
    173e:	1f 90       	pop	r1
    1740:	18 95       	reti

00001742 <TIMER0_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER0_init(const Timer_ConfigType * Config_Ptr)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	00 d0       	rcall	.+0      	; 0x1748 <TIMER0_init+0x6>
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
	/*TCCR0 &= 0x00;
	TCNT0 &= 0x00;
	OCR0  &= 0x00;
*/
	/* non PWM Mode */
	TCCR0 = (1<<FOC0);
    1750:	e3 e5       	ldi	r30, 0x53	; 83
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 e8       	ldi	r24, 0x80	; 128
    1756:	80 83       	st	Z, r24
	/*set initial value */
	TCNT0 = Config_Ptr->initial;
    1758:	a2 e5       	ldi	r26, 0x52	; 82
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e9 81       	ldd	r30, Y+1	; 0x01
    175e:	fa 81       	ldd	r31, Y+2	; 0x02
    1760:	84 81       	ldd	r24, Z+4	; 0x04
    1762:	95 81       	ldd	r25, Z+5	; 0x05
    1764:	8c 93       	st	X, r24
	/*set compare value for compare mode*/
	OCR0 = Config_Ptr->compare_value;
    1766:	ac e5       	ldi	r26, 0x5C	; 92
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e9 81       	ldd	r30, Y+1	; 0x01
    176c:	fa 81       	ldd	r31, Y+2	; 0x02
    176e:	86 81       	ldd	r24, Z+6	; 0x06
    1770:	97 81       	ldd	r25, Z+7	; 0x07
    1772:	8c 93       	st	X, r24


	if((Config_Ptr->OutputPin) == OC0){
    1774:	e9 81       	ldd	r30, Y+1	; 0x01
    1776:	fa 81       	ldd	r31, Y+2	; 0x02
    1778:	83 81       	ldd	r24, Z+3	; 0x03
    177a:	83 30       	cpi	r24, 0x03	; 3
    177c:	39 f4       	brne	.+14     	; 0x178c <TIMER0_init+0x4a>
		// configure the output pin PB3 in compare mode
		DDRB |= (1 << OC0);
    177e:	a7 e3       	ldi	r26, 0x37	; 55
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e7 e3       	ldi	r30, 0x37	; 55
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	88 60       	ori	r24, 0x08	; 8
    178a:	8c 93       	st	X, r24
	}

	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    178c:	e9 81       	ldd	r30, Y+1	; 0x01
    178e:	fa 81       	ldd	r31, Y+2	; 0x02
    1790:	81 81       	ldd	r24, Z+1	; 0x01
    1792:	88 23       	and	r24, r24
    1794:	41 f4       	brne	.+16     	; 0x17a6 <TIMER0_init+0x64>
		/*Enable interrupt for overflow mode*/
		TIMSK |= (1 << TOIE0);
    1796:	a9 e5       	ldi	r26, 0x59	; 89
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e9 e5       	ldi	r30, 0x59	; 89
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	81 60       	ori	r24, 0x01	; 1
    17a2:	8c 93       	st	X, r24
    17a4:	0c c0       	rjmp	.+24     	; 0x17be <TIMER0_init+0x7c>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    17a6:	e9 81       	ldd	r30, Y+1	; 0x01
    17a8:	fa 81       	ldd	r31, Y+2	; 0x02
    17aa:	81 81       	ldd	r24, Z+1	; 0x01
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	39 f4       	brne	.+14     	; 0x17be <TIMER0_init+0x7c>
		/*Enable interrupt for compare mode*/
		TIMSK |= (1 << OCIE0);
    17b0:	a9 e5       	ldi	r26, 0x59	; 89
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e9 e5       	ldi	r30, 0x59	; 89
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	82 60       	ori	r24, 0x02	; 2
    17bc:	8c 93       	st	X, r24
	}

	/*configure the mode of the timer*/
	TCCR0 =  (TCCR0 & ~(0x48) ) | ( ( (Config_Ptr->mode) << WGM00) & 0x48 ) ;
    17be:	a3 e5       	ldi	r26, 0x53	; 83
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e3 e5       	ldi	r30, 0x53	; 83
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	28 2f       	mov	r18, r24
    17ca:	27 7b       	andi	r18, 0xB7	; 183
    17cc:	e9 81       	ldd	r30, Y+1	; 0x01
    17ce:	fa 81       	ldd	r31, Y+2	; 0x02
    17d0:	81 81       	ldd	r24, Z+1	; 0x01
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	00 24       	eor	r0, r0
    17d8:	96 95       	lsr	r25
    17da:	87 95       	ror	r24
    17dc:	07 94       	ror	r0
    17de:	96 95       	lsr	r25
    17e0:	87 95       	ror	r24
    17e2:	07 94       	ror	r0
    17e4:	98 2f       	mov	r25, r24
    17e6:	80 2d       	mov	r24, r0
    17e8:	88 74       	andi	r24, 0x48	; 72
    17ea:	82 2b       	or	r24, r18
    17ec:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR0 = (TCCR0 & 0XCF) | ( ( (Config_Ptr->compare_output) & 0X03) << COM00 );
    17ee:	a3 e5       	ldi	r26, 0x53	; 83
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e3 e5       	ldi	r30, 0x53	; 83
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	28 2f       	mov	r18, r24
    17fa:	2f 7c       	andi	r18, 0xCF	; 207
    17fc:	e9 81       	ldd	r30, Y+1	; 0x01
    17fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	88 2f       	mov	r24, r24
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	83 70       	andi	r24, 0x03	; 3
    1808:	90 70       	andi	r25, 0x00	; 0
    180a:	82 95       	swap	r24
    180c:	92 95       	swap	r25
    180e:	90 7f       	andi	r25, 0xF0	; 240
    1810:	98 27       	eor	r25, r24
    1812:	80 7f       	andi	r24, 0xF0	; 240
    1814:	98 27       	eor	r25, r24
    1816:	82 2b       	or	r24, r18
    1818:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->clock & 0X07);
    181a:	a3 e5       	ldi	r26, 0x53	; 83
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e3 e5       	ldi	r30, 0x53	; 83
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	98 2f       	mov	r25, r24
    1826:	98 7f       	andi	r25, 0xF8	; 248
    1828:	e9 81       	ldd	r30, Y+1	; 0x01
    182a:	fa 81       	ldd	r31, Y+2	; 0x02
    182c:	80 81       	ld	r24, Z
    182e:	87 70       	andi	r24, 0x07	; 7
    1830:	89 2b       	or	r24, r25
    1832:	8c 93       	st	X, r24
}
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <TIMER1_init>:

void TIMER1_init(const Timer_ConfigType * Config_Ptr)
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	00 d0       	rcall	.+0      	; 0x1844 <TIMER1_init+0x6>
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
/*			TCNT1  = 0;
			OCR1A  = 0;
			OCR1B  = 0;
*/
	/*set the initial value*/
	TCNT1 = ( (Config_Ptr -> initial) );
    184c:	ac e4       	ldi	r26, 0x4C	; 76
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e9 81       	ldd	r30, Y+1	; 0x01
    1852:	fa 81       	ldd	r31, Y+2	; 0x02
    1854:	84 81       	ldd	r24, Z+4	; 0x04
    1856:	95 81       	ldd	r25, Z+5	; 0x05
    1858:	11 96       	adiw	r26, 0x01	; 1
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
	/*  Non PWM Mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    185e:	ef e4       	ldi	r30, 0x4F	; 79
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	8c e0       	ldi	r24, 0x0C	; 12
    1864:	80 83       	st	Z, r24
	if((Config_Ptr -> OutputPin) == OC1A){
    1866:	e9 81       	ldd	r30, Y+1	; 0x01
    1868:	fa 81       	ldd	r31, Y+2	; 0x02
    186a:	83 81       	ldd	r24, Z+3	; 0x03
    186c:	85 30       	cpi	r24, 0x05	; 5
    186e:	41 f4       	brne	.+16     	; 0x1880 <TIMER1_init+0x42>
	// configure the output pin PD5 in compare mode
		DDRD |= (1 << OC1A);
    1870:	a1 e3       	ldi	r26, 0x31	; 49
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e1 e3       	ldi	r30, 0x31	; 49
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	80 62       	ori	r24, 0x20	; 32
    187c:	8c 93       	st	X, r24
    187e:	0c c0       	rjmp	.+24     	; 0x1898 <TIMER1_init+0x5a>
	}

	/* Check for OC1B */
	else if ((Config_Ptr -> OutputPin) == OC1B){
    1880:	e9 81       	ldd	r30, Y+1	; 0x01
    1882:	fa 81       	ldd	r31, Y+2	; 0x02
    1884:	83 81       	ldd	r24, Z+3	; 0x03
    1886:	84 30       	cpi	r24, 0x04	; 4
    1888:	39 f4       	brne	.+14     	; 0x1898 <TIMER1_init+0x5a>
		// configure the output pin PD4 in compare mode
		DDRD |= (1 << OC1B);
    188a:	a1 e3       	ldi	r26, 0x31	; 49
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e1 e3       	ldi	r30, 0x31	; 49
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	80 61       	ori	r24, 0x10	; 16
    1896:	8c 93       	st	X, r24
	}
	if( (Config_Ptr->mode ) == NORMAL_MODE)
    1898:	e9 81       	ldd	r30, Y+1	; 0x01
    189a:	fa 81       	ldd	r31, Y+2	; 0x02
    189c:	81 81       	ldd	r24, Z+1	; 0x01
    189e:	88 23       	and	r24, r24
    18a0:	41 f4       	brne	.+16     	; 0x18b2 <TIMER1_init+0x74>
	{
		/* Enable interrupt FOR normal mode */
		TIMSK |= (1 << TOIE1);
    18a2:	a9 e5       	ldi	r26, 0x59	; 89
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e9 e5       	ldi	r30, 0x59	; 89
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	84 60       	ori	r24, 0x04	; 4
    18ae:	8c 93       	st	X, r24
    18b0:	56 c0       	rjmp	.+172    	; 0x195e <TIMER1_init+0x120>
	}
	else if ((Config_Ptr->mode) == CTC_MODE_CHANNEL_A)
    18b2:	e9 81       	ldd	r30, Y+1	; 0x01
    18b4:	fa 81       	ldd	r31, Y+2	; 0x02
    18b6:	81 81       	ldd	r24, Z+1	; 0x01
    18b8:	82 30       	cpi	r24, 0x02	; 2
    18ba:	41 f5       	brne	.+80     	; 0x190c <TIMER1_init+0xce>
	{
		/*set compare value for compare mode channel A*/
		OCR1A  = ((Config_Ptr->compare_value));
    18bc:	aa e4       	ldi	r26, 0x4A	; 74
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e9 81       	ldd	r30, Y+1	; 0x01
    18c2:	fa 81       	ldd	r31, Y+2	; 0x02
    18c4:	86 81       	ldd	r24, Z+6	; 0x06
    18c6:	97 81       	ldd	r25, Z+7	; 0x07
    18c8:	11 96       	adiw	r26, 0x01	; 1
    18ca:	9c 93       	st	X, r25
    18cc:	8e 93       	st	-X, r24
		/* Enable interrupt for compare mode channel A */
		TIMSK |= (1 << OCIE1A);
    18ce:	a9 e5       	ldi	r26, 0x59	; 89
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e9 e5       	ldi	r30, 0x59	; 89
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	80 61       	ori	r24, 0x10	; 16
    18da:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel A */
		TCCR1A = ( (TCCR1A & 0x3F) | ( (Config_Ptr -> compare_output) << COM1A0) );
    18dc:	af e4       	ldi	r26, 0x4F	; 79
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	ef e4       	ldi	r30, 0x4F	; 79
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	2f 73       	andi	r18, 0x3F	; 63
    18ea:	e9 81       	ldd	r30, Y+1	; 0x01
    18ec:	fa 81       	ldd	r31, Y+2	; 0x02
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	00 24       	eor	r0, r0
    18f6:	96 95       	lsr	r25
    18f8:	87 95       	ror	r24
    18fa:	07 94       	ror	r0
    18fc:	96 95       	lsr	r25
    18fe:	87 95       	ror	r24
    1900:	07 94       	ror	r0
    1902:	98 2f       	mov	r25, r24
    1904:	80 2d       	mov	r24, r0
    1906:	82 2b       	or	r24, r18
    1908:	8c 93       	st	X, r24
    190a:	29 c0       	rjmp	.+82     	; 0x195e <TIMER1_init+0x120>
	}

	else if ( (Config_Ptr->mode) == CTC_MODE_CHANNEL_B){
    190c:	e9 81       	ldd	r30, Y+1	; 0x01
    190e:	fa 81       	ldd	r31, Y+2	; 0x02
    1910:	81 81       	ldd	r24, Z+1	; 0x01
    1912:	83 30       	cpi	r24, 0x03	; 3
    1914:	21 f5       	brne	.+72     	; 0x195e <TIMER1_init+0x120>
		/*set compare value for compare mode channel B*/
		OCR1B  = ((Config_Ptr -> compare_value));
    1916:	a8 e4       	ldi	r26, 0x48	; 72
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e9 81       	ldd	r30, Y+1	; 0x01
    191c:	fa 81       	ldd	r31, Y+2	; 0x02
    191e:	86 81       	ldd	r24, Z+6	; 0x06
    1920:	97 81       	ldd	r25, Z+7	; 0x07
    1922:	11 96       	adiw	r26, 0x01	; 1
    1924:	9c 93       	st	X, r25
    1926:	8e 93       	st	-X, r24

		/* Enable interrupt for compare mode channel B */
		TIMSK |= (1 << OCIE1B);
    1928:	a9 e5       	ldi	r26, 0x59	; 89
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e9 e5       	ldi	r30, 0x59	; 89
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	88 60       	ori	r24, 0x08	; 8
    1934:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel B */
		TCCR1A = ( (TCCR1A & 0xCF) | ( (Config_Ptr -> compare_output) << COM1B0) );
    1936:	af e4       	ldi	r26, 0x4F	; 79
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	ef e4       	ldi	r30, 0x4F	; 79
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	28 2f       	mov	r18, r24
    1942:	2f 7c       	andi	r18, 0xCF	; 207
    1944:	e9 81       	ldd	r30, Y+1	; 0x01
    1946:	fa 81       	ldd	r31, Y+2	; 0x02
    1948:	82 81       	ldd	r24, Z+2	; 0x02
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	82 95       	swap	r24
    1950:	92 95       	swap	r25
    1952:	90 7f       	andi	r25, 0xF0	; 240
    1954:	98 27       	eor	r25, r24
    1956:	80 7f       	andi	r24, 0xF0	; 240
    1958:	98 27       	eor	r25, r24
    195a:	82 2b       	or	r24, r18
    195c:	8c 93       	st	X, r24

	}

	/*configure the mode of the timer*/
	TCCR1B = ( ( TCCR1B & 0xE7 ) |  ( ( (Config_Ptr -> mode) >> 1) << WGM12)  );
    195e:	ae e4       	ldi	r26, 0x4E	; 78
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	ee e4       	ldi	r30, 0x4E	; 78
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	28 2f       	mov	r18, r24
    196a:	27 7e       	andi	r18, 0xE7	; 231
    196c:	e9 81       	ldd	r30, Y+1	; 0x01
    196e:	fa 81       	ldd	r31, Y+2	; 0x02
    1970:	81 81       	ldd	r24, Z+1	; 0x01
    1972:	86 95       	lsr	r24
    1974:	88 2f       	mov	r24, r24
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	88 0f       	add	r24, r24
    197a:	99 1f       	adc	r25, r25
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	82 2b       	or	r24, r18
    1986:	8c 93       	st	X, r24
		/* choose the timer clock (F_CPU / prescaler)*/
	TCCR1B = ( ( TCCR1B & 0xF8 ) | (Config_Ptr -> clock) );
    1988:	ae e4       	ldi	r26, 0x4E	; 78
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ee e4       	ldi	r30, 0x4E	; 78
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	98 2f       	mov	r25, r24
    1994:	98 7f       	andi	r25, 0xF8	; 248
    1996:	e9 81       	ldd	r30, Y+1	; 0x01
    1998:	fa 81       	ldd	r31, Y+2	; 0x02
    199a:	80 81       	ld	r24, Z
    199c:	89 2b       	or	r24, r25
    199e:	8c 93       	st	X, r24
}
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <TIMER2_init>:

void TIMER2_init(const Timer_ConfigType * Config_Ptr)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <TIMER2_init+0x6>
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	89 83       	std	Y+1, r24	; 0x01
	/* Clear Registers before do anything */
/*	TCCR2 &= 0x00;
	TCNT2 &= 0x00;
*/
	/*set the initail value of the timer*/
	TCNT2 = Config_Ptr->initial;
    19b8:	a4 e4       	ldi	r26, 0x44	; 68
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e9 81       	ldd	r30, Y+1	; 0x01
    19be:	fa 81       	ldd	r31, Y+2	; 0x02
    19c0:	84 81       	ldd	r24, Z+4	; 0x04
    19c2:	95 81       	ldd	r25, Z+5	; 0x05
    19c4:	8c 93       	st	X, r24
	/*set the compare value of the compare mode timer*/
	OCR2 = Config_Ptr->compare_value;
    19c6:	a3 e4       	ldi	r26, 0x43	; 67
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e9 81       	ldd	r30, Y+1	; 0x01
    19cc:	fa 81       	ldd	r31, Y+2	; 0x02
    19ce:	86 81       	ldd	r24, Z+6	; 0x06
    19d0:	97 81       	ldd	r25, Z+7	; 0x07
    19d2:	8c 93       	st	X, r24
	/*non PWM mode*/
	TCCR2 = (1<<FOC2);
    19d4:	e5 e4       	ldi	r30, 0x45	; 69
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 e8       	ldi	r24, 0x80	; 128
    19da:	80 83       	st	Z, r24

	/* Check which timer mode is chosen */
	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    19dc:	e9 81       	ldd	r30, Y+1	; 0x01
    19de:	fa 81       	ldd	r31, Y+2	; 0x02
    19e0:	81 81       	ldd	r24, Z+1	; 0x01
    19e2:	88 23       	and	r24, r24
    19e4:	41 f4       	brne	.+16     	; 0x19f6 <TIMER2_init+0x4c>
	/*	Enable interrupt for normal mode */
		TIMSK |= (1 << TOIE2);
    19e6:	a9 e5       	ldi	r26, 0x59	; 89
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e9 e5       	ldi	r30, 0x59	; 89
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	80 64       	ori	r24, 0x40	; 64
    19f2:	8c 93       	st	X, r24
    19f4:	0c c0       	rjmp	.+24     	; 0x1a0e <TIMER2_init+0x64>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    19f6:	e9 81       	ldd	r30, Y+1	; 0x01
    19f8:	fa 81       	ldd	r31, Y+2	; 0x02
    19fa:	81 81       	ldd	r24, Z+1	; 0x01
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	39 f4       	brne	.+14     	; 0x1a0e <TIMER2_init+0x64>

		/*	 Enable interrupt for compare mode */
		TIMSK |= (1 << OCIE2);
    1a00:	a9 e5       	ldi	r26, 0x59	; 89
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e9 e5       	ldi	r30, 0x59	; 89
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	80 68       	ori	r24, 0x80	; 128
    1a0c:	8c 93       	st	X, r24
	}
	/*configure the mode of the timer*/
	TCCR2 = (TCCR2 & 0XB7) | ((Config_Ptr->mode & 0X48)<< WGM20);
    1a0e:	a5 e4       	ldi	r26, 0x45	; 69
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e5 e4       	ldi	r30, 0x45	; 69
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	28 2f       	mov	r18, r24
    1a1a:	27 7b       	andi	r18, 0xB7	; 183
    1a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a20:	81 81       	ldd	r24, Z+1	; 0x01
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	88 74       	andi	r24, 0x48	; 72
    1a28:	90 70       	andi	r25, 0x00	; 0
    1a2a:	00 24       	eor	r0, r0
    1a2c:	96 95       	lsr	r25
    1a2e:	87 95       	ror	r24
    1a30:	07 94       	ror	r0
    1a32:	96 95       	lsr	r25
    1a34:	87 95       	ror	r24
    1a36:	07 94       	ror	r0
    1a38:	98 2f       	mov	r25, r24
    1a3a:	80 2d       	mov	r24, r0
    1a3c:	82 2b       	or	r24, r18
    1a3e:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR2 = (TCCR2 & 0XCF) | ((Config_Ptr->compare_output & 0X03)<<COM20);
    1a40:	a5 e4       	ldi	r26, 0x45	; 69
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e5 e4       	ldi	r30, 0x45	; 69
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	2f 7c       	andi	r18, 0xCF	; 207
    1a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a50:	fa 81       	ldd	r31, Y+2	; 0x02
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	88 2f       	mov	r24, r24
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	83 70       	andi	r24, 0x03	; 3
    1a5a:	90 70       	andi	r25, 0x00	; 0
    1a5c:	82 95       	swap	r24
    1a5e:	92 95       	swap	r25
    1a60:	90 7f       	andi	r25, 0xF0	; 240
    1a62:	98 27       	eor	r25, r24
    1a64:	80 7f       	andi	r24, 0xF0	; 240
    1a66:	98 27       	eor	r25, r24
    1a68:	82 2b       	or	r24, r18
    1a6a:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->clock & 0X07);
    1a6c:	a5 e4       	ldi	r26, 0x45	; 69
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	e5 e4       	ldi	r30, 0x45	; 69
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	98 2f       	mov	r25, r24
    1a78:	98 7f       	andi	r25, 0xF8	; 248
    1a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7e:	80 81       	ld	r24, Z
    1a80:	87 70       	andi	r24, 0x07	; 7
    1a82:	89 2b       	or	r24, r25
    1a84:	8c 93       	st	X, r24
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <Timer0_Stop>:

void Timer0_Stop()
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000; // stop the clock
    1a98:	a3 e5       	ldi	r26, 0x53	; 83
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e3 e5       	ldi	r30, 0x53	; 83
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	88 7f       	andi	r24, 0xF8	; 248
    1aa4:	8c 93       	st	X, r24
}
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <Timer1_Stop>:

void Timer1_Stop(){
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000; // stop the clock
    1ab4:	ae e4       	ldi	r26, 0x4E	; 78
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	ee e4       	ldi	r30, 0x4E	; 78
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	88 7f       	andi	r24, 0xF8	; 248
    1ac0:	8c 93       	st	X, r24
}
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <Timer2_Stop>:

void Timer2_Stop(){
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0b11111000; // stop the clock
    1ad0:	a5 e4       	ldi	r26, 0x45	; 69
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e5 e4       	ldi	r30, 0x45	; 69
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	88 7f       	andi	r24, 0xF8	; 248
    1adc:	8c 93       	st	X, r24
}
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <Timer0_setCallBack>:



void Timer0_setCallBack(void(*a_ptr)(void))
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <Timer0_setCallBack+0x6>
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	9a 83       	std	Y+2, r25	; 0x02
    1af0:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer0_callBackPtr = a_ptr;
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	90 93 6d 00 	sts	0x006D, r25
    1afa:	80 93 6c 00 	sts	0x006C, r24
}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <Timer1_setCallBack+0x6>
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callBackPtr = a_ptr;
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1a:	90 93 6f 00 	sts	0x006F, r25
    1b1e:	80 93 6e 00 	sts	0x006E, r24
}
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <Timer2_setCallBack+0x6>
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer2_callBackPtr = a_ptr;
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3e:	90 93 71 00 	sts	0x0071, r25
    1b42:	80 93 70 00 	sts	0x0070, r24
}
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <__vector_11>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(USART_RXC_vect)
{
    1b50:	1f 92       	push	r1
    1b52:	0f 92       	push	r0
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	0f 92       	push	r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	2f 93       	push	r18
    1b5c:	3f 93       	push	r19
    1b5e:	4f 93       	push	r20
    1b60:	5f 93       	push	r21
    1b62:	6f 93       	push	r22
    1b64:	7f 93       	push	r23
    1b66:	8f 93       	push	r24
    1b68:	9f 93       	push	r25
    1b6a:	af 93       	push	r26
    1b6c:	bf 93       	push	r27
    1b6e:	ef 93       	push	r30
    1b70:	ff 93       	push	r31
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrUartRx != NULL_PTR){
    1b7a:	80 91 72 00 	lds	r24, 0x0072
    1b7e:	90 91 73 00 	lds	r25, 0x0073
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	29 f0       	breq	.+10     	; 0x1b90 <__vector_11+0x40>
		 /* Call the Call Back function for UART Rx Interrupt */
		(*g_callBackPtrUartRx)();
    1b86:	e0 91 72 00 	lds	r30, 0x0072
    1b8a:	f0 91 73 00 	lds	r31, 0x0073
    1b8e:	09 95       	icall
	}
}
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	ff 91       	pop	r31
    1b96:	ef 91       	pop	r30
    1b98:	bf 91       	pop	r27
    1b9a:	af 91       	pop	r26
    1b9c:	9f 91       	pop	r25
    1b9e:	8f 91       	pop	r24
    1ba0:	7f 91       	pop	r23
    1ba2:	6f 91       	pop	r22
    1ba4:	5f 91       	pop	r21
    1ba6:	4f 91       	pop	r20
    1ba8:	3f 91       	pop	r19
    1baa:	2f 91       	pop	r18
    1bac:	0f 90       	pop	r0
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	0f 90       	pop	r0
    1bb2:	1f 90       	pop	r1
    1bb4:	18 95       	reti

00001bb6 <__vector_13>:

ISR(USART_TXC_vect)
{
    1bb6:	1f 92       	push	r1
    1bb8:	0f 92       	push	r0
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	0f 92       	push	r0
    1bbe:	11 24       	eor	r1, r1
    1bc0:	2f 93       	push	r18
    1bc2:	3f 93       	push	r19
    1bc4:	4f 93       	push	r20
    1bc6:	5f 93       	push	r21
    1bc8:	6f 93       	push	r22
    1bca:	7f 93       	push	r23
    1bcc:	8f 93       	push	r24
    1bce:	9f 93       	push	r25
    1bd0:	af 93       	push	r26
    1bd2:	bf 93       	push	r27
    1bd4:	ef 93       	push	r30
    1bd6:	ff 93       	push	r31
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrUartRx != NULL_PTR){
    1be0:	80 91 72 00 	lds	r24, 0x0072
    1be4:	90 91 73 00 	lds	r25, 0x0073
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	29 f0       	breq	.+10     	; 0x1bf6 <__vector_13+0x40>

		 /* Call the Call Back function for UART Tx Interrupt */
		(*g_callBackPtrUartTx)();
    1bec:	e0 91 74 00 	lds	r30, 0x0074
    1bf0:	f0 91 75 00 	lds	r31, 0x0075
    1bf4:	09 95       	icall
	}
}
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	ff 91       	pop	r31
    1bfc:	ef 91       	pop	r30
    1bfe:	bf 91       	pop	r27
    1c00:	af 91       	pop	r26
    1c02:	9f 91       	pop	r25
    1c04:	8f 91       	pop	r24
    1c06:	7f 91       	pop	r23
    1c08:	6f 91       	pop	r22
    1c0a:	5f 91       	pop	r21
    1c0c:	4f 91       	pop	r20
    1c0e:	3f 91       	pop	r19
    1c10:	2f 91       	pop	r18
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	0f 90       	pop	r0
    1c18:	1f 90       	pop	r1
    1c1a:	18 95       	reti

00001c1c <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_ConfigType* config_Ptr)
{
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <UART_init+0xa>
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	9a 83       	std	Y+2, r25	; 0x02
    1c2c:	89 83       	std	Y+1, r24	; 0x01
	UBRRH &= 0x00;
	UBRRL &= 0x00;
*/

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    1c2e:	eb e2       	ldi	r30, 0x2B	; 43
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	80 83       	st	Z, r24

	/* Enable UART Tx, Rx */
	UCSRB = (1 << RXEN) | (1 << TXEN);
    1c36:	ea e2       	ldi	r30, 0x2A	; 42
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	88 e1       	ldi	r24, 0x18	; 24
    1c3c:	80 83       	st	Z, r24

	/* Chose the interrupt mode*/
	UCSRB = ( (UCSRB & 0x3F) | ( (config_Ptr -> InterruptMode) << TXCIE) );
    1c3e:	aa e2       	ldi	r26, 0x2A	; 42
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	ea e2       	ldi	r30, 0x2A	; 42
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	28 2f       	mov	r18, r24
    1c4a:	2f 73       	andi	r18, 0x3F	; 63
    1c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c50:	80 81       	ld	r24, Z
    1c52:	88 2f       	mov	r24, r24
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	00 24       	eor	r0, r0
    1c58:	96 95       	lsr	r25
    1c5a:	87 95       	ror	r24
    1c5c:	07 94       	ror	r0
    1c5e:	96 95       	lsr	r25
    1c60:	87 95       	ror	r24
    1c62:	07 94       	ror	r0
    1c64:	98 2f       	mov	r25, r24
    1c66:	80 2d       	mov	r24, r0
    1c68:	82 2b       	or	r24, r18
    1c6a:	8c 93       	st	X, r24

	/*
	 * Enable UCSRC Register
	 * Choose Asyncronous Mode
	*/
	UCSRC = (1 << URSEL);
    1c6c:	e0 e4       	ldi	r30, 0x40	; 64
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 e8       	ldi	r24, 0x80	; 128
    1c72:	80 83       	st	Z, r24

	/* Choose Parity Mode*/
	UCSRC = ( (UCSRC & 0xCF) | ( (config_Ptr -> ParityMode) << UPM0) );
    1c74:	a0 e4       	ldi	r26, 0x40	; 64
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e0 e4       	ldi	r30, 0x40	; 64
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	28 2f       	mov	r18, r24
    1c80:	2f 7c       	andi	r18, 0xCF	; 207
    1c82:	e9 81       	ldd	r30, Y+1	; 0x01
    1c84:	fa 81       	ldd	r31, Y+2	; 0x02
    1c86:	82 81       	ldd	r24, Z+2	; 0x02
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	82 95       	swap	r24
    1c8e:	92 95       	swap	r25
    1c90:	90 7f       	andi	r25, 0xF0	; 240
    1c92:	98 27       	eor	r25, r24
    1c94:	80 7f       	andi	r24, 0xF0	; 240
    1c96:	98 27       	eor	r25, r24
    1c98:	82 2b       	or	r24, r18
    1c9a:	8c 93       	st	X, r24

	/* Choose number of stop bits number (1 or 2) */
	UCSRC = ( (UCSRC & 0xF7) | ( (config_Ptr -> StopBit) << USBS) );
    1c9c:	a0 e4       	ldi	r26, 0x40	; 64
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e0 e4       	ldi	r30, 0x40	; 64
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	27 7f       	andi	r18, 0xF7	; 247
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	81 81       	ldd	r24, Z+1	; 0x01
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	82 2b       	or	r24, r18
    1cc2:	8c 93       	st	X, r24

	/* Choose 8 bit mode */
	UCSRC = ( (UCSRC & 0xF9) | (EIGHT_BIT_CHAR_SIZE << UCSZ0) );
    1cc4:	a0 e4       	ldi	r26, 0x40	; 64
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e0 e4       	ldi	r30, 0x40	; 64
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	86 60       	ori	r24, 0x06	; 6
    1cd0:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ( ( ( (F_CPU / ( (config_Ptr -> BaudRate)* 8UL) ) ) - 1) >> 8 );
    1cd2:	00 e4       	ldi	r16, 0x40	; 64
    1cd4:	10 e0       	ldi	r17, 0x00	; 0
    1cd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cda:	83 81       	ldd	r24, Z+3	; 0x03
    1cdc:	94 81       	ldd	r25, Z+4	; 0x04
    1cde:	a5 81       	ldd	r26, Z+5	; 0x05
    1ce0:	b6 81       	ldd	r27, Z+6	; 0x06
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	aa 1f       	adc	r26, r26
    1ce8:	bb 1f       	adc	r27, r27
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	aa 1f       	adc	r26, r26
    1cf0:	bb 1f       	adc	r27, r27
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	aa 1f       	adc	r26, r26
    1cf8:	bb 1f       	adc	r27, r27
    1cfa:	9c 01       	movw	r18, r24
    1cfc:	ad 01       	movw	r20, r26
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	92 e1       	ldi	r25, 0x12	; 18
    1d02:	aa e7       	ldi	r26, 0x7A	; 122
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    1d0e:	da 01       	movw	r26, r20
    1d10:	c9 01       	movw	r24, r18
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	a1 09       	sbc	r26, r1
    1d16:	b1 09       	sbc	r27, r1
    1d18:	89 2f       	mov	r24, r25
    1d1a:	9a 2f       	mov	r25, r26
    1d1c:	ab 2f       	mov	r26, r27
    1d1e:	bb 27       	eor	r27, r27
    1d20:	f8 01       	movw	r30, r16
    1d22:	80 83       	st	Z, r24
	UBRRL = ( ( (F_CPU / ( (config_Ptr -> BaudRate)* 8UL) ) ) - 1);
    1d24:	09 e2       	ldi	r16, 0x29	; 41
    1d26:	10 e0       	ldi	r17, 0x00	; 0
    1d28:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2c:	83 81       	ldd	r24, Z+3	; 0x03
    1d2e:	94 81       	ldd	r25, Z+4	; 0x04
    1d30:	a5 81       	ldd	r26, Z+5	; 0x05
    1d32:	b6 81       	ldd	r27, Z+6	; 0x06
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	aa 1f       	adc	r26, r26
    1d3a:	bb 1f       	adc	r27, r27
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	aa 1f       	adc	r26, r26
    1d42:	bb 1f       	adc	r27, r27
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	aa 1f       	adc	r26, r26
    1d4a:	bb 1f       	adc	r27, r27
    1d4c:	9c 01       	movw	r18, r24
    1d4e:	ad 01       	movw	r20, r26
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	92 e1       	ldi	r25, 0x12	; 18
    1d54:	aa e7       	ldi	r26, 0x7A	; 122
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    1d60:	da 01       	movw	r26, r20
    1d62:	c9 01       	movw	r24, r18
    1d64:	81 50       	subi	r24, 0x01	; 1
    1d66:	f8 01       	movw	r30, r16
    1d68:	80 83       	st	Z, r24
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	08 95       	ret

00001d78 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	0f 92       	push	r0
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1d84:	eb e2       	ldi	r30, 0x2B	; 43
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	80 72       	andi	r24, 0x20	; 32
    1d90:	90 70       	andi	r25, 0x00	; 0
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	b9 f3       	breq	.-18     	; 0x1d84 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    1d96:	ec e2       	ldi	r30, 0x2C	; 44
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1d9e:	0f 90       	pop	r0
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1dae:	eb e2       	ldi	r30, 0x2B	; 43
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	88 23       	and	r24, r24
    1db6:	dc f7       	brge	.-10     	; 0x1dae <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    1db8:	ec e2       	ldi	r30, 0x2C	; 44
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
}
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <UART_sendString+0x6>
    1dca:	0f 92       	push	r0
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	9b 83       	std	Y+3, r25	; 0x03
    1dd2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1dd4:	19 82       	std	Y+1, r1	; 0x01
    1dd6:	0e c0       	rjmp	.+28     	; 0x1df4 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	fc 01       	movw	r30, r24
    1de4:	e2 0f       	add	r30, r18
    1de6:	f3 1f       	adc	r31, r19
    1de8:	80 81       	ld	r24, Z
    1dea:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <UART_sendByte>
		i++;
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	8f 5f       	subi	r24, 0xFF	; 255
    1df2:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfe:	fc 01       	movw	r30, r24
    1e00:	e2 0f       	add	r30, r18
    1e02:	f3 1f       	adc	r31, r19
    1e04:	80 81       	ld	r24, Z
    1e06:	88 23       	and	r24, r24
    1e08:	39 f7       	brne	.-50     	; 0x1dd8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	df 93       	push	r29
    1e1c:	cf 93       	push	r28
    1e1e:	00 d0       	rcall	.+0      	; 0x1e20 <UART_receiveString+0xa>
    1e20:	0f 92       	push	r0
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	9b 83       	std	Y+3, r25	; 0x03
    1e28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e2a:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	9b 81       	ldd	r25, Y+3	; 0x03
    1e36:	8c 01       	movw	r16, r24
    1e38:	02 0f       	add	r16, r18
    1e3a:	13 1f       	adc	r17, r19
    1e3c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <UART_recieveByte>
    1e40:	f8 01       	movw	r30, r16
    1e42:	80 83       	st	Z, r24
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	8f 5f       	subi	r24, 0xFF	; 255
    1e4a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	9b 81       	ldd	r25, Y+3	; 0x03
    1e56:	8c 01       	movw	r16, r24
    1e58:	02 0f       	add	r16, r18
    1e5a:	13 1f       	adc	r17, r19
    1e5c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <UART_recieveByte>
    1e60:	f8 01       	movw	r30, r16
    1e62:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6e:	fc 01       	movw	r30, r24
    1e70:	e2 0f       	add	r30, r18
    1e72:	f3 1f       	adc	r31, r19
    1e74:	80 81       	ld	r24, Z
    1e76:	83 32       	cpi	r24, 0x23	; 35
    1e78:	31 f7       	brne	.-52     	; 0x1e46 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	9b 81       	ldd	r25, Y+3	; 0x03
    1e84:	fc 01       	movw	r30, r24
    1e86:	e2 0f       	add	r30, r18
    1e88:	f3 1f       	adc	r31, r19
    1e8a:	10 82       	st	Z, r1
}
    1e8c:	0f 90       	pop	r0
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	08 95       	ret

00001e9c <UART_setCallBackTx>:

void UART_setCallBackTx(void (*f_ptr)(void)){
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <UART_setCallBackTx+0x6>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrUartTx = f_ptr;
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	90 93 75 00 	sts	0x0075, r25
    1eb2:	80 93 74 00 	sts	0x0074, r24
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <UART_setCallBackRx>:

void UART_setCallBackRx(void (*f_ptr)(void)){
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <UART_setCallBackRx+0x6>
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrUartRx = f_ptr;
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed2:	90 93 73 00 	sts	0x0073, r25
    1ed6:	80 93 72 00 	sts	0x0072, r24
}
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	08 95       	ret

00001ee4 <__udivmodsi4>:
    1ee4:	a1 e2       	ldi	r26, 0x21	; 33
    1ee6:	1a 2e       	mov	r1, r26
    1ee8:	aa 1b       	sub	r26, r26
    1eea:	bb 1b       	sub	r27, r27
    1eec:	fd 01       	movw	r30, r26
    1eee:	0d c0       	rjmp	.+26     	; 0x1f0a <__udivmodsi4_ep>

00001ef0 <__udivmodsi4_loop>:
    1ef0:	aa 1f       	adc	r26, r26
    1ef2:	bb 1f       	adc	r27, r27
    1ef4:	ee 1f       	adc	r30, r30
    1ef6:	ff 1f       	adc	r31, r31
    1ef8:	a2 17       	cp	r26, r18
    1efa:	b3 07       	cpc	r27, r19
    1efc:	e4 07       	cpc	r30, r20
    1efe:	f5 07       	cpc	r31, r21
    1f00:	20 f0       	brcs	.+8      	; 0x1f0a <__udivmodsi4_ep>
    1f02:	a2 1b       	sub	r26, r18
    1f04:	b3 0b       	sbc	r27, r19
    1f06:	e4 0b       	sbc	r30, r20
    1f08:	f5 0b       	sbc	r31, r21

00001f0a <__udivmodsi4_ep>:
    1f0a:	66 1f       	adc	r22, r22
    1f0c:	77 1f       	adc	r23, r23
    1f0e:	88 1f       	adc	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	1a 94       	dec	r1
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <__udivmodsi4_loop>
    1f16:	60 95       	com	r22
    1f18:	70 95       	com	r23
    1f1a:	80 95       	com	r24
    1f1c:	90 95       	com	r25
    1f1e:	9b 01       	movw	r18, r22
    1f20:	ac 01       	movw	r20, r24
    1f22:	bd 01       	movw	r22, r26
    1f24:	cf 01       	movw	r24, r30
    1f26:	08 95       	ret

00001f28 <__prologue_saves__>:
    1f28:	2f 92       	push	r2
    1f2a:	3f 92       	push	r3
    1f2c:	4f 92       	push	r4
    1f2e:	5f 92       	push	r5
    1f30:	6f 92       	push	r6
    1f32:	7f 92       	push	r7
    1f34:	8f 92       	push	r8
    1f36:	9f 92       	push	r9
    1f38:	af 92       	push	r10
    1f3a:	bf 92       	push	r11
    1f3c:	cf 92       	push	r12
    1f3e:	df 92       	push	r13
    1f40:	ef 92       	push	r14
    1f42:	ff 92       	push	r15
    1f44:	0f 93       	push	r16
    1f46:	1f 93       	push	r17
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	ca 1b       	sub	r28, r26
    1f52:	db 0b       	sbc	r29, r27
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	09 94       	ijmp

00001f60 <__epilogue_restores__>:
    1f60:	2a 88       	ldd	r2, Y+18	; 0x12
    1f62:	39 88       	ldd	r3, Y+17	; 0x11
    1f64:	48 88       	ldd	r4, Y+16	; 0x10
    1f66:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f68:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f70:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f72:	b9 84       	ldd	r11, Y+9	; 0x09
    1f74:	c8 84       	ldd	r12, Y+8	; 0x08
    1f76:	df 80       	ldd	r13, Y+7	; 0x07
    1f78:	ee 80       	ldd	r14, Y+6	; 0x06
    1f7a:	fd 80       	ldd	r15, Y+5	; 0x05
    1f7c:	0c 81       	ldd	r16, Y+4	; 0x04
    1f7e:	1b 81       	ldd	r17, Y+3	; 0x03
    1f80:	aa 81       	ldd	r26, Y+2	; 0x02
    1f82:	b9 81       	ldd	r27, Y+1	; 0x01
    1f84:	ce 0f       	add	r28, r30
    1f86:	d1 1d       	adc	r29, r1
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	ed 01       	movw	r28, r26
    1f94:	08 95       	ret

00001f96 <_exit>:
    1f96:	f8 94       	cli

00001f98 <__stop_program>:
    1f98:	ff cf       	rjmp	.-2      	; 0x1f98 <__stop_program>
