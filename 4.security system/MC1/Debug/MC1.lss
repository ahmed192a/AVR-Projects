
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  00003c06  00003c9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800144  00800144  00003d7e  2**0
                  ALLOC
  3 .stab         00003300  00000000  00000000  00003d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012b6  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008336  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008476  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000085e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a22f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b11a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c028  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c2b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__vector_3>
      10:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__vector_6>
      1c:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__vector_7>
      20:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__vector_8>
      24:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 99 1b 	jmp	0x3732	; 0x3732 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 35       	cpi	r26, 0x50	; 80
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 0b 	call	0x16ca	; 0x16ca <main>
      8a:	0c 94 01 1e 	jmp	0x3c02	; 0x3c02 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e3       	ldi	r26, 0x3C	; 60
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8c e3       	ldi	r24, 0x3C	; 60
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <KeyPad_getPressedKey+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     b50:	1a 82       	std	Y+2, r1	; 0x02
     b52:	4c c0       	rjmp	.+152    	; 0xbec <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     b54:	ea e3       	ldi	r30, 0x3A	; 58
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <KeyPad_getPressedKey+0x22>
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	2a 95       	dec	r18
     b6a:	e2 f7       	brpl	.-8      	; 0xb64 <KeyPad_getPressedKey+0x1e>
     b6c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8a 81       	ldd	r24, Y+2	; 0x02
     b74:	28 2f       	mov	r18, r24
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 2e       	mov	r0, r18
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <KeyPad_getPressedKey+0x3e>
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	0a 94       	dec	r0
     b86:	e2 f7       	brpl	.-8      	; 0xb80 <KeyPad_getPressedKey+0x3a>
     b88:	80 95       	com	r24
     b8a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	28 c0       	rjmp	.+80     	; 0xbe0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     b90:	e9 e3       	ldi	r30, 0x39	; 57
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	88 2f       	mov	r24, r24
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <KeyPad_getPressedKey+0x62>
     ba4:	55 95       	asr	r21
     ba6:	47 95       	ror	r20
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <KeyPad_getPressedKey+0x5e>
     bac:	ca 01       	movw	r24, r20
     bae:	81 70       	andi	r24, 0x01	; 1
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	00 97       	sbiw	r24, 0x00	; 0
     bb4:	91 f4       	brne	.+36     	; 0xbda <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	98 2f       	mov	r25, r24
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	89 0f       	add	r24, r25
     bca:	8f 5f       	subi	r24, 0xFF	; 255
     bcc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	8f 5f       	subi	r24, 0xFF	; 255
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	a8 f2       	brcs	.-86     	; 0xb90 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	8f 5f       	subi	r24, 0xFF	; 255
     bea:	8a 83       	std	Y+2, r24	; 0x02
     bec:	8a 81       	ldd	r24, Y+2	; 0x02
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <KeyPad_getPressedKey+0xae>
     bf2:	b0 cf       	rjmp	.-160    	; 0xb54 <KeyPad_getPressedKey+0xe>
     bf4:	ad cf       	rjmp	.-166    	; 0xb50 <KeyPad_getPressedKey+0xa>

00000bf6 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <KeyPad_4x4_adjustKeyNumber+0x6>
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <KeyPad_4x4_adjustKeyNumber+0x8>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	3c 83       	std	Y+4, r19	; 0x04
     c0c:	2b 83       	std	Y+3, r18	; 0x03
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	88 30       	cpi	r24, 0x08	; 8
     c14:	91 05       	cpc	r25, r1
     c16:	09 f4       	brne	.+2      	; 0xc1a <KeyPad_4x4_adjustKeyNumber+0x24>
     c18:	70 c0       	rjmp	.+224    	; 0xcfa <KeyPad_4x4_adjustKeyNumber+0x104>
     c1a:	2b 81       	ldd	r18, Y+3	; 0x03
     c1c:	3c 81       	ldd	r19, Y+4	; 0x04
     c1e:	29 30       	cpi	r18, 0x09	; 9
     c20:	31 05       	cpc	r19, r1
     c22:	5c f5       	brge	.+86     	; 0xc7a <KeyPad_4x4_adjustKeyNumber+0x84>
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	84 30       	cpi	r24, 0x04	; 4
     c2a:	91 05       	cpc	r25, r1
     c2c:	09 f4       	brne	.+2      	; 0xc30 <KeyPad_4x4_adjustKeyNumber+0x3a>
     c2e:	59 c0       	rjmp	.+178    	; 0xce2 <KeyPad_4x4_adjustKeyNumber+0xec>
     c30:	2b 81       	ldd	r18, Y+3	; 0x03
     c32:	3c 81       	ldd	r19, Y+4	; 0x04
     c34:	25 30       	cpi	r18, 0x05	; 5
     c36:	31 05       	cpc	r19, r1
     c38:	9c f4       	brge	.+38     	; 0xc60 <KeyPad_4x4_adjustKeyNumber+0x6a>
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	91 05       	cpc	r25, r1
     c42:	09 f4       	brne	.+2      	; 0xc46 <KeyPad_4x4_adjustKeyNumber+0x50>
     c44:	48 c0       	rjmp	.+144    	; 0xcd6 <KeyPad_4x4_adjustKeyNumber+0xe0>
     c46:	2b 81       	ldd	r18, Y+3	; 0x03
     c48:	3c 81       	ldd	r19, Y+4	; 0x04
     c4a:	23 30       	cpi	r18, 0x03	; 3
     c4c:	31 05       	cpc	r19, r1
     c4e:	0c f0       	brlt	.+2      	; 0xc52 <KeyPad_4x4_adjustKeyNumber+0x5c>
     c50:	45 c0       	rjmp	.+138    	; 0xcdc <KeyPad_4x4_adjustKeyNumber+0xe6>
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <KeyPad_4x4_adjustKeyNumber+0x68>
     c5c:	39 c0       	rjmp	.+114    	; 0xcd0 <KeyPad_4x4_adjustKeyNumber+0xda>
     c5e:	67 c0       	rjmp	.+206    	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	3c 81       	ldd	r19, Y+4	; 0x04
     c64:	26 30       	cpi	r18, 0x06	; 6
     c66:	31 05       	cpc	r19, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <KeyPad_4x4_adjustKeyNumber+0x76>
     c6a:	41 c0       	rjmp	.+130    	; 0xcee <KeyPad_4x4_adjustKeyNumber+0xf8>
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	87 30       	cpi	r24, 0x07	; 7
     c72:	91 05       	cpc	r25, r1
     c74:	0c f0       	brlt	.+2      	; 0xc78 <KeyPad_4x4_adjustKeyNumber+0x82>
     c76:	3e c0       	rjmp	.+124    	; 0xcf4 <KeyPad_4x4_adjustKeyNumber+0xfe>
     c78:	37 c0       	rjmp	.+110    	; 0xce8 <KeyPad_4x4_adjustKeyNumber+0xf2>
     c7a:	2b 81       	ldd	r18, Y+3	; 0x03
     c7c:	3c 81       	ldd	r19, Y+4	; 0x04
     c7e:	2c 30       	cpi	r18, 0x0C	; 12
     c80:	31 05       	cpc	r19, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <KeyPad_4x4_adjustKeyNumber+0x90>
     c84:	46 c0       	rjmp	.+140    	; 0xd12 <KeyPad_4x4_adjustKeyNumber+0x11c>
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	8d 30       	cpi	r24, 0x0D	; 13
     c8c:	91 05       	cpc	r25, r1
     c8e:	5c f4       	brge	.+22     	; 0xca6 <KeyPad_4x4_adjustKeyNumber+0xb0>
     c90:	2b 81       	ldd	r18, Y+3	; 0x03
     c92:	3c 81       	ldd	r19, Y+4	; 0x04
     c94:	2a 30       	cpi	r18, 0x0A	; 10
     c96:	31 05       	cpc	r19, r1
     c98:	b1 f1       	breq	.+108    	; 0xd06 <KeyPad_4x4_adjustKeyNumber+0x110>
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	8b 30       	cpi	r24, 0x0B	; 11
     ca0:	91 05       	cpc	r25, r1
     ca2:	a4 f5       	brge	.+104    	; 0xd0c <KeyPad_4x4_adjustKeyNumber+0x116>
     ca4:	2d c0       	rjmp	.+90     	; 0xd00 <KeyPad_4x4_adjustKeyNumber+0x10a>
     ca6:	2b 81       	ldd	r18, Y+3	; 0x03
     ca8:	3c 81       	ldd	r19, Y+4	; 0x04
     caa:	2e 30       	cpi	r18, 0x0E	; 14
     cac:	31 05       	cpc	r19, r1
     cae:	b9 f1       	breq	.+110    	; 0xd1e <KeyPad_4x4_adjustKeyNumber+0x128>
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	8e 30       	cpi	r24, 0x0E	; 14
     cb6:	91 05       	cpc	r25, r1
     cb8:	7c f1       	brlt	.+94     	; 0xd18 <KeyPad_4x4_adjustKeyNumber+0x122>
     cba:	2b 81       	ldd	r18, Y+3	; 0x03
     cbc:	3c 81       	ldd	r19, Y+4	; 0x04
     cbe:	2f 30       	cpi	r18, 0x0F	; 15
     cc0:	31 05       	cpc	r19, r1
     cc2:	79 f1       	breq	.+94     	; 0xd22 <KeyPad_4x4_adjustKeyNumber+0x12c>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	80 31       	cpi	r24, 0x10	; 16
     cca:	91 05       	cpc	r25, r1
     ccc:	69 f1       	breq	.+90     	; 0xd28 <KeyPad_4x4_adjustKeyNumber+0x132>
     cce:	2f c0       	rjmp	.+94     	; 0xd2e <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
     cd0:	97 e0       	ldi	r25, 0x07	; 7
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	2e c0       	rjmp	.+92     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
     cd6:	28 e0       	ldi	r18, 0x08	; 8
     cd8:	2a 83       	std	Y+2, r18	; 0x02
     cda:	2b c0       	rjmp	.+86     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
     cdc:	39 e0       	ldi	r19, 0x09	; 9
     cde:	3a 83       	std	Y+2, r19	; 0x02
     ce0:	28 c0       	rjmp	.+80     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     ce2:	85 e2       	ldi	r24, 0x25	; 37
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	25 c0       	rjmp	.+74     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
     ce8:	94 e0       	ldi	r25, 0x04	; 4
     cea:	9a 83       	std	Y+2, r25	; 0x02
     cec:	22 c0       	rjmp	.+68     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     cee:	25 e0       	ldi	r18, 0x05	; 5
     cf0:	2a 83       	std	Y+2, r18	; 0x02
     cf2:	1f c0       	rjmp	.+62     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
     cf4:	36 e0       	ldi	r19, 0x06	; 6
     cf6:	3a 83       	std	Y+2, r19	; 0x02
     cf8:	1c c0       	rjmp	.+56     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     cfa:	8a e2       	ldi	r24, 0x2A	; 42
     cfc:	8a 83       	std	Y+2, r24	; 0x02
     cfe:	19 c0       	rjmp	.+50     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
     d00:	91 e0       	ldi	r25, 0x01	; 1
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	16 c0       	rjmp	.+44     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
     d06:	22 e0       	ldi	r18, 0x02	; 2
     d08:	2a 83       	std	Y+2, r18	; 0x02
     d0a:	13 c0       	rjmp	.+38     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
     d0c:	33 e0       	ldi	r19, 0x03	; 3
     d0e:	3a 83       	std	Y+2, r19	; 0x02
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     d12:	8d e2       	ldi	r24, 0x2D	; 45
     d14:	8a 83       	std	Y+2, r24	; 0x02
     d16:	0d c0       	rjmp	.+26     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     d18:	9d e0       	ldi	r25, 0x0D	; 13
     d1a:	9a 83       	std	Y+2, r25	; 0x02
     d1c:	0a c0       	rjmp	.+20     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
     d1e:	1a 82       	std	Y+2, r1	; 0x02
     d20:	08 c0       	rjmp	.+16     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     d22:	2d e3       	ldi	r18, 0x3D	; 61
     d24:	2a 83       	std	Y+2, r18	; 0x02
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     d28:	3b e2       	ldi	r19, 0x2B	; 43
     d2a:	3a 83       	std	Y+2, r19	; 0x02
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     d4a:	a7 e3       	ldi	r26, 0x37	; 55
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e7 e3       	ldi	r30, 0x37	; 55
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8e 60       	ori	r24, 0x0E	; 14
     d56:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
     d58:	e4 e3       	ldi	r30, 0x34	; 52
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     d60:	88 e3       	ldi	r24, 0x38	; 56
     d62:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor on */
     d66:	8c e0       	ldi	r24, 0x0C	; 12
     d68:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	e9 97       	sbiw	r28, 0x39	; 57
     d82:	0f b6       	in	r0, 0x3f	; 63
     d84:	f8 94       	cli
     d86:	de bf       	out	0x3e, r29	; 62
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	cd bf       	out	0x3d, r28	; 61
     d8c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     d8e:	a8 e3       	ldi	r26, 0x38	; 56
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e8 e3       	ldi	r30, 0x38	; 56
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8d 7f       	andi	r24, 0xFD	; 253
     d9a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     d9c:	a8 e3       	ldi	r26, 0x38	; 56
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e3       	ldi	r30, 0x38	; 56
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e8       	ldi	r26, 0x80	; 128
     db0:	bf e3       	ldi	r27, 0x3F	; 63
     db2:	8d ab       	std	Y+53, r24	; 0x35
     db4:	9e ab       	std	Y+54, r25	; 0x36
     db6:	af ab       	std	Y+55, r26	; 0x37
     db8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dba:	6d a9       	ldd	r22, Y+53	; 0x35
     dbc:	7e a9       	ldd	r23, Y+54	; 0x36
     dbe:	8f a9       	ldd	r24, Y+55	; 0x37
     dc0:	98 ad       	ldd	r25, Y+56	; 0x38
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a ef       	ldi	r20, 0xFA	; 250
     dc8:	54 e4       	ldi	r21, 0x44	; 68
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	89 ab       	std	Y+49, r24	; 0x31
     dd4:	9a ab       	std	Y+50, r25	; 0x32
     dd6:	ab ab       	std	Y+51, r26	; 0x33
     dd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dda:	69 a9       	ldd	r22, Y+49	; 0x31
     ddc:	7a a9       	ldd	r23, Y+50	; 0x32
     dde:	8b a9       	ldd	r24, Y+51	; 0x33
     de0:	9c a9       	ldd	r25, Y+52	; 0x34
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e8       	ldi	r20, 0x80	; 128
     de8:	5f e3       	ldi	r21, 0x3F	; 63
     dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dee:	88 23       	and	r24, r24
     df0:	2c f4       	brge	.+10     	; 0xdfc <LCD_sendCommand+0x84>
		__ticks = 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	98 ab       	std	Y+48, r25	; 0x30
     df8:	8f a7       	std	Y+47, r24	; 0x2f
     dfa:	3f c0       	rjmp	.+126    	; 0xe7a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     dfc:	69 a9       	ldd	r22, Y+49	; 0x31
     dfe:	7a a9       	ldd	r23, Y+50	; 0x32
     e00:	8b a9       	ldd	r24, Y+51	; 0x33
     e02:	9c a9       	ldd	r25, Y+52	; 0x34
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	3f ef       	ldi	r19, 0xFF	; 255
     e08:	4f e7       	ldi	r20, 0x7F	; 127
     e0a:	57 e4       	ldi	r21, 0x47	; 71
     e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e10:	18 16       	cp	r1, r24
     e12:	4c f5       	brge	.+82     	; 0xe66 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e14:	6d a9       	ldd	r22, Y+53	; 0x35
     e16:	7e a9       	ldd	r23, Y+54	; 0x36
     e18:	8f a9       	ldd	r24, Y+55	; 0x37
     e1a:	98 ad       	ldd	r25, Y+56	; 0x38
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e2       	ldi	r20, 0x20	; 32
     e22:	51 e4       	ldi	r21, 0x41	; 65
     e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	98 ab       	std	Y+48, r25	; 0x30
     e3a:	8f a7       	std	Y+47, r24	; 0x2f
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <LCD_sendCommand+0xe4>
     e3e:	88 ec       	ldi	r24, 0xC8	; 200
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9e a7       	std	Y+46, r25	; 0x2e
     e44:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e46:	8d a5       	ldd	r24, Y+45	; 0x2d
     e48:	9e a5       	ldd	r25, Y+46	; 0x2e
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <LCD_sendCommand+0xd2>
     e4e:	9e a7       	std	Y+46, r25	; 0x2e
     e50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e52:	8f a5       	ldd	r24, Y+47	; 0x2f
     e54:	98 a9       	ldd	r25, Y+48	; 0x30
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	98 ab       	std	Y+48, r25	; 0x30
     e5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e5e:	98 a9       	ldd	r25, Y+48	; 0x30
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	69 f7       	brne	.-38     	; 0xe3e <LCD_sendCommand+0xc6>
     e64:	14 c0       	rjmp	.+40     	; 0xe8e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e66:	69 a9       	ldd	r22, Y+49	; 0x31
     e68:	7a a9       	ldd	r23, Y+50	; 0x32
     e6a:	8b a9       	ldd	r24, Y+51	; 0x33
     e6c:	9c a9       	ldd	r25, Y+52	; 0x34
     e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	98 ab       	std	Y+48, r25	; 0x30
     e78:	8f a7       	std	Y+47, r24	; 0x2f
     e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7c:	98 a9       	ldd	r25, Y+48	; 0x30
     e7e:	9c a7       	std	Y+44, r25	; 0x2c
     e80:	8b a7       	std	Y+43, r24	; 0x2b
     e82:	8b a5       	ldd	r24, Y+43	; 0x2b
     e84:	9c a5       	ldd	r25, Y+44	; 0x2c
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <LCD_sendCommand+0x10e>
     e8a:	9c a7       	std	Y+44, r25	; 0x2c
     e8c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     e8e:	a8 e3       	ldi	r26, 0x38	; 56
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e8 e3       	ldi	r30, 0x38	; 56
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	88 60       	ori	r24, 0x08	; 8
     e9a:	8c 93       	st	X, r24
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a0 e8       	ldi	r26, 0x80	; 128
     ea2:	bf e3       	ldi	r27, 0x3F	; 63
     ea4:	8f a3       	std	Y+39, r24	; 0x27
     ea6:	98 a7       	std	Y+40, r25	; 0x28
     ea8:	a9 a7       	std	Y+41, r26	; 0x29
     eaa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eac:	6f a1       	ldd	r22, Y+39	; 0x27
     eae:	78 a5       	ldd	r23, Y+40	; 0x28
     eb0:	89 a5       	ldd	r24, Y+41	; 0x29
     eb2:	9a a5       	ldd	r25, Y+42	; 0x2a
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4a ef       	ldi	r20, 0xFA	; 250
     eba:	54 e4       	ldi	r21, 0x44	; 68
     ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	8b a3       	std	Y+35, r24	; 0x23
     ec6:	9c a3       	std	Y+36, r25	; 0x24
     ec8:	ad a3       	std	Y+37, r26	; 0x25
     eca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ecc:	6b a1       	ldd	r22, Y+35	; 0x23
     ece:	7c a1       	ldd	r23, Y+36	; 0x24
     ed0:	8d a1       	ldd	r24, Y+37	; 0x25
     ed2:	9e a1       	ldd	r25, Y+38	; 0x26
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	5f e3       	ldi	r21, 0x3F	; 63
     edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	2c f4       	brge	.+10     	; 0xeee <LCD_sendCommand+0x176>
		__ticks = 1;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	9a a3       	std	Y+34, r25	; 0x22
     eea:	89 a3       	std	Y+33, r24	; 0x21
     eec:	3f c0       	rjmp	.+126    	; 0xf6c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     eee:	6b a1       	ldd	r22, Y+35	; 0x23
     ef0:	7c a1       	ldd	r23, Y+36	; 0x24
     ef2:	8d a1       	ldd	r24, Y+37	; 0x25
     ef4:	9e a1       	ldd	r25, Y+38	; 0x26
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	3f ef       	ldi	r19, 0xFF	; 255
     efa:	4f e7       	ldi	r20, 0x7F	; 127
     efc:	57 e4       	ldi	r21, 0x47	; 71
     efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f02:	18 16       	cp	r1, r24
     f04:	4c f5       	brge	.+82     	; 0xf58 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f06:	6f a1       	ldd	r22, Y+39	; 0x27
     f08:	78 a5       	ldd	r23, Y+40	; 0x28
     f0a:	89 a5       	ldd	r24, Y+41	; 0x29
     f0c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e2       	ldi	r20, 0x20	; 32
     f14:	51 e4       	ldi	r21, 0x41	; 65
     f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9a a3       	std	Y+34, r25	; 0x22
     f2c:	89 a3       	std	Y+33, r24	; 0x21
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <LCD_sendCommand+0x1d6>
     f30:	88 ec       	ldi	r24, 0xC8	; 200
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	98 a3       	std	Y+32, r25	; 0x20
     f36:	8f 8f       	std	Y+31, r24	; 0x1f
     f38:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f3a:	98 a1       	ldd	r25, Y+32	; 0x20
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <LCD_sendCommand+0x1c4>
     f40:	98 a3       	std	Y+32, r25	; 0x20
     f42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f44:	89 a1       	ldd	r24, Y+33	; 0x21
     f46:	9a a1       	ldd	r25, Y+34	; 0x22
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	9a a3       	std	Y+34, r25	; 0x22
     f4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f4e:	89 a1       	ldd	r24, Y+33	; 0x21
     f50:	9a a1       	ldd	r25, Y+34	; 0x22
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	69 f7       	brne	.-38     	; 0xf30 <LCD_sendCommand+0x1b8>
     f56:	14 c0       	rjmp	.+40     	; 0xf80 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f58:	6b a1       	ldd	r22, Y+35	; 0x23
     f5a:	7c a1       	ldd	r23, Y+36	; 0x24
     f5c:	8d a1       	ldd	r24, Y+37	; 0x25
     f5e:	9e a1       	ldd	r25, Y+38	; 0x26
     f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	9a a3       	std	Y+34, r25	; 0x22
     f6a:	89 a3       	std	Y+33, r24	; 0x21
     f6c:	89 a1       	ldd	r24, Y+33	; 0x21
     f6e:	9a a1       	ldd	r25, Y+34	; 0x22
     f70:	9e 8f       	std	Y+30, r25	; 0x1e
     f72:	8d 8f       	std	Y+29, r24	; 0x1d
     f74:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f76:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <LCD_sendCommand+0x200>
     f7c:	9e 8f       	std	Y+30, r25	; 0x1e
     f7e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
     f80:	e5 e3       	ldi	r30, 0x35	; 53
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	89 ad       	ldd	r24, Y+57	; 0x39
     f86:	80 83       	st	Z, r24
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	a0 e8       	ldi	r26, 0x80	; 128
     f8e:	bf e3       	ldi	r27, 0x3F	; 63
     f90:	89 8f       	std	Y+25, r24	; 0x19
     f92:	9a 8f       	std	Y+26, r25	; 0x1a
     f94:	ab 8f       	std	Y+27, r26	; 0x1b
     f96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f98:	69 8d       	ldd	r22, Y+25	; 0x19
     f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	4a ef       	ldi	r20, 0xFA	; 250
     fa6:	54 e4       	ldi	r21, 0x44	; 68
     fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	8d 8b       	std	Y+21, r24	; 0x15
     fb2:	9e 8b       	std	Y+22, r25	; 0x16
     fb4:	af 8b       	std	Y+23, r26	; 0x17
     fb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fb8:	6d 89       	ldd	r22, Y+21	; 0x15
     fba:	7e 89       	ldd	r23, Y+22	; 0x16
     fbc:	8f 89       	ldd	r24, Y+23	; 0x17
     fbe:	98 8d       	ldd	r25, Y+24	; 0x18
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fcc:	88 23       	and	r24, r24
     fce:	2c f4       	brge	.+10     	; 0xfda <LCD_sendCommand+0x262>
		__ticks = 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 8b       	std	Y+20, r25	; 0x14
     fd6:	8b 8b       	std	Y+19, r24	; 0x13
     fd8:	3f c0       	rjmp	.+126    	; 0x1058 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     fda:	6d 89       	ldd	r22, Y+21	; 0x15
     fdc:	7e 89       	ldd	r23, Y+22	; 0x16
     fde:	8f 89       	ldd	r24, Y+23	; 0x17
     fe0:	98 8d       	ldd	r25, Y+24	; 0x18
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	3f ef       	ldi	r19, 0xFF	; 255
     fe6:	4f e7       	ldi	r20, 0x7F	; 127
     fe8:	57 e4       	ldi	r21, 0x47	; 71
     fea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fee:	18 16       	cp	r1, r24
     ff0:	4c f5       	brge	.+82     	; 0x1044 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff2:	69 8d       	ldd	r22, Y+25	; 0x19
     ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e2       	ldi	r20, 0x20	; 32
    1000:	51 e4       	ldi	r21, 0x41	; 65
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	bc 01       	movw	r22, r24
    100c:	cd 01       	movw	r24, r26
    100e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	9c 8b       	std	Y+20, r25	; 0x14
    1018:	8b 8b       	std	Y+19, r24	; 0x13
    101a:	0f c0       	rjmp	.+30     	; 0x103a <LCD_sendCommand+0x2c2>
    101c:	88 ec       	ldi	r24, 0xC8	; 200
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9a 8b       	std	Y+18, r25	; 0x12
    1022:	89 8b       	std	Y+17, r24	; 0x11
    1024:	89 89       	ldd	r24, Y+17	; 0x11
    1026:	9a 89       	ldd	r25, Y+18	; 0x12
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <LCD_sendCommand+0x2b0>
    102c:	9a 8b       	std	Y+18, r25	; 0x12
    102e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1030:	8b 89       	ldd	r24, Y+19	; 0x13
    1032:	9c 89       	ldd	r25, Y+20	; 0x14
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103a:	8b 89       	ldd	r24, Y+19	; 0x13
    103c:	9c 89       	ldd	r25, Y+20	; 0x14
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	69 f7       	brne	.-38     	; 0x101c <LCD_sendCommand+0x2a4>
    1042:	14 c0       	rjmp	.+40     	; 0x106c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1044:	6d 89       	ldd	r22, Y+21	; 0x15
    1046:	7e 89       	ldd	r23, Y+22	; 0x16
    1048:	8f 89       	ldd	r24, Y+23	; 0x17
    104a:	98 8d       	ldd	r25, Y+24	; 0x18
    104c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	98 8b       	std	Y+16, r25	; 0x10
    105e:	8f 87       	std	Y+15, r24	; 0x0f
    1060:	8f 85       	ldd	r24, Y+15	; 0x0f
    1062:	98 89       	ldd	r25, Y+16	; 0x10
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <LCD_sendCommand+0x2ec>
    1068:	98 8b       	std	Y+16, r25	; 0x10
    106a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    106c:	a8 e3       	ldi	r26, 0x38	; 56
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e3       	ldi	r30, 0x38	; 56
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	87 7f       	andi	r24, 0xF7	; 247
    1078:	8c 93       	st	X, r24
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e8       	ldi	r26, 0x80	; 128
    1080:	bf e3       	ldi	r27, 0x3F	; 63
    1082:	8b 87       	std	Y+11, r24	; 0x0b
    1084:	9c 87       	std	Y+12, r25	; 0x0c
    1086:	ad 87       	std	Y+13, r26	; 0x0d
    1088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	6b 85       	ldd	r22, Y+11	; 0x0b
    108c:	7c 85       	ldd	r23, Y+12	; 0x0c
    108e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1090:	9e 85       	ldd	r25, Y+14	; 0x0e
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4a ef       	ldi	r20, 0xFA	; 250
    1098:	54 e4       	ldi	r21, 0x44	; 68
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8f 83       	std	Y+7, r24	; 0x07
    10a4:	98 87       	std	Y+8, r25	; 0x08
    10a6:	a9 87       	std	Y+9, r26	; 0x09
    10a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <LCD_sendCommand+0x354>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    10cc:	6f 81       	ldd	r22, Y+7	; 0x07
    10ce:	78 85       	ldd	r23, Y+8	; 0x08
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	0f c0       	rjmp	.+30     	; 0x112c <LCD_sendCommand+0x3b4>
    110e:	88 ec       	ldi	r24, 0xC8	; 200
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <LCD_sendCommand+0x3a2>
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <LCD_sendCommand+0x396>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <LCD_sendCommand+0x3de>
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    115e:	e9 96       	adiw	r28, 0x39	; 57
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	e9 97       	sbiw	r28, 0x39	; 57
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1186:	a8 e3       	ldi	r26, 0x38	; 56
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e8 e3       	ldi	r30, 0x38	; 56
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	82 60       	ori	r24, 0x02	; 2
    1192:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1194:	a8 e3       	ldi	r26, 0x38	; 56
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e8 e3       	ldi	r30, 0x38	; 56
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8b 7f       	andi	r24, 0xFB	; 251
    11a0:	8c 93       	st	X, r24
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	a0 e8       	ldi	r26, 0x80	; 128
    11a8:	bf e3       	ldi	r27, 0x3F	; 63
    11aa:	8d ab       	std	Y+53, r24	; 0x35
    11ac:	9e ab       	std	Y+54, r25	; 0x36
    11ae:	af ab       	std	Y+55, r26	; 0x37
    11b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b2:	6d a9       	ldd	r22, Y+53	; 0x35
    11b4:	7e a9       	ldd	r23, Y+54	; 0x36
    11b6:	8f a9       	ldd	r24, Y+55	; 0x37
    11b8:	98 ad       	ldd	r25, Y+56	; 0x38
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	4a ef       	ldi	r20, 0xFA	; 250
    11c0:	54 e4       	ldi	r21, 0x44	; 68
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	89 ab       	std	Y+49, r24	; 0x31
    11cc:	9a ab       	std	Y+50, r25	; 0x32
    11ce:	ab ab       	std	Y+51, r26	; 0x33
    11d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11d2:	69 a9       	ldd	r22, Y+49	; 0x31
    11d4:	7a a9       	ldd	r23, Y+50	; 0x32
    11d6:	8b a9       	ldd	r24, Y+51	; 0x33
    11d8:	9c a9       	ldd	r25, Y+52	; 0x34
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e8       	ldi	r20, 0x80	; 128
    11e0:	5f e3       	ldi	r21, 0x3F	; 63
    11e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11e6:	88 23       	and	r24, r24
    11e8:	2c f4       	brge	.+10     	; 0x11f4 <LCD_displayCharacter+0x84>
		__ticks = 1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	98 ab       	std	Y+48, r25	; 0x30
    11f0:	8f a7       	std	Y+47, r24	; 0x2f
    11f2:	3f c0       	rjmp	.+126    	; 0x1272 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    11f4:	69 a9       	ldd	r22, Y+49	; 0x31
    11f6:	7a a9       	ldd	r23, Y+50	; 0x32
    11f8:	8b a9       	ldd	r24, Y+51	; 0x33
    11fa:	9c a9       	ldd	r25, Y+52	; 0x34
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	3f ef       	ldi	r19, 0xFF	; 255
    1200:	4f e7       	ldi	r20, 0x7F	; 127
    1202:	57 e4       	ldi	r21, 0x47	; 71
    1204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1208:	18 16       	cp	r1, r24
    120a:	4c f5       	brge	.+82     	; 0x125e <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120c:	6d a9       	ldd	r22, Y+53	; 0x35
    120e:	7e a9       	ldd	r23, Y+54	; 0x36
    1210:	8f a9       	ldd	r24, Y+55	; 0x37
    1212:	98 ad       	ldd	r25, Y+56	; 0x38
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e2       	ldi	r20, 0x20	; 32
    121a:	51 e4       	ldi	r21, 0x41	; 65
    121c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	bc 01       	movw	r22, r24
    1226:	cd 01       	movw	r24, r26
    1228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	98 ab       	std	Y+48, r25	; 0x30
    1232:	8f a7       	std	Y+47, r24	; 0x2f
    1234:	0f c0       	rjmp	.+30     	; 0x1254 <LCD_displayCharacter+0xe4>
    1236:	88 ec       	ldi	r24, 0xC8	; 200
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	9e a7       	std	Y+46, r25	; 0x2e
    123c:	8d a7       	std	Y+45, r24	; 0x2d
    123e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1240:	9e a5       	ldd	r25, Y+46	; 0x2e
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	f1 f7       	brne	.-4      	; 0x1242 <LCD_displayCharacter+0xd2>
    1246:	9e a7       	std	Y+46, r25	; 0x2e
    1248:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124a:	8f a5       	ldd	r24, Y+47	; 0x2f
    124c:	98 a9       	ldd	r25, Y+48	; 0x30
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	98 ab       	std	Y+48, r25	; 0x30
    1252:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1254:	8f a5       	ldd	r24, Y+47	; 0x2f
    1256:	98 a9       	ldd	r25, Y+48	; 0x30
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	69 f7       	brne	.-38     	; 0x1236 <LCD_displayCharacter+0xc6>
    125c:	14 c0       	rjmp	.+40     	; 0x1286 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    125e:	69 a9       	ldd	r22, Y+49	; 0x31
    1260:	7a a9       	ldd	r23, Y+50	; 0x32
    1262:	8b a9       	ldd	r24, Y+51	; 0x33
    1264:	9c a9       	ldd	r25, Y+52	; 0x34
    1266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	98 ab       	std	Y+48, r25	; 0x30
    1270:	8f a7       	std	Y+47, r24	; 0x2f
    1272:	8f a5       	ldd	r24, Y+47	; 0x2f
    1274:	98 a9       	ldd	r25, Y+48	; 0x30
    1276:	9c a7       	std	Y+44, r25	; 0x2c
    1278:	8b a7       	std	Y+43, r24	; 0x2b
    127a:	8b a5       	ldd	r24, Y+43	; 0x2b
    127c:	9c a5       	ldd	r25, Y+44	; 0x2c
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <LCD_displayCharacter+0x10e>
    1282:	9c a7       	std	Y+44, r25	; 0x2c
    1284:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1286:	a8 e3       	ldi	r26, 0x38	; 56
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e8 e3       	ldi	r30, 0x38	; 56
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	88 60       	ori	r24, 0x08	; 8
    1292:	8c 93       	st	X, r24
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a0 e8       	ldi	r26, 0x80	; 128
    129a:	bf e3       	ldi	r27, 0x3F	; 63
    129c:	8f a3       	std	Y+39, r24	; 0x27
    129e:	98 a7       	std	Y+40, r25	; 0x28
    12a0:	a9 a7       	std	Y+41, r26	; 0x29
    12a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a4:	6f a1       	ldd	r22, Y+39	; 0x27
    12a6:	78 a5       	ldd	r23, Y+40	; 0x28
    12a8:	89 a5       	ldd	r24, Y+41	; 0x29
    12aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	4a ef       	ldi	r20, 0xFA	; 250
    12b2:	54 e4       	ldi	r21, 0x44	; 68
    12b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	8b a3       	std	Y+35, r24	; 0x23
    12be:	9c a3       	std	Y+36, r25	; 0x24
    12c0:	ad a3       	std	Y+37, r26	; 0x25
    12c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c4:	6b a1       	ldd	r22, Y+35	; 0x23
    12c6:	7c a1       	ldd	r23, Y+36	; 0x24
    12c8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ca:	9e a1       	ldd	r25, Y+38	; 0x26
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	40 e8       	ldi	r20, 0x80	; 128
    12d2:	5f e3       	ldi	r21, 0x3F	; 63
    12d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d8:	88 23       	and	r24, r24
    12da:	2c f4       	brge	.+10     	; 0x12e6 <LCD_displayCharacter+0x176>
		__ticks = 1;
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9a a3       	std	Y+34, r25	; 0x22
    12e2:	89 a3       	std	Y+33, r24	; 0x21
    12e4:	3f c0       	rjmp	.+126    	; 0x1364 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    12e6:	6b a1       	ldd	r22, Y+35	; 0x23
    12e8:	7c a1       	ldd	r23, Y+36	; 0x24
    12ea:	8d a1       	ldd	r24, Y+37	; 0x25
    12ec:	9e a1       	ldd	r25, Y+38	; 0x26
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	4f e7       	ldi	r20, 0x7F	; 127
    12f4:	57 e4       	ldi	r21, 0x47	; 71
    12f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fa:	18 16       	cp	r1, r24
    12fc:	4c f5       	brge	.+82     	; 0x1350 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1300:	78 a5       	ldd	r23, Y+40	; 0x28
    1302:	89 a5       	ldd	r24, Y+41	; 0x29
    1304:	9a a5       	ldd	r25, Y+42	; 0x2a
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e2       	ldi	r20, 0x20	; 32
    130c:	51 e4       	ldi	r21, 0x41	; 65
    130e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9a a3       	std	Y+34, r25	; 0x22
    1324:	89 a3       	std	Y+33, r24	; 0x21
    1326:	0f c0       	rjmp	.+30     	; 0x1346 <LCD_displayCharacter+0x1d6>
    1328:	88 ec       	ldi	r24, 0xC8	; 200
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	98 a3       	std	Y+32, r25	; 0x20
    132e:	8f 8f       	std	Y+31, r24	; 0x1f
    1330:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1332:	98 a1       	ldd	r25, Y+32	; 0x20
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <LCD_displayCharacter+0x1c4>
    1338:	98 a3       	std	Y+32, r25	; 0x20
    133a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133c:	89 a1       	ldd	r24, Y+33	; 0x21
    133e:	9a a1       	ldd	r25, Y+34	; 0x22
    1340:	01 97       	sbiw	r24, 0x01	; 1
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1346:	89 a1       	ldd	r24, Y+33	; 0x21
    1348:	9a a1       	ldd	r25, Y+34	; 0x22
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	69 f7       	brne	.-38     	; 0x1328 <LCD_displayCharacter+0x1b8>
    134e:	14 c0       	rjmp	.+40     	; 0x1378 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1350:	6b a1       	ldd	r22, Y+35	; 0x23
    1352:	7c a1       	ldd	r23, Y+36	; 0x24
    1354:	8d a1       	ldd	r24, Y+37	; 0x25
    1356:	9e a1       	ldd	r25, Y+38	; 0x26
    1358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	9a a3       	std	Y+34, r25	; 0x22
    1362:	89 a3       	std	Y+33, r24	; 0x21
    1364:	89 a1       	ldd	r24, Y+33	; 0x21
    1366:	9a a1       	ldd	r25, Y+34	; 0x22
    1368:	9e 8f       	std	Y+30, r25	; 0x1e
    136a:	8d 8f       	std	Y+29, r24	; 0x1d
    136c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <LCD_displayCharacter+0x200>
    1374:	9e 8f       	std	Y+30, r25	; 0x1e
    1376:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    1378:	e5 e3       	ldi	r30, 0x35	; 53
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	89 ad       	ldd	r24, Y+57	; 0x39
    137e:	80 83       	st	Z, r24
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	a0 e8       	ldi	r26, 0x80	; 128
    1386:	bf e3       	ldi	r27, 0x3F	; 63
    1388:	89 8f       	std	Y+25, r24	; 0x19
    138a:	9a 8f       	std	Y+26, r25	; 0x1a
    138c:	ab 8f       	std	Y+27, r26	; 0x1b
    138e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1390:	69 8d       	ldd	r22, Y+25	; 0x19
    1392:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1394:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1396:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	4a ef       	ldi	r20, 0xFA	; 250
    139e:	54 e4       	ldi	r21, 0x44	; 68
    13a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	8d 8b       	std	Y+21, r24	; 0x15
    13aa:	9e 8b       	std	Y+22, r25	; 0x16
    13ac:	af 8b       	std	Y+23, r26	; 0x17
    13ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13b0:	6d 89       	ldd	r22, Y+21	; 0x15
    13b2:	7e 89       	ldd	r23, Y+22	; 0x16
    13b4:	8f 89       	ldd	r24, Y+23	; 0x17
    13b6:	98 8d       	ldd	r25, Y+24	; 0x18
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e8       	ldi	r20, 0x80	; 128
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <LCD_displayCharacter+0x262>
		__ticks = 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9c 8b       	std	Y+20, r25	; 0x14
    13ce:	8b 8b       	std	Y+19, r24	; 0x13
    13d0:	3f c0       	rjmp	.+126    	; 0x1450 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    13d2:	6d 89       	ldd	r22, Y+21	; 0x15
    13d4:	7e 89       	ldd	r23, Y+22	; 0x16
    13d6:	8f 89       	ldd	r24, Y+23	; 0x17
    13d8:	98 8d       	ldd	r25, Y+24	; 0x18
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e7       	ldi	r20, 0x7F	; 127
    13e0:	57 e4       	ldi	r21, 0x47	; 71
    13e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	4c f5       	brge	.+82     	; 0x143c <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ea:	69 8d       	ldd	r22, Y+25	; 0x19
    13ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e2       	ldi	r20, 0x20	; 32
    13f8:	51 e4       	ldi	r21, 0x41	; 65
    13fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	bc 01       	movw	r22, r24
    1404:	cd 01       	movw	r24, r26
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9c 8b       	std	Y+20, r25	; 0x14
    1410:	8b 8b       	std	Y+19, r24	; 0x13
    1412:	0f c0       	rjmp	.+30     	; 0x1432 <LCD_displayCharacter+0x2c2>
    1414:	88 ec       	ldi	r24, 0xC8	; 200
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9a 8b       	std	Y+18, r25	; 0x12
    141a:	89 8b       	std	Y+17, r24	; 0x11
    141c:	89 89       	ldd	r24, Y+17	; 0x11
    141e:	9a 89       	ldd	r25, Y+18	; 0x12
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <LCD_displayCharacter+0x2b0>
    1424:	9a 8b       	std	Y+18, r25	; 0x12
    1426:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1428:	8b 89       	ldd	r24, Y+19	; 0x13
    142a:	9c 89       	ldd	r25, Y+20	; 0x14
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1432:	8b 89       	ldd	r24, Y+19	; 0x13
    1434:	9c 89       	ldd	r25, Y+20	; 0x14
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	69 f7       	brne	.-38     	; 0x1414 <LCD_displayCharacter+0x2a4>
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143c:	6d 89       	ldd	r22, Y+21	; 0x15
    143e:	7e 89       	ldd	r23, Y+22	; 0x16
    1440:	8f 89       	ldd	r24, Y+23	; 0x17
    1442:	98 8d       	ldd	r25, Y+24	; 0x18
    1444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9c 8b       	std	Y+20, r25	; 0x14
    144e:	8b 8b       	std	Y+19, r24	; 0x13
    1450:	8b 89       	ldd	r24, Y+19	; 0x13
    1452:	9c 89       	ldd	r25, Y+20	; 0x14
    1454:	98 8b       	std	Y+16, r25	; 0x10
    1456:	8f 87       	std	Y+15, r24	; 0x0f
    1458:	8f 85       	ldd	r24, Y+15	; 0x0f
    145a:	98 89       	ldd	r25, Y+16	; 0x10
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <LCD_displayCharacter+0x2ec>
    1460:	98 8b       	std	Y+16, r25	; 0x10
    1462:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1464:	a8 e3       	ldi	r26, 0x38	; 56
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e8 e3       	ldi	r30, 0x38	; 56
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	87 7f       	andi	r24, 0xF7	; 247
    1470:	8c 93       	st	X, r24
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a0 e8       	ldi	r26, 0x80	; 128
    1478:	bf e3       	ldi	r27, 0x3F	; 63
    147a:	8b 87       	std	Y+11, r24	; 0x0b
    147c:	9c 87       	std	Y+12, r25	; 0x0c
    147e:	ad 87       	std	Y+13, r26	; 0x0d
    1480:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1482:	6b 85       	ldd	r22, Y+11	; 0x0b
    1484:	7c 85       	ldd	r23, Y+12	; 0x0c
    1486:	8d 85       	ldd	r24, Y+13	; 0x0d
    1488:	9e 85       	ldd	r25, Y+14	; 0x0e
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	4a ef       	ldi	r20, 0xFA	; 250
    1490:	54 e4       	ldi	r21, 0x44	; 68
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	8f 83       	std	Y+7, r24	; 0x07
    149c:	98 87       	std	Y+8, r25	; 0x08
    149e:	a9 87       	std	Y+9, r26	; 0x09
    14a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	40 e8       	ldi	r20, 0x80	; 128
    14b0:	5f e3       	ldi	r21, 0x3F	; 63
    14b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b6:	88 23       	and	r24, r24
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <LCD_displayCharacter+0x354>
		__ticks = 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	3f c0       	rjmp	.+126    	; 0x1542 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    14c4:	6f 81       	ldd	r22, Y+7	; 0x07
    14c6:	78 85       	ldd	r23, Y+8	; 0x08
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	3f ef       	ldi	r19, 0xFF	; 255
    14d0:	4f e7       	ldi	r20, 0x7F	; 127
    14d2:	57 e4       	ldi	r21, 0x47	; 71
    14d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14d8:	18 16       	cp	r1, r24
    14da:	4c f5       	brge	.+82     	; 0x152e <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14de:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	51 e4       	ldi	r21, 0x41	; 65
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
    1504:	0f c0       	rjmp	.+30     	; 0x1524 <LCD_displayCharacter+0x3b4>
    1506:	88 ec       	ldi	r24, 0xC8	; 200
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9c 83       	std	Y+4, r25	; 0x04
    150c:	8b 83       	std	Y+3, r24	; 0x03
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <LCD_displayCharacter+0x3a2>
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	69 f7       	brne	.-38     	; 0x1506 <LCD_displayCharacter+0x396>
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <LCD_displayCharacter+0x3de>
    1552:	9a 83       	std	Y+2, r25	; 0x02
    1554:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1556:	e9 96       	adiw	r28, 0x39	; 57
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	f8 94       	cli
    155c:	de bf       	out	0x3e, r29	; 62
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	cd bf       	out	0x3d, r28	; 61
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <LCD_displayString+0x6>
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	9b 83       	std	Y+3, r25	; 0x03
    1576:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1578:	19 82       	std	Y+1, r1	; 0x01
    157a:	0e c0       	rjmp	.+28     	; 0x1598 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	9b 81       	ldd	r25, Y+3	; 0x03
    1586:	fc 01       	movw	r30, r24
    1588:	e2 0f       	add	r30, r18
    158a:	f3 1f       	adc	r31, r19
    158c:	80 81       	ld	r24, Z
    158e:	0e 94 b8 08 	call	0x1170	; 0x1170 <LCD_displayCharacter>
		i++;
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	9b 81       	ldd	r25, Y+3	; 0x03
    15a2:	fc 01       	movw	r30, r24
    15a4:	e2 0f       	add	r30, r18
    15a6:	f3 1f       	adc	r31, r19
    15a8:	80 81       	ld	r24, Z
    15aa:	88 23       	and	r24, r24
    15ac:	39 f7       	brne	.-50     	; 0x157c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <LCD_goToRowColumn+0x6>
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <LCD_goToRowColumn+0x8>
    15c2:	0f 92       	push	r0
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	3d 83       	std	Y+5, r19	; 0x05
    15d4:	2c 83       	std	Y+4, r18	; 0x04
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	81 30       	cpi	r24, 0x01	; 1
    15dc:	91 05       	cpc	r25, r1
    15de:	c1 f0       	breq	.+48     	; 0x1610 <LCD_goToRowColumn+0x56>
    15e0:	2c 81       	ldd	r18, Y+4	; 0x04
    15e2:	3d 81       	ldd	r19, Y+5	; 0x05
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <LCD_goToRowColumn+0x3a>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 f0       	breq	.+24     	; 0x160a <LCD_goToRowColumn+0x50>
    15f2:	19 c0       	rjmp	.+50     	; 0x1626 <LCD_goToRowColumn+0x6c>
    15f4:	2c 81       	ldd	r18, Y+4	; 0x04
    15f6:	3d 81       	ldd	r19, Y+5	; 0x05
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	69 f0       	breq	.+26     	; 0x1618 <LCD_goToRowColumn+0x5e>
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	9d 81       	ldd	r25, Y+5	; 0x05
    1602:	83 30       	cpi	r24, 0x03	; 3
    1604:	91 05       	cpc	r25, r1
    1606:	61 f0       	breq	.+24     	; 0x1620 <LCD_goToRowColumn+0x66>
    1608:	0e c0       	rjmp	.+28     	; 0x1626 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	0b c0       	rjmp	.+22     	; 0x1626 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	80 5c       	subi	r24, 0xC0	; 192
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	80 5f       	subi	r24, 0xF0	; 240
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	03 c0       	rjmp	.+6      	; 0x1626 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	80 5b       	subi	r24, 0xB0	; 176
    1624:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 68       	ori	r24, 0x80	; 128
    162a:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <LCD_displayStringRowColumn+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <LCD_displayStringRowColumn+0x8>
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	6a 83       	std	Y+2, r22	; 0x02
    164e:	5c 83       	std	Y+4, r21	; 0x04
    1650:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	6a 81       	ldd	r22, Y+2	; 0x02
    1656:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	62 97       	sbiw	r28, 0x12	; 18
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	9a 8b       	std	Y+18, r25	; 0x12
    1686:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1688:	89 89       	ldd	r24, Y+17	; 0x11
    168a:	9a 89       	ldd	r25, Y+18	; 0x12
    168c:	9e 01       	movw	r18, r28
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	b9 01       	movw	r22, r18
    1694:	4a e0       	ldi	r20, 0x0A	; 10
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <itoa>
   LCD_displayString(buff);
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
}
    16a4:	62 96       	adiw	r28, 0x12	; 18
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	f8 94       	cli
    16aa:	de bf       	out	0x3e, r29	; 62
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	cd bf       	out	0x3d, r28	; 61
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	0e 94 bc 06 	call	0xd78	; 0xd78 <LCD_sendCommand>
}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <main>:


/************************************************************************
  	  	  	  	  	  	  	  Main Function
 ***********************************************************************/
int main(){
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	6d 97       	sbiw	r28, 0x1d	; 29
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
	/* Enable Global Interrupt */
	SREG |= (1<<7);
    16de:	af e5       	ldi	r26, 0x5F	; 95
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ef e5       	ldi	r30, 0x5F	; 95
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	80 68       	ori	r24, 0x80	; 128
    16ea:	8c 93       	st	X, r24


	/* UART Structure for its configurations */
	UART_ConfigType uart_Struct;
	uart_Struct.BaudRate			= 9600;
    16ec:	80 e8       	ldi	r24, 0x80	; 128
    16ee:	95 e2       	ldi	r25, 0x25	; 37
    16f0:	a0 e0       	ldi	r26, 0x00	; 0
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	8a 8b       	std	Y+18, r24	; 0x12
    16f6:	9b 8b       	std	Y+19, r25	; 0x13
    16f8:	ac 8b       	std	Y+20, r26	; 0x14
    16fa:	bd 8b       	std	Y+21, r27	; 0x15
	uart_Struct.InterruptMode		= POLLING;
    16fc:	1f 86       	std	Y+15, r1	; 0x0f
	uart_Struct.ParityMode			= NO_PARIT_BITS;
    16fe:	19 8a       	std	Y+17, r1	; 0x11
	uart_Struct.StopBit				= STOP_BIT_1_BIT;
    1700:	18 8a       	std	Y+16, r1	; 0x10

	/* Timer Structure for timer 1 configurations */
	/* Configure Timer1 to count for 1 Second*/
	Timer_ConfigType timer1_Strut;
	timer1_Strut.mode				= CTC_MODE_CHANNEL_A;
    1702:	82 e0       	ldi	r24, 0x02	; 2
    1704:	8f 8b       	std	Y+23, r24	; 0x17
	timer1_Strut.compare_output		= NORMAL;
    1706:	18 8e       	std	Y+24, r1	; 0x18
	timer1_Strut.OutputPin			= NONE;
    1708:	19 8e       	std	Y+25, r1	; 0x19
	timer1_Strut.clock				= F_CPU_1024;
    170a:	85 e0       	ldi	r24, 0x05	; 5
    170c:	8e 8b       	std	Y+22, r24	; 0x16
	timer1_Strut.initial			= 0;
    170e:	1b 8e       	std	Y+27, r1	; 0x1b
    1710:	1a 8e       	std	Y+26, r1	; 0x1a
	timer1_Strut.compare_value		= 7900;
    1712:	8c ed       	ldi	r24, 0xDC	; 220
    1714:	9e e1       	ldi	r25, 0x1E	; 30
    1716:	9d 8f       	std	Y+29, r25	; 0x1d
    1718:	8c 8f       	std	Y+28, r24	; 0x1c


	/* LCD Initialization */
	LCD_init();
    171a:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_init>

	/* Timer 1 Initialization */
	TIMER1_init(&timer1_Strut);
    171e:	ce 01       	movw	r24, r28
    1720:	46 96       	adiw	r24, 0x16	; 22
    1722:	0e 94 10 1a 	call	0x3420	; 0x3420 <TIMER1_init>

	/* CallBack Function for timer 1 CTC Channel A Interrupt Function */
	Timer1_setCallBack(Timer1_INT);
    1726:	81 e2       	ldi	r24, 0x21	; 33
    1728:	98 e1       	ldi	r25, 0x18	; 24
    172a:	0e 94 75 1b 	call	0x36ea	; 0x36ea <Timer1_setCallBack>

	/* UART Initialization */
	UART_init(&uart_Struct);
    172e:	ce 01       	movw	r24, r28
    1730:	0f 96       	adiw	r24, 0x0f	; 15
    1732:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <UART_init>

	/* Send to MC2 that MC1 is ready */
	UART_sendByte(M1_READY) ;
    1736:	86 e0       	ldi	r24, 0x06	; 6
    1738:	0e 94 ad 1c 	call	0x395a	; 0x395a <UART_sendByte>

	/*Clear the LCD*/
	LCD_clearScreen();
    173c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	/* Start from first Pixel */
	LCD_goToRowColumn(0,0);
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	/*Display welcome message*/
	LCD_displayString("Welcome ;)");
    1748:	80 e6       	ldi	r24, 0x60	; 96
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	aa ef       	ldi	r26, 0xFA	; 250
    1756:	b3 e4       	ldi	r27, 0x43	; 67
    1758:	8b 87       	std	Y+11, r24	; 0x0b
    175a:	9c 87       	std	Y+12, r25	; 0x0c
    175c:	ad 87       	std	Y+13, r26	; 0x0d
    175e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1760:	6b 85       	ldd	r22, Y+11	; 0x0b
    1762:	7c 85       	ldd	r23, Y+12	; 0x0c
    1764:	8d 85       	ldd	r24, Y+13	; 0x0d
    1766:	9e 85       	ldd	r25, Y+14	; 0x0e
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	4a ef       	ldi	r20, 0xFA	; 250
    176e:	54 e4       	ldi	r21, 0x44	; 68
    1770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	8f 83       	std	Y+7, r24	; 0x07
    177a:	98 87       	std	Y+8, r25	; 0x08
    177c:	a9 87       	std	Y+9, r26	; 0x09
    177e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1780:	6f 81       	ldd	r22, Y+7	; 0x07
    1782:	78 85       	ldd	r23, Y+8	; 0x08
    1784:	89 85       	ldd	r24, Y+9	; 0x09
    1786:	9a 85       	ldd	r25, Y+10	; 0x0a
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e8       	ldi	r20, 0x80	; 128
    178e:	5f e3       	ldi	r21, 0x3F	; 63
    1790:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1794:	88 23       	and	r24, r24
    1796:	2c f4       	brge	.+10     	; 0x17a2 <main+0xd8>
		__ticks = 1;
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	3f c0       	rjmp	.+126    	; 0x1820 <main+0x156>
	else if (__tmp > 65535)
    17a2:	6f 81       	ldd	r22, Y+7	; 0x07
    17a4:	78 85       	ldd	r23, Y+8	; 0x08
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	3f ef       	ldi	r19, 0xFF	; 255
    17ae:	4f e7       	ldi	r20, 0x7F	; 127
    17b0:	57 e4       	ldi	r21, 0x47	; 71
    17b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	4c f5       	brge	.+82     	; 0x180c <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    17bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17be:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e2       	ldi	r20, 0x20	; 32
    17c8:	51 e4       	ldi	r21, 0x41	; 65
    17ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ce:	dc 01       	movw	r26, r24
    17d0:	cb 01       	movw	r24, r22
    17d2:	bc 01       	movw	r22, r24
    17d4:	cd 01       	movw	r24, r26
    17d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	9e 83       	std	Y+6, r25	; 0x06
    17e0:	8d 83       	std	Y+5, r24	; 0x05
    17e2:	0f c0       	rjmp	.+30     	; 0x1802 <main+0x138>
    17e4:	88 ec       	ldi	r24, 0xC8	; 200
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	9c 83       	std	Y+4, r25	; 0x04
    17ea:	8b 83       	std	Y+3, r24	; 0x03
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	f1 f7       	brne	.-4      	; 0x17f0 <main+0x126>
    17f4:	9c 83       	std	Y+4, r25	; 0x04
    17f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	9e 81       	ldd	r25, Y+6	; 0x06
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	9e 83       	std	Y+6, r25	; 0x06
    1800:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	9e 81       	ldd	r25, Y+6	; 0x06
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	69 f7       	brne	.-38     	; 0x17e4 <main+0x11a>
    180a:	17 c0       	rjmp	.+46     	; 0x183a <main+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	9a 83       	std	Y+2, r25	; 0x02
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	f1 f7       	brne	.-4      	; 0x182c <main+0x162>
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	02 c0       	rjmp	.+4      	; 0x183a <main+0x170>
	/*main code*/
	while(1){
		/*check if there is no pass before*/
		while(compare == 0){
			/*Starting from the first and enter the new password*/
			Start_APP();
    1836:	0e 94 24 0c 	call	0x1848	; 0x1848 <Start_APP>
	_delay_ms(500);

	/*main code*/
	while(1){
		/*check if there is no pass before*/
		while(compare == 0){
    183a:	80 91 44 01 	lds	r24, 0x0144
    183e:	88 23       	and	r24, r24
    1840:	d1 f3       	breq	.-12     	; 0x1836 <main+0x16c>
			/*Starting from the first and enter the new password*/
			Start_APP();
		}
		/*Start the main application*/
		Main_APP();
    1842:	0e 94 1d 10 	call	0x203a	; 0x203a <Main_APP>
    1846:	f9 cf       	rjmp	.-14     	; 0x183a <main+0x170>

00001848 <Start_APP>:


/************************************************************************
  	  	  	  	  	  	  	  Functions Definition
 ***********************************************************************/
void Start_APP(){
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	c0 56       	subi	r28, 0x60	; 96
    1856:	d0 40       	sbci	r29, 0x00	; 0
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
	uint8 conf[PASS_LENGTH];
	uint8 key;
	uint8 i;

	/*Clear the LCD*/
	LCD_clearScreen();
    1862:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	/* Start from first Pixel */
	LCD_goToRowColumn(0,0);
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	LCD_displayString("ENTER password");
    186e:	8b e6       	ldi	r24, 0x6B	; 107
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	/* Start from second row - first Pixel */
	LCD_goToRowColumn(1,0);
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>

	/* Get the password from the user*/
	for (i = 0; i < PASS_LENGTH; i++){
    187e:	fe 01       	movw	r30, r28
    1880:	eb 5a       	subi	r30, 0xAB	; 171
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	10 82       	st	Z, r1
    1886:	e3 c0       	rjmp	.+454    	; 0x1a4e <Start_APP+0x206>
		/*Get the pressed key from keypad*/
		key = KeyPad_getPressedKey();
    1888:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    188c:	fe 01       	movw	r30, r28
    188e:	ea 5a       	subi	r30, 0xAA	; 170
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	80 83       	st	Z, r24
		if ((key >= 0) && (key <= 9))
    1894:	fe 01       	movw	r30, r28
    1896:	ea 5a       	subi	r30, 0xAA	; 170
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 81       	ld	r24, Z
    189c:	8a 30       	cpi	r24, 0x0A	; 10
    189e:	d8 f4       	brcc	.+54     	; 0x18d6 <Start_APP+0x8e>
		{
			/*Save the key in password array*/
			pass[i] = key;
    18a0:	fe 01       	movw	r30, r28
    18a2:	eb 5a       	subi	r30, 0xAB	; 171
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	ce 01       	movw	r24, r28
    18ae:	89 5a       	subi	r24, 0xA9	; 169
    18b0:	9f 4f       	sbci	r25, 0xFF	; 255
    18b2:	dc 01       	movw	r26, r24
    18b4:	a2 0f       	add	r26, r18
    18b6:	b3 1f       	adc	r27, r19
    18b8:	fe 01       	movw	r30, r28
    18ba:	ea 5a       	subi	r30, 0xAA	; 170
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 81       	ld	r24, Z
    18c0:	8c 93       	st	X, r24
			LCD_displayStringRowColumn(1,i,"*");
    18c2:	fe 01       	movw	r30, r28
    18c4:	eb 5a       	subi	r30, 0xAB	; 171
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	2a e7       	ldi	r18, 0x7A	; 122
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	60 81       	ld	r22, Z
    18d0:	a9 01       	movw	r20, r18
    18d2:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    18d6:	fe 01       	movw	r30, r28
    18d8:	ef 5a       	subi	r30, 0xAF	; 175
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	aa ef       	ldi	r26, 0xFA	; 250
    18e2:	b3 e4       	ldi	r27, 0x43	; 67
    18e4:	80 83       	st	Z, r24
    18e6:	91 83       	std	Z+1, r25	; 0x01
    18e8:	a2 83       	std	Z+2, r26	; 0x02
    18ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ec:	8e 01       	movw	r16, r28
    18ee:	03 5b       	subi	r16, 0xB3	; 179
    18f0:	1f 4f       	sbci	r17, 0xFF	; 255
    18f2:	fe 01       	movw	r30, r28
    18f4:	ef 5a       	subi	r30, 0xAF	; 175
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4a ef       	ldi	r20, 0xFA	; 250
    1906:	54 e4       	ldi	r21, 0x44	; 68
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	f8 01       	movw	r30, r16
    1912:	80 83       	st	Z, r24
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	a2 83       	std	Z+2, r26	; 0x02
    1918:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    191a:	fe 01       	movw	r30, r28
    191c:	e3 5b       	subi	r30, 0xB3	; 179
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	60 81       	ld	r22, Z
    1922:	71 81       	ldd	r23, Z+1	; 0x01
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	44 f4       	brge	.+16     	; 0x1948 <Start_APP+0x100>
		__ticks = 1;
    1938:	fe 01       	movw	r30, r28
    193a:	e5 5b       	subi	r30, 0xB5	; 181
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24
    1946:	64 c0       	rjmp	.+200    	; 0x1a10 <Start_APP+0x1c8>
	else if (__tmp > 65535)
    1948:	fe 01       	movw	r30, r28
    194a:	e3 5b       	subi	r30, 0xB3	; 179
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	60 81       	ld	r22, Z
    1950:	71 81       	ldd	r23, Z+1	; 0x01
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	4f e7       	ldi	r20, 0x7F	; 127
    195c:	57 e4       	ldi	r21, 0x47	; 71
    195e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1962:	18 16       	cp	r1, r24
    1964:	0c f0       	brlt	.+2      	; 0x1968 <Start_APP+0x120>
    1966:	43 c0       	rjmp	.+134    	; 0x19ee <Start_APP+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1968:	fe 01       	movw	r30, r28
    196a:	ef 5a       	subi	r30, 0xAF	; 175
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	8e 01       	movw	r16, r28
    1988:	05 5b       	subi	r16, 0xB5	; 181
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	f8 01       	movw	r30, r16
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	80 83       	st	Z, r24
    199e:	1f c0       	rjmp	.+62     	; 0x19de <Start_APP+0x196>
    19a0:	fe 01       	movw	r30, r28
    19a2:	e7 5b       	subi	r30, 0xB7	; 183
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	88 ec       	ldi	r24, 0xC8	; 200
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	80 83       	st	Z, r24
    19ae:	fe 01       	movw	r30, r28
    19b0:	e7 5b       	subi	r30, 0xB7	; 183
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <Start_APP+0x170>
    19bc:	fe 01       	movw	r30, r28
    19be:	e7 5b       	subi	r30, 0xB7	; 183
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c6:	de 01       	movw	r26, r28
    19c8:	a5 5b       	subi	r26, 0xB5	; 181
    19ca:	bf 4f       	sbci	r27, 0xFF	; 255
    19cc:	fe 01       	movw	r30, r28
    19ce:	e5 5b       	subi	r30, 0xB5	; 181
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	80 81       	ld	r24, Z
    19d4:	91 81       	ldd	r25, Z+1	; 0x01
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	11 96       	adiw	r26, 0x01	; 1
    19da:	9c 93       	st	X, r25
    19dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19de:	fe 01       	movw	r30, r28
    19e0:	e5 5b       	subi	r30, 0xB5	; 181
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	91 81       	ldd	r25, Z+1	; 0x01
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	d1 f6       	brne	.-76     	; 0x19a0 <Start_APP+0x158>
    19ec:	27 c0       	rjmp	.+78     	; 0x1a3c <Start_APP+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ee:	8e 01       	movw	r16, r28
    19f0:	05 5b       	subi	r16, 0xB5	; 181
    19f2:	1f 4f       	sbci	r17, 0xFF	; 255
    19f4:	fe 01       	movw	r30, r28
    19f6:	e3 5b       	subi	r30, 0xB3	; 179
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	f8 01       	movw	r30, r16
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
    1a10:	de 01       	movw	r26, r28
    1a12:	a9 5b       	subi	r26, 0xB9	; 185
    1a14:	bf 4f       	sbci	r27, 0xFF	; 255
    1a16:	fe 01       	movw	r30, r28
    1a18:	e5 5b       	subi	r30, 0xB5	; 181
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	80 81       	ld	r24, Z
    1a1e:	91 81       	ldd	r25, Z+1	; 0x01
    1a20:	8d 93       	st	X+, r24
    1a22:	9c 93       	st	X, r25
    1a24:	fe 01       	movw	r30, r28
    1a26:	e9 5b       	subi	r30, 0xB9	; 185
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	80 81       	ld	r24, Z
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <Start_APP+0x1e6>
    1a32:	fe 01       	movw	r30, r28
    1a34:	e9 5b       	subi	r30, 0xB9	; 185
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
	LCD_displayString("ENTER password");
	/* Start from second row - first Pixel */
	LCD_goToRowColumn(1,0);

	/* Get the password from the user*/
	for (i = 0; i < PASS_LENGTH; i++){
    1a3c:	de 01       	movw	r26, r28
    1a3e:	ab 5a       	subi	r26, 0xAB	; 171
    1a40:	bf 4f       	sbci	r27, 0xFF	; 255
    1a42:	fe 01       	movw	r30, r28
    1a44:	eb 5a       	subi	r30, 0xAB	; 171
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 81       	ld	r24, Z
    1a4a:	8f 5f       	subi	r24, 0xFF	; 255
    1a4c:	8c 93       	st	X, r24
    1a4e:	fe 01       	movw	r30, r28
    1a50:	eb 5a       	subi	r30, 0xAB	; 171
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	85 30       	cpi	r24, 0x05	; 5
    1a58:	08 f4       	brcc	.+2      	; 0x1a5c <Start_APP+0x214>
    1a5a:	16 cf       	rjmp	.-468    	; 0x1888 <Start_APP+0x40>
		}
		_delay_ms(500);
	}

	/*Clear the LCD*/
	LCD_clearScreen();
    1a5c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	/* Start from first Pixel */
	LCD_goToRowColumn(0,0);
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	LCD_displayString("CONFIRM password");
    1a68:	8c e7       	ldi	r24, 0x7C	; 124
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	/* Start from second row - first Pixel */
	LCD_goToRowColumn(1,0);
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	/*Get the confirmed password*/
	for (i = 0; i < PASS_LENGTH; i++){
    1a78:	fe 01       	movw	r30, r28
    1a7a:	eb 5a       	subi	r30, 0xAB	; 171
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	10 82       	st	Z, r1
    1a80:	b5 c0       	rjmp	.+362    	; 0x1bec <Start_APP+0x3a4>
		/*Get the pressed key from keypad*/
		key = KeyPad_getPressedKey();
    1a82:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    1a86:	fe 01       	movw	r30, r28
    1a88:	ea 5a       	subi	r30, 0xAA	; 170
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	80 83       	st	Z, r24
		if ((key >= 0) && (key <= 9))
    1a8e:	fe 01       	movw	r30, r28
    1a90:	ea 5a       	subi	r30, 0xAA	; 170
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 81       	ld	r24, Z
    1a96:	8a 30       	cpi	r24, 0x0A	; 10
    1a98:	d8 f4       	brcc	.+54     	; 0x1ad0 <Start_APP+0x288>
		{
			/*Save the key in Confirm array*/
			conf[i] = key;
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	eb 5a       	subi	r30, 0xAB	; 171
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 81       	ld	r24, Z
    1aa2:	28 2f       	mov	r18, r24
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	84 5a       	subi	r24, 0xA4	; 164
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	dc 01       	movw	r26, r24
    1aae:	a2 0f       	add	r26, r18
    1ab0:	b3 1f       	adc	r27, r19
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	ea 5a       	subi	r30, 0xAA	; 170
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	8c 93       	st	X, r24
			LCD_displayStringRowColumn(1,i,"*");
    1abc:	fe 01       	movw	r30, r28
    1abe:	eb 5a       	subi	r30, 0xAB	; 171
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	2a e7       	ldi	r18, 0x7A	; 122
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	60 81       	ld	r22, Z
    1aca:	a9 01       	movw	r20, r18
    1acc:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	ed 5b       	subi	r30, 0xBD	; 189
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	aa ef       	ldi	r26, 0xFA	; 250
    1adc:	b3 e4       	ldi	r27, 0x43	; 67
    1ade:	80 83       	st	Z, r24
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	a2 83       	std	Z+2, r26	; 0x02
    1ae4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae6:	8e 01       	movw	r16, r28
    1ae8:	01 5c       	subi	r16, 0xC1	; 193
    1aea:	1f 4f       	sbci	r17, 0xFF	; 255
    1aec:	fe 01       	movw	r30, r28
    1aee:	ed 5b       	subi	r30, 0xBD	; 189
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a ef       	ldi	r20, 0xFA	; 250
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	80 83       	st	Z, r24
    1b0e:	91 83       	std	Z+1, r25	; 0x01
    1b10:	a2 83       	std	Z+2, r26	; 0x02
    1b12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b14:	fe 01       	movw	r30, r28
    1b16:	ff 96       	adiw	r30, 0x3f	; 63
    1b18:	60 81       	ld	r22, Z
    1b1a:	71 81       	ldd	r23, Z+1	; 0x01
    1b1c:	82 81       	ldd	r24, Z+2	; 0x02
    1b1e:	93 81       	ldd	r25, Z+3	; 0x03
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e8       	ldi	r20, 0x80	; 128
    1b26:	5f e3       	ldi	r21, 0x3F	; 63
    1b28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <Start_APP+0x2f2>
		__ticks = 1;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9e af       	std	Y+62, r25	; 0x3e
    1b36:	8d af       	std	Y+61, r24	; 0x3d
    1b38:	46 c0       	rjmp	.+140    	; 0x1bc6 <Start_APP+0x37e>
	else if (__tmp > 65535)
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	ff 96       	adiw	r30, 0x3f	; 63
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	57 e4       	ldi	r21, 0x47	; 71
    1b4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	64 f5       	brge	.+88     	; 0x1bae <Start_APP+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b56:	fe 01       	movw	r30, r28
    1b58:	ed 5b       	subi	r30, 0xBD	; 189
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e2       	ldi	r20, 0x20	; 32
    1b6a:	51 e4       	ldi	r21, 0x41	; 65
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9e af       	std	Y+62, r25	; 0x3e
    1b82:	8d af       	std	Y+61, r24	; 0x3d
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <Start_APP+0x35c>
    1b86:	88 ec       	ldi	r24, 0xC8	; 200
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9c af       	std	Y+60, r25	; 0x3c
    1b8c:	8b af       	std	Y+59, r24	; 0x3b
    1b8e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b90:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <Start_APP+0x34a>
    1b96:	9c af       	std	Y+60, r25	; 0x3c
    1b98:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	9e af       	std	Y+62, r25	; 0x3e
    1ba2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ba6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	69 f7       	brne	.-38     	; 0x1b86 <Start_APP+0x33e>
    1bac:	16 c0       	rjmp	.+44     	; 0x1bda <Start_APP+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ff 96       	adiw	r30, 0x3f	; 63
    1bb2:	60 81       	ld	r22, Z
    1bb4:	71 81       	ldd	r23, Z+1	; 0x01
    1bb6:	82 81       	ldd	r24, Z+2	; 0x02
    1bb8:	93 81       	ldd	r25, Z+3	; 0x03
    1bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	9e af       	std	Y+62, r25	; 0x3e
    1bc4:	8d af       	std	Y+61, r24	; 0x3d
    1bc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bca:	9a af       	std	Y+58, r25	; 0x3a
    1bcc:	89 af       	std	Y+57, r24	; 0x39
    1bce:	89 ad       	ldd	r24, Y+57	; 0x39
    1bd0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bd2:	01 97       	sbiw	r24, 0x01	; 1
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <Start_APP+0x38a>
    1bd6:	9a af       	std	Y+58, r25	; 0x3a
    1bd8:	89 af       	std	Y+57, r24	; 0x39
	LCD_goToRowColumn(0,0);
	LCD_displayString("CONFIRM password");
	/* Start from second row - first Pixel */
	LCD_goToRowColumn(1,0);
	/*Get the confirmed password*/
	for (i = 0; i < PASS_LENGTH; i++){
    1bda:	de 01       	movw	r26, r28
    1bdc:	ab 5a       	subi	r26, 0xAB	; 171
    1bde:	bf 4f       	sbci	r27, 0xFF	; 255
    1be0:	fe 01       	movw	r30, r28
    1be2:	eb 5a       	subi	r30, 0xAB	; 171
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	80 81       	ld	r24, Z
    1be8:	8f 5f       	subi	r24, 0xFF	; 255
    1bea:	8c 93       	st	X, r24
    1bec:	fe 01       	movw	r30, r28
    1bee:	eb 5a       	subi	r30, 0xAB	; 171
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	85 30       	cpi	r24, 0x05	; 5
    1bf6:	08 f4       	brcc	.+2      	; 0x1bfa <Start_APP+0x3b2>
    1bf8:	44 cf       	rjmp	.-376    	; 0x1a82 <Start_APP+0x23a>
			//LCD_intgerToString(key);
		}
		_delay_ms(500);
	}
	/*Compare the password and the confirmed password*/
	compare = Compare(pass,conf);
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	89 5a       	subi	r24, 0xA9	; 169
    1bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1c00:	9e 01       	movw	r18, r28
    1c02:	24 5a       	subi	r18, 0xA4	; 164
    1c04:	3f 4f       	sbci	r19, 0xFF	; 255
    1c06:	b9 01       	movw	r22, r18
    1c08:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Compare>
    1c0c:	80 93 44 01 	sts	0x0144, r24


	if (compare){
    1c10:	80 91 44 01 	lds	r24, 0x0144
    1c14:	88 23       	and	r24, r24
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <Start_APP+0x3d2>
    1c18:	88 c1       	rjmp	.+784    	; 0x1f2a <Start_APP+0x6e2>
		/*the password and the confirmed password are matched*/
		/*Clear the LCD*/
		LCD_clearScreen();
    1c1a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		/* Start from first Pixel */
		LCD_goToRowColumn(0,0);
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
		LCD_displayString("matched :)");
    1c26:	8d e8       	ldi	r24, 0x8D	; 141
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
		/*Send command to Store the password in the EEPROM*/
		UART_sendByte(NEW_PASSWORD);
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	0e 94 ad 1c 	call	0x395a	; 0x395a <UART_sendByte>
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a8 e4       	ldi	r26, 0x48	; 72
    1c3a:	b2 e4       	ldi	r27, 0x42	; 66
    1c3c:	8d ab       	std	Y+53, r24	; 0x35
    1c3e:	9e ab       	std	Y+54, r25	; 0x36
    1c40:	af ab       	std	Y+55, r26	; 0x37
    1c42:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c44:	6d a9       	ldd	r22, Y+53	; 0x35
    1c46:	7e a9       	ldd	r23, Y+54	; 0x36
    1c48:	8f a9       	ldd	r24, Y+55	; 0x37
    1c4a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	4a ef       	ldi	r20, 0xFA	; 250
    1c52:	54 e4       	ldi	r21, 0x44	; 68
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	89 ab       	std	Y+49, r24	; 0x31
    1c5e:	9a ab       	std	Y+50, r25	; 0x32
    1c60:	ab ab       	std	Y+51, r26	; 0x33
    1c62:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c64:	69 a9       	ldd	r22, Y+49	; 0x31
    1c66:	7a a9       	ldd	r23, Y+50	; 0x32
    1c68:	8b a9       	ldd	r24, Y+51	; 0x33
    1c6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e8       	ldi	r20, 0x80	; 128
    1c72:	5f e3       	ldi	r21, 0x3F	; 63
    1c74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c78:	88 23       	and	r24, r24
    1c7a:	2c f4       	brge	.+10     	; 0x1c86 <Start_APP+0x43e>
		__ticks = 1;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	98 ab       	std	Y+48, r25	; 0x30
    1c82:	8f a7       	std	Y+47, r24	; 0x2f
    1c84:	3f c0       	rjmp	.+126    	; 0x1d04 <Start_APP+0x4bc>
	else if (__tmp > 65535)
    1c86:	69 a9       	ldd	r22, Y+49	; 0x31
    1c88:	7a a9       	ldd	r23, Y+50	; 0x32
    1c8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	3f ef       	ldi	r19, 0xFF	; 255
    1c92:	4f e7       	ldi	r20, 0x7F	; 127
    1c94:	57 e4       	ldi	r21, 0x47	; 71
    1c96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c9a:	18 16       	cp	r1, r24
    1c9c:	4c f5       	brge	.+82     	; 0x1cf0 <Start_APP+0x4a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1ca0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ca2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e2       	ldi	r20, 0x20	; 32
    1cac:	51 e4       	ldi	r21, 0x41	; 65
    1cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	cd 01       	movw	r24, r26
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	98 ab       	std	Y+48, r25	; 0x30
    1cc4:	8f a7       	std	Y+47, r24	; 0x2f
    1cc6:	0f c0       	rjmp	.+30     	; 0x1ce6 <Start_APP+0x49e>
    1cc8:	88 ec       	ldi	r24, 0xC8	; 200
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9e a7       	std	Y+46, r25	; 0x2e
    1cce:	8d a7       	std	Y+45, r24	; 0x2d
    1cd0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cd2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <Start_APP+0x48c>
    1cd8:	9e a7       	std	Y+46, r25	; 0x2e
    1cda:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cde:	98 a9       	ldd	r25, Y+48	; 0x30
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	98 ab       	std	Y+48, r25	; 0x30
    1ce4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ce8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	69 f7       	brne	.-38     	; 0x1cc8 <Start_APP+0x480>
    1cee:	14 c0       	rjmp	.+40     	; 0x1d18 <Start_APP+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	98 ab       	std	Y+48, r25	; 0x30
    1d02:	8f a7       	std	Y+47, r24	; 0x2f
    1d04:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d06:	98 a9       	ldd	r25, Y+48	; 0x30
    1d08:	9c a7       	std	Y+44, r25	; 0x2c
    1d0a:	8b a7       	std	Y+43, r24	; 0x2b
    1d0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <Start_APP+0x4c8>
    1d14:	9c a7       	std	Y+44, r25	; 0x2c
    1d16:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		/*Send the new password to store it*/
		for (i = 0; i < PASS_LENGTH; i++) {
    1d18:	fe 01       	movw	r30, r28
    1d1a:	eb 5a       	subi	r30, 0xAB	; 171
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	10 82       	st	Z, r1
    1d20:	8a c0       	rjmp	.+276    	; 0x1e36 <Start_APP+0x5ee>
			UART_sendByte(pass[i]);
    1d22:	fe 01       	movw	r30, r28
    1d24:	eb 5a       	subi	r30, 0xAB	; 171
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	80 81       	ld	r24, Z
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	ce 01       	movw	r24, r28
    1d30:	89 5a       	subi	r24, 0xA9	; 169
    1d32:	9f 4f       	sbci	r25, 0xFF	; 255
    1d34:	fc 01       	movw	r30, r24
    1d36:	e2 0f       	add	r30, r18
    1d38:	f3 1f       	adc	r31, r19
    1d3a:	80 81       	ld	r24, Z
    1d3c:	0e 94 ad 1c 	call	0x395a	; 0x395a <UART_sendByte>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a8 ec       	ldi	r26, 0xC8	; 200
    1d46:	b2 e4       	ldi	r27, 0x42	; 66
    1d48:	8f a3       	std	Y+39, r24	; 0x27
    1d4a:	98 a7       	std	Y+40, r25	; 0x28
    1d4c:	a9 a7       	std	Y+41, r26	; 0x29
    1d4e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d50:	6f a1       	ldd	r22, Y+39	; 0x27
    1d52:	78 a5       	ldd	r23, Y+40	; 0x28
    1d54:	89 a5       	ldd	r24, Y+41	; 0x29
    1d56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	4a ef       	ldi	r20, 0xFA	; 250
    1d5e:	54 e4       	ldi	r21, 0x44	; 68
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	8b a3       	std	Y+35, r24	; 0x23
    1d6a:	9c a3       	std	Y+36, r25	; 0x24
    1d6c:	ad a3       	std	Y+37, r26	; 0x25
    1d6e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d70:	6b a1       	ldd	r22, Y+35	; 0x23
    1d72:	7c a1       	ldd	r23, Y+36	; 0x24
    1d74:	8d a1       	ldd	r24, Y+37	; 0x25
    1d76:	9e a1       	ldd	r25, Y+38	; 0x26
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e8       	ldi	r20, 0x80	; 128
    1d7e:	5f e3       	ldi	r21, 0x3F	; 63
    1d80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d84:	88 23       	and	r24, r24
    1d86:	2c f4       	brge	.+10     	; 0x1d92 <Start_APP+0x54a>
		__ticks = 1;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	9a a3       	std	Y+34, r25	; 0x22
    1d8e:	89 a3       	std	Y+33, r24	; 0x21
    1d90:	3f c0       	rjmp	.+126    	; 0x1e10 <Start_APP+0x5c8>
	else if (__tmp > 65535)
    1d92:	6b a1       	ldd	r22, Y+35	; 0x23
    1d94:	7c a1       	ldd	r23, Y+36	; 0x24
    1d96:	8d a1       	ldd	r24, Y+37	; 0x25
    1d98:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	3f ef       	ldi	r19, 0xFF	; 255
    1d9e:	4f e7       	ldi	r20, 0x7F	; 127
    1da0:	57 e4       	ldi	r21, 0x47	; 71
    1da2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	4c f5       	brge	.+82     	; 0x1dfc <Start_APP+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1daa:	6f a1       	ldd	r22, Y+39	; 0x27
    1dac:	78 a5       	ldd	r23, Y+40	; 0x28
    1dae:	89 a5       	ldd	r24, Y+41	; 0x29
    1db0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e2       	ldi	r20, 0x20	; 32
    1db8:	51 e4       	ldi	r21, 0x41	; 65
    1dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	bc 01       	movw	r22, r24
    1dc4:	cd 01       	movw	r24, r26
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9a a3       	std	Y+34, r25	; 0x22
    1dd0:	89 a3       	std	Y+33, r24	; 0x21
    1dd2:	0f c0       	rjmp	.+30     	; 0x1df2 <Start_APP+0x5aa>
    1dd4:	88 ec       	ldi	r24, 0xC8	; 200
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	98 a3       	std	Y+32, r25	; 0x20
    1dda:	8f 8f       	std	Y+31, r24	; 0x1f
    1ddc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dde:	98 a1       	ldd	r25, Y+32	; 0x20
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <Start_APP+0x598>
    1de4:	98 a3       	std	Y+32, r25	; 0x20
    1de6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dea:	9a a1       	ldd	r25, Y+34	; 0x22
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	9a a3       	std	Y+34, r25	; 0x22
    1df0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	89 a1       	ldd	r24, Y+33	; 0x21
    1df4:	9a a1       	ldd	r25, Y+34	; 0x22
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	69 f7       	brne	.-38     	; 0x1dd4 <Start_APP+0x58c>
    1dfa:	14 c0       	rjmp	.+40     	; 0x1e24 <Start_APP+0x5dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfc:	6b a1       	ldd	r22, Y+35	; 0x23
    1dfe:	7c a1       	ldd	r23, Y+36	; 0x24
    1e00:	8d a1       	ldd	r24, Y+37	; 0x25
    1e02:	9e a1       	ldd	r25, Y+38	; 0x26
    1e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	9a a3       	std	Y+34, r25	; 0x22
    1e0e:	89 a3       	std	Y+33, r24	; 0x21
    1e10:	89 a1       	ldd	r24, Y+33	; 0x21
    1e12:	9a a1       	ldd	r25, Y+34	; 0x22
    1e14:	9e 8f       	std	Y+30, r25	; 0x1e
    1e16:	8d 8f       	std	Y+29, r24	; 0x1d
    1e18:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <Start_APP+0x5d4>
    1e20:	9e 8f       	std	Y+30, r25	; 0x1e
    1e22:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_displayString("matched :)");
		/*Send command to Store the password in the EEPROM*/
		UART_sendByte(NEW_PASSWORD);
		_delay_ms(50);
		/*Send the new password to store it*/
		for (i = 0; i < PASS_LENGTH; i++) {
    1e24:	de 01       	movw	r26, r28
    1e26:	ab 5a       	subi	r26, 0xAB	; 171
    1e28:	bf 4f       	sbci	r27, 0xFF	; 255
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	eb 5a       	subi	r30, 0xAB	; 171
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	8f 5f       	subi	r24, 0xFF	; 255
    1e34:	8c 93       	st	X, r24
    1e36:	fe 01       	movw	r30, r28
    1e38:	eb 5a       	subi	r30, 0xAB	; 171
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	80 81       	ld	r24, Z
    1e3e:	85 30       	cpi	r24, 0x05	; 5
    1e40:	08 f4       	brcc	.+2      	; 0x1e44 <Start_APP+0x5fc>
    1e42:	6f cf       	rjmp	.-290    	; 0x1d22 <Start_APP+0x4da>
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	a6 e9       	ldi	r26, 0x96	; 150
    1e4a:	b3 e4       	ldi	r27, 0x43	; 67
    1e4c:	89 8f       	std	Y+25, r24	; 0x19
    1e4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e50:	ab 8f       	std	Y+27, r26	; 0x1b
    1e52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e54:	69 8d       	ldd	r22, Y+25	; 0x19
    1e56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	4a ef       	ldi	r20, 0xFA	; 250
    1e62:	54 e4       	ldi	r21, 0x44	; 68
    1e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	8d 8b       	std	Y+21, r24	; 0x15
    1e6e:	9e 8b       	std	Y+22, r25	; 0x16
    1e70:	af 8b       	std	Y+23, r26	; 0x17
    1e72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e74:	6d 89       	ldd	r22, Y+21	; 0x15
    1e76:	7e 89       	ldd	r23, Y+22	; 0x16
    1e78:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e8       	ldi	r20, 0x80	; 128
    1e82:	5f e3       	ldi	r21, 0x3F	; 63
    1e84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e88:	88 23       	and	r24, r24
    1e8a:	2c f4       	brge	.+10     	; 0x1e96 <Start_APP+0x64e>
		__ticks = 1;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9c 8b       	std	Y+20, r25	; 0x14
    1e92:	8b 8b       	std	Y+19, r24	; 0x13
    1e94:	3f c0       	rjmp	.+126    	; 0x1f14 <Start_APP+0x6cc>
	else if (__tmp > 65535)
    1e96:	6d 89       	ldd	r22, Y+21	; 0x15
    1e98:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	3f ef       	ldi	r19, 0xFF	; 255
    1ea2:	4f e7       	ldi	r20, 0x7F	; 127
    1ea4:	57 e4       	ldi	r21, 0x47	; 71
    1ea6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eaa:	18 16       	cp	r1, r24
    1eac:	4c f5       	brge	.+82     	; 0x1f00 <Start_APP+0x6b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eae:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e2       	ldi	r20, 0x20	; 32
    1ebc:	51 e4       	ldi	r21, 0x41	; 65
    1ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	bc 01       	movw	r22, r24
    1ec8:	cd 01       	movw	r24, r26
    1eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9c 8b       	std	Y+20, r25	; 0x14
    1ed4:	8b 8b       	std	Y+19, r24	; 0x13
    1ed6:	0f c0       	rjmp	.+30     	; 0x1ef6 <Start_APP+0x6ae>
    1ed8:	88 ec       	ldi	r24, 0xC8	; 200
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	9a 8b       	std	Y+18, r25	; 0x12
    1ede:	89 8b       	std	Y+17, r24	; 0x11
    1ee0:	89 89       	ldd	r24, Y+17	; 0x11
    1ee2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	f1 f7       	brne	.-4      	; 0x1ee4 <Start_APP+0x69c>
    1ee8:	9a 8b       	std	Y+18, r25	; 0x12
    1eea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eec:	8b 89       	ldd	r24, Y+19	; 0x13
    1eee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	9c 8b       	std	Y+20, r25	; 0x14
    1ef4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	69 f7       	brne	.-38     	; 0x1ed8 <Start_APP+0x690>
    1efe:	91 c0       	rjmp	.+290    	; 0x2022 <Start_APP+0x7da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f00:	6d 89       	ldd	r22, Y+21	; 0x15
    1f02:	7e 89       	ldd	r23, Y+22	; 0x16
    1f04:	8f 89       	ldd	r24, Y+23	; 0x17
    1f06:	98 8d       	ldd	r25, Y+24	; 0x18
    1f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	9c 8b       	std	Y+20, r25	; 0x14
    1f12:	8b 8b       	std	Y+19, r24	; 0x13
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	98 8b       	std	Y+16, r25	; 0x10
    1f1a:	8f 87       	std	Y+15, r24	; 0x0f
    1f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f1e:	98 89       	ldd	r25, Y+16	; 0x10
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <Start_APP+0x6d8>
    1f24:	98 8b       	std	Y+16, r25	; 0x10
    1f26:	8f 87       	std	Y+15, r24	; 0x0f
    1f28:	7c c0       	rjmp	.+248    	; 0x2022 <Start_APP+0x7da>
		_delay_ms(300);
	}
	else{
		/*the password and the confirmed password are not matched*/
		/*Clear the LCD*/
		LCD_clearScreen();
    1f2a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		/* Start from first Pixel */
		LCD_goToRowColumn(0,0);
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
		LCD_displayString("not matched!!");
    1f36:	88 e9       	ldi	r24, 0x98	; 152
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a6 e9       	ldi	r26, 0x96	; 150
    1f44:	b3 e4       	ldi	r27, 0x43	; 67
    1f46:	8b 87       	std	Y+11, r24	; 0x0b
    1f48:	9c 87       	std	Y+12, r25	; 0x0c
    1f4a:	ad 87       	std	Y+13, r26	; 0x0d
    1f4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	4a ef       	ldi	r20, 0xFA	; 250
    1f5c:	54 e4       	ldi	r21, 0x44	; 68
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	8f 83       	std	Y+7, r24	; 0x07
    1f68:	98 87       	std	Y+8, r25	; 0x08
    1f6a:	a9 87       	std	Y+9, r26	; 0x09
    1f6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f70:	78 85       	ldd	r23, Y+8	; 0x08
    1f72:	89 85       	ldd	r24, Y+9	; 0x09
    1f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <Start_APP+0x748>
		__ticks = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	3f c0       	rjmp	.+126    	; 0x200e <Start_APP+0x7c6>
	else if (__tmp > 65535)
    1f90:	6f 81       	ldd	r22, Y+7	; 0x07
    1f92:	78 85       	ldd	r23, Y+8	; 0x08
    1f94:	89 85       	ldd	r24, Y+9	; 0x09
    1f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	4f e7       	ldi	r20, 0x7F	; 127
    1f9e:	57 e4       	ldi	r21, 0x47	; 71
    1fa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	4c f5       	brge	.+82     	; 0x1ffa <Start_APP+0x7b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <Start_APP+0x7a8>
    1fd2:	88 ec       	ldi	r24, 0xC8	; 200
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9c 83       	std	Y+4, r25	; 0x04
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <Start_APP+0x796>
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <Start_APP+0x78a>
    1ff8:	14 c0       	rjmp	.+40     	; 0x2022 <Start_APP+0x7da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffc:	78 85       	ldd	r23, Y+8	; 0x08
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <Start_APP+0x7d2>
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
	}


}
    2022:	c0 5a       	subi	r28, 0xA0	; 160
    2024:	df 4f       	sbci	r29, 0xFF	; 255
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	1f 91       	pop	r17
    2036:	0f 91       	pop	r16
    2038:	08 95       	ret

0000203a <Main_APP>:

void Main_APP(){
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	a0 97       	sbiw	r28, 0x20	; 32
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
	uint8 message;
	uint8 choice;
	/*Clear the LCD screen*/
	LCD_clearScreen();
    204e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	/*Display the options*/
	LCD_displayStringRowColumn(0,0,"1:Change Password");
    2052:	26 ea       	ldi	r18, 0xA6	; 166
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	a9 01       	movw	r20, r18
    205c:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"2:Open Door");
    2060:	28 eb       	ldi	r18, 0xB8	; 184
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	a9 01       	movw	r20, r18
    206a:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>

	/*get the user choice */
	do{
	choice = KeyPad_getPressedKey();
    206e:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2072:	8d 8f       	std	Y+29, r24	; 0x1d
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a8 ec       	ldi	r26, 0xC8	; 200
    207a:	b3 e4       	ldi	r27, 0x43	; 67
    207c:	89 8f       	std	Y+25, r24	; 0x19
    207e:	9a 8f       	std	Y+26, r25	; 0x1a
    2080:	ab 8f       	std	Y+27, r26	; 0x1b
    2082:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2084:	69 8d       	ldd	r22, Y+25	; 0x19
    2086:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2088:	8b 8d       	ldd	r24, Y+27	; 0x1b
    208a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a ef       	ldi	r20, 0xFA	; 250
    2092:	54 e4       	ldi	r21, 0x44	; 68
    2094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	8d 8b       	std	Y+21, r24	; 0x15
    209e:	9e 8b       	std	Y+22, r25	; 0x16
    20a0:	af 8b       	std	Y+23, r26	; 0x17
    20a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20a4:	6d 89       	ldd	r22, Y+21	; 0x15
    20a6:	7e 89       	ldd	r23, Y+22	; 0x16
    20a8:	8f 89       	ldd	r24, Y+23	; 0x17
    20aa:	98 8d       	ldd	r25, Y+24	; 0x18
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e8       	ldi	r20, 0x80	; 128
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b8:	88 23       	and	r24, r24
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <Main_APP+0x8c>
		__ticks = 1;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9c 8b       	std	Y+20, r25	; 0x14
    20c2:	8b 8b       	std	Y+19, r24	; 0x13
    20c4:	3f c0       	rjmp	.+126    	; 0x2144 <Main_APP+0x10a>
	else if (__tmp > 65535)
    20c6:	6d 89       	ldd	r22, Y+21	; 0x15
    20c8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ca:	8f 89       	ldd	r24, Y+23	; 0x17
    20cc:	98 8d       	ldd	r25, Y+24	; 0x18
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	3f ef       	ldi	r19, 0xFF	; 255
    20d2:	4f e7       	ldi	r20, 0x7F	; 127
    20d4:	57 e4       	ldi	r21, 0x47	; 71
    20d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20da:	18 16       	cp	r1, r24
    20dc:	4c f5       	brge	.+82     	; 0x2130 <Main_APP+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20de:	69 8d       	ldd	r22, Y+25	; 0x19
    20e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e2       	ldi	r20, 0x20	; 32
    20ec:	51 e4       	ldi	r21, 0x41	; 65
    20ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9c 8b       	std	Y+20, r25	; 0x14
    2104:	8b 8b       	std	Y+19, r24	; 0x13
    2106:	0f c0       	rjmp	.+30     	; 0x2126 <Main_APP+0xec>
    2108:	88 ec       	ldi	r24, 0xC8	; 200
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	9a 8b       	std	Y+18, r25	; 0x12
    210e:	89 8b       	std	Y+17, r24	; 0x11
    2110:	89 89       	ldd	r24, Y+17	; 0x11
    2112:	9a 89       	ldd	r25, Y+18	; 0x12
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <Main_APP+0xda>
    2118:	9a 8b       	std	Y+18, r25	; 0x12
    211a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211c:	8b 89       	ldd	r24, Y+19	; 0x13
    211e:	9c 89       	ldd	r25, Y+20	; 0x14
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	9c 8b       	std	Y+20, r25	; 0x14
    2124:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2126:	8b 89       	ldd	r24, Y+19	; 0x13
    2128:	9c 89       	ldd	r25, Y+20	; 0x14
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	69 f7       	brne	.-38     	; 0x2108 <Main_APP+0xce>
    212e:	14 c0       	rjmp	.+40     	; 0x2158 <Main_APP+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2130:	6d 89       	ldd	r22, Y+21	; 0x15
    2132:	7e 89       	ldd	r23, Y+22	; 0x16
    2134:	8f 89       	ldd	r24, Y+23	; 0x17
    2136:	98 8d       	ldd	r25, Y+24	; 0x18
    2138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	9c 8b       	std	Y+20, r25	; 0x14
    2142:	8b 8b       	std	Y+19, r24	; 0x13
    2144:	8b 89       	ldd	r24, Y+19	; 0x13
    2146:	9c 89       	ldd	r25, Y+20	; 0x14
    2148:	98 8b       	std	Y+16, r25	; 0x10
    214a:	8f 87       	std	Y+15, r24	; 0x0f
    214c:	8f 85       	ldd	r24, Y+15	; 0x0f
    214e:	98 89       	ldd	r25, Y+16	; 0x10
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <Main_APP+0x116>
    2154:	98 8b       	std	Y+16, r25	; 0x10
    2156:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(400);
	}while(!(choice == 1 || choice == 2));
    2158:	8d 8d       	ldd	r24, Y+29	; 0x1d
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	21 f0       	breq	.+8      	; 0x2166 <Main_APP+0x12c>
    215e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2160:	82 30       	cpi	r24, 0x02	; 2
    2162:	09 f0       	breq	.+2      	; 0x2166 <Main_APP+0x12c>
    2164:	84 cf       	rjmp	.-248    	; 0x206e <Main_APP+0x34>
	/*Send to MC2 command to check the password*/
	UART_sendByte(CHECK_PASSWORD);
    2166:	85 e0       	ldi	r24, 0x05	; 5
    2168:	0e 94 ad 1c 	call	0x395a	; 0x395a <UART_sendByte>
	/*Enter password and send it to MC2*/
	Enter_Pass();
    216c:	0e 94 7f 11 	call	0x22fe	; 0x22fe <Enter_Pass>
	/*Recieve from MC2 if the password is correct or not*/
	message = UART_recieveByte();
    2170:	0e 94 c4 1c 	call	0x3988	; 0x3988 <UART_recieveByte>
    2174:	8e 8f       	std	Y+30, r24	; 0x1e

	if(message == CORRECT_PASSWORD){
    2176:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2178:	83 30       	cpi	r24, 0x03	; 3
    217a:	31 f5       	brne	.+76     	; 0x21c8 <Main_APP+0x18e>
		/*password is correct*/
		switch(choice){
    217c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	38 a3       	std	Y+32, r19	; 0x20
    2184:	2f 8f       	std	Y+31, r18	; 0x1f
    2186:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2188:	98 a1       	ldd	r25, Y+32	; 0x20
    218a:	81 30       	cpi	r24, 0x01	; 1
    218c:	91 05       	cpc	r25, r1
    218e:	31 f0       	breq	.+12     	; 0x219c <Main_APP+0x162>
    2190:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2192:	38 a1       	ldd	r19, Y+32	; 0x20
    2194:	22 30       	cpi	r18, 0x02	; 2
    2196:	31 05       	cpc	r19, r1
    2198:	21 f0       	breq	.+8      	; 0x21a2 <Main_APP+0x168>
    219a:	a8 c0       	rjmp	.+336    	; 0x22ec <Main_APP+0x2b2>
		case 1:
			/*change the password with new one*/
			Change_Pass();
    219c:	0e 94 2a 13 	call	0x2654	; 0x2654 <Change_Pass>
    21a0:	a5 c0       	rjmp	.+330    	; 0x22ec <Main_APP+0x2b2>
			break;
		case 2:
			/*Open Door*/
			/*Send to MC2 to open the door*/
			UART_sendByte(OPEN_DOOR);
    21a2:	82 e0       	ldi	r24, 0x02	; 2
    21a4:	0e 94 ad 1c 	call	0x395a	; 0x395a <UART_sendByte>
			/*Reset the second counter*/
			g_timer1_SecFlag = 0;
    21a8:	10 92 45 01 	sts	0x0145, r1
			/*Clear the LCD screen*/
			LCD_clearScreen();
    21ac:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"CORRECT PASSWORD");
    21b0:	24 ec       	ldi	r18, 0xC4	; 196
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	a9 01       	movw	r20, r18
    21ba:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
			/*wait for 22 second*/
			while(g_timer1_SecFlag< 22){}
    21be:	80 91 45 01 	lds	r24, 0x0145
    21c2:	86 31       	cpi	r24, 0x16	; 22
    21c4:	e0 f3       	brcs	.-8      	; 0x21be <Main_APP+0x184>
    21c6:	92 c0       	rjmp	.+292    	; 0x22ec <Main_APP+0x2b2>
			break;
		}
	}
	else if(message == WRONG_PASSWORD){
    21c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21ca:	84 30       	cpi	r24, 0x04	; 4
    21cc:	09 f0       	breq	.+2      	; 0x21d0 <Main_APP+0x196>
    21ce:	7c c0       	rjmp	.+248    	; 0x22c8 <Main_APP+0x28e>
		/*password was wrong*/
		/*Clear the LCD screen*/
		LCD_clearScreen();
    21d0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"WRONG PASSWORD");
    21d4:	25 ed       	ldi	r18, 0xD5	; 213
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	a9 01       	movw	r20, r18
    21de:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	aa ef       	ldi	r26, 0xFA	; 250
    21e8:	b3 e4       	ldi	r27, 0x43	; 67
    21ea:	8b 87       	std	Y+11, r24	; 0x0b
    21ec:	9c 87       	std	Y+12, r25	; 0x0c
    21ee:	ad 87       	std	Y+13, r26	; 0x0d
    21f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	4a ef       	ldi	r20, 0xFA	; 250
    2200:	54 e4       	ldi	r21, 0x44	; 68
    2202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	8f 83       	std	Y+7, r24	; 0x07
    220c:	98 87       	std	Y+8, r25	; 0x08
    220e:	a9 87       	std	Y+9, r26	; 0x09
    2210:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2212:	6f 81       	ldd	r22, Y+7	; 0x07
    2214:	78 85       	ldd	r23, Y+8	; 0x08
    2216:	89 85       	ldd	r24, Y+9	; 0x09
    2218:	9a 85       	ldd	r25, Y+10	; 0x0a
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e8       	ldi	r20, 0x80	; 128
    2220:	5f e3       	ldi	r21, 0x3F	; 63
    2222:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2226:	88 23       	and	r24, r24
    2228:	2c f4       	brge	.+10     	; 0x2234 <Main_APP+0x1fa>
		__ticks = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9e 83       	std	Y+6, r25	; 0x06
    2230:	8d 83       	std	Y+5, r24	; 0x05
    2232:	3f c0       	rjmp	.+126    	; 0x22b2 <Main_APP+0x278>
	else if (__tmp > 65535)
    2234:	6f 81       	ldd	r22, Y+7	; 0x07
    2236:	78 85       	ldd	r23, Y+8	; 0x08
    2238:	89 85       	ldd	r24, Y+9	; 0x09
    223a:	9a 85       	ldd	r25, Y+10	; 0x0a
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	3f ef       	ldi	r19, 0xFF	; 255
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	57 e4       	ldi	r21, 0x47	; 71
    2244:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	4c f5       	brge	.+82     	; 0x229e <Main_APP+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	6b 85       	ldd	r22, Y+11	; 0x0b
    224e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2250:	8d 85       	ldd	r24, Y+13	; 0x0d
    2252:	9e 85       	ldd	r25, Y+14	; 0x0e
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e2       	ldi	r20, 0x20	; 32
    225a:	51 e4       	ldi	r21, 0x41	; 65
    225c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
    2274:	0f c0       	rjmp	.+30     	; 0x2294 <Main_APP+0x25a>
    2276:	88 ec       	ldi	r24, 0xC8	; 200
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9c 83       	std	Y+4, r25	; 0x04
    227c:	8b 83       	std	Y+3, r24	; 0x03
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <Main_APP+0x248>
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	69 f7       	brne	.-38     	; 0x2276 <Main_APP+0x23c>
    229c:	27 c0       	rjmp	.+78     	; 0x22ec <Main_APP+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	6f 81       	ldd	r22, Y+7	; 0x07
    22a0:	78 85       	ldd	r23, Y+8	; 0x08
    22a2:	89 85       	ldd	r24, Y+9	; 0x09
    22a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	9a 83       	std	Y+2, r25	; 0x02
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	9a 81       	ldd	r25, Y+2	; 0x02
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <Main_APP+0x284>
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	12 c0       	rjmp	.+36     	; 0x22ec <Main_APP+0x2b2>
		_delay_ms(500);
	}
	else if(message == PASSWORD_WRONG_3_TIMES){
    22c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22ca:	87 30       	cpi	r24, 0x07	; 7
    22cc:	79 f4       	brne	.+30     	; 0x22ec <Main_APP+0x2b2>
		/*password was wrong 3 times in row*/
		/*Reset the second counter*/
		g_timer1_SecFlag = 0;
    22ce:	10 92 45 01 	sts	0x0145, r1
		/*Clear the LCD screen*/
		LCD_clearScreen();
    22d2:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"X--X THIEF X--X");
    22d6:	24 ee       	ldi	r18, 0xE4	; 228
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	60 e0       	ldi	r22, 0x00	; 0
    22de:	a9 01       	movw	r20, r18
    22e0:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
		/*wait for 10 second*/
		while(g_timer1_SecFlag< 10){}
    22e4:	80 91 45 01 	lds	r24, 0x0145
    22e8:	8a 30       	cpi	r24, 0x0A	; 10
    22ea:	e0 f3       	brcs	.-8      	; 0x22e4 <Main_APP+0x2aa>
	}
}
    22ec:	a0 96       	adiw	r28, 0x20	; 32
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <Enter_Pass>:

void Enter_Pass(){
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	e1 97       	sbiw	r28, 0x31	; 49
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	uint8 i;
	uint8 pass[PASS_LENGTH];

	/*Clear the LCD screen*/
	LCD_clearScreen();
    2312:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	/* Start from first Pixel */
	LCD_goToRowColumn(0,0);
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	60 e0       	ldi	r22, 0x00	; 0
    231a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	LCD_displayString("ENTER password");
    231e:	8b e6       	ldi	r24, 0x6B	; 107
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	/* Start from second row -  first Pixel */
	LCD_goToRowColumn(1,0);
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>

	/* Get the password from the user*/
	for (i = 0; i < PASS_LENGTH; i++){
    232e:	1b a6       	std	Y+43, r1	; 0x2b
    2330:	8c c0       	rjmp	.+280    	; 0x244a <Enter_Pass+0x14c>
		/*Get the pressed key from keypad*/
		key = KeyPad_getPressedKey();
    2332:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2336:	8c a7       	std	Y+44, r24	; 0x2c
		if ((key >= 0) && (key <= 9))
    2338:	8c a5       	ldd	r24, Y+44	; 0x2c
    233a:	8a 30       	cpi	r24, 0x0A	; 10
    233c:	88 f4       	brcc	.+34     	; 0x2360 <Enter_Pass+0x62>
		{
			/*Save the key in password array*/
			pass[i] = key;
    233e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	ce 01       	movw	r24, r28
    2346:	8d 96       	adiw	r24, 0x2d	; 45
    2348:	fc 01       	movw	r30, r24
    234a:	e2 0f       	add	r30, r18
    234c:	f3 1f       	adc	r31, r19
    234e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2350:	80 83       	st	Z, r24
			LCD_displayStringRowColumn(1,i,"*");
    2352:	2a e7       	ldi	r18, 0x7A	; 122
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	6b a5       	ldd	r22, Y+43	; 0x2b
    235a:	a9 01       	movw	r20, r18
    235c:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	aa ef       	ldi	r26, 0xFA	; 250
    2366:	b3 e4       	ldi	r27, 0x43	; 67
    2368:	8f a3       	std	Y+39, r24	; 0x27
    236a:	98 a7       	std	Y+40, r25	; 0x28
    236c:	a9 a7       	std	Y+41, r26	; 0x29
    236e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2370:	6f a1       	ldd	r22, Y+39	; 0x27
    2372:	78 a5       	ldd	r23, Y+40	; 0x28
    2374:	89 a5       	ldd	r24, Y+41	; 0x29
    2376:	9a a5       	ldd	r25, Y+42	; 0x2a
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a ef       	ldi	r20, 0xFA	; 250
    237e:	54 e4       	ldi	r21, 0x44	; 68
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	8b a3       	std	Y+35, r24	; 0x23
    238a:	9c a3       	std	Y+36, r25	; 0x24
    238c:	ad a3       	std	Y+37, r26	; 0x25
    238e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2390:	6b a1       	ldd	r22, Y+35	; 0x23
    2392:	7c a1       	ldd	r23, Y+36	; 0x24
    2394:	8d a1       	ldd	r24, Y+37	; 0x25
    2396:	9e a1       	ldd	r25, Y+38	; 0x26
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e8       	ldi	r20, 0x80	; 128
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a4:	88 23       	and	r24, r24
    23a6:	2c f4       	brge	.+10     	; 0x23b2 <Enter_Pass+0xb4>
		__ticks = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9a a3       	std	Y+34, r25	; 0x22
    23ae:	89 a3       	std	Y+33, r24	; 0x21
    23b0:	3f c0       	rjmp	.+126    	; 0x2430 <Enter_Pass+0x132>
	else if (__tmp > 65535)
    23b2:	6b a1       	ldd	r22, Y+35	; 0x23
    23b4:	7c a1       	ldd	r23, Y+36	; 0x24
    23b6:	8d a1       	ldd	r24, Y+37	; 0x25
    23b8:	9e a1       	ldd	r25, Y+38	; 0x26
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	3f ef       	ldi	r19, 0xFF	; 255
    23be:	4f e7       	ldi	r20, 0x7F	; 127
    23c0:	57 e4       	ldi	r21, 0x47	; 71
    23c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c6:	18 16       	cp	r1, r24
    23c8:	4c f5       	brge	.+82     	; 0x241c <Enter_Pass+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ca:	6f a1       	ldd	r22, Y+39	; 0x27
    23cc:	78 a5       	ldd	r23, Y+40	; 0x28
    23ce:	89 a5       	ldd	r24, Y+41	; 0x29
    23d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e2       	ldi	r20, 0x20	; 32
    23d8:	51 e4       	ldi	r21, 0x41	; 65
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9a a3       	std	Y+34, r25	; 0x22
    23f0:	89 a3       	std	Y+33, r24	; 0x21
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <Enter_Pass+0x114>
    23f4:	88 ec       	ldi	r24, 0xC8	; 200
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	98 a3       	std	Y+32, r25	; 0x20
    23fa:	8f 8f       	std	Y+31, r24	; 0x1f
    23fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23fe:	98 a1       	ldd	r25, Y+32	; 0x20
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <Enter_Pass+0x102>
    2404:	98 a3       	std	Y+32, r25	; 0x20
    2406:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2408:	89 a1       	ldd	r24, Y+33	; 0x21
    240a:	9a a1       	ldd	r25, Y+34	; 0x22
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	9a a3       	std	Y+34, r25	; 0x22
    2410:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2412:	89 a1       	ldd	r24, Y+33	; 0x21
    2414:	9a a1       	ldd	r25, Y+34	; 0x22
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	69 f7       	brne	.-38     	; 0x23f4 <Enter_Pass+0xf6>
    241a:	14 c0       	rjmp	.+40     	; 0x2444 <Enter_Pass+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241c:	6b a1       	ldd	r22, Y+35	; 0x23
    241e:	7c a1       	ldd	r23, Y+36	; 0x24
    2420:	8d a1       	ldd	r24, Y+37	; 0x25
    2422:	9e a1       	ldd	r25, Y+38	; 0x26
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9a a3       	std	Y+34, r25	; 0x22
    242e:	89 a3       	std	Y+33, r24	; 0x21
    2430:	89 a1       	ldd	r24, Y+33	; 0x21
    2432:	9a a1       	ldd	r25, Y+34	; 0x22
    2434:	9e 8f       	std	Y+30, r25	; 0x1e
    2436:	8d 8f       	std	Y+29, r24	; 0x1d
    2438:	8d 8d       	ldd	r24, Y+29	; 0x1d
    243a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <Enter_Pass+0x13e>
    2440:	9e 8f       	std	Y+30, r25	; 0x1e
    2442:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_displayString("ENTER password");
	/* Start from second row -  first Pixel */
	LCD_goToRowColumn(1,0);

	/* Get the password from the user*/
	for (i = 0; i < PASS_LENGTH; i++){
    2444:	8b a5       	ldd	r24, Y+43	; 0x2b
    2446:	8f 5f       	subi	r24, 0xFF	; 255
    2448:	8b a7       	std	Y+43, r24	; 0x2b
    244a:	8b a5       	ldd	r24, Y+43	; 0x2b
    244c:	85 30       	cpi	r24, 0x05	; 5
    244e:	08 f4       	brcc	.+2      	; 0x2452 <Enter_Pass+0x154>
    2450:	70 cf       	rjmp	.-288    	; 0x2332 <Enter_Pass+0x34>
		}
		_delay_ms(500);
	}

	/*Send password to MC2*/
	for (i = 0; i < PASS_LENGTH; i++) {
    2452:	1b a6       	std	Y+43, r1	; 0x2b
    2454:	80 c0       	rjmp	.+256    	; 0x2556 <Enter_Pass+0x258>
		UART_sendByte(pass[i]);
    2456:	8b a5       	ldd	r24, Y+43	; 0x2b
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	ce 01       	movw	r24, r28
    245e:	8d 96       	adiw	r24, 0x2d	; 45
    2460:	fc 01       	movw	r30, r24
    2462:	e2 0f       	add	r30, r18
    2464:	f3 1f       	adc	r31, r19
    2466:	80 81       	ld	r24, Z
    2468:	0e 94 ad 1c 	call	0x395a	; 0x395a <UART_sendByte>
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	a8 ec       	ldi	r26, 0xC8	; 200
    2472:	b2 e4       	ldi	r27, 0x42	; 66
    2474:	89 8f       	std	Y+25, r24	; 0x19
    2476:	9a 8f       	std	Y+26, r25	; 0x1a
    2478:	ab 8f       	std	Y+27, r26	; 0x1b
    247a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    247c:	69 8d       	ldd	r22, Y+25	; 0x19
    247e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2480:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2482:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	4a ef       	ldi	r20, 0xFA	; 250
    248a:	54 e4       	ldi	r21, 0x44	; 68
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	8d 8b       	std	Y+21, r24	; 0x15
    2496:	9e 8b       	std	Y+22, r25	; 0x16
    2498:	af 8b       	std	Y+23, r26	; 0x17
    249a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    249c:	6d 89       	ldd	r22, Y+21	; 0x15
    249e:	7e 89       	ldd	r23, Y+22	; 0x16
    24a0:	8f 89       	ldd	r24, Y+23	; 0x17
    24a2:	98 8d       	ldd	r25, Y+24	; 0x18
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e8       	ldi	r20, 0x80	; 128
    24aa:	5f e3       	ldi	r21, 0x3F	; 63
    24ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24b0:	88 23       	and	r24, r24
    24b2:	2c f4       	brge	.+10     	; 0x24be <Enter_Pass+0x1c0>
		__ticks = 1;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9c 8b       	std	Y+20, r25	; 0x14
    24ba:	8b 8b       	std	Y+19, r24	; 0x13
    24bc:	3f c0       	rjmp	.+126    	; 0x253c <Enter_Pass+0x23e>
	else if (__tmp > 65535)
    24be:	6d 89       	ldd	r22, Y+21	; 0x15
    24c0:	7e 89       	ldd	r23, Y+22	; 0x16
    24c2:	8f 89       	ldd	r24, Y+23	; 0x17
    24c4:	98 8d       	ldd	r25, Y+24	; 0x18
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	4f e7       	ldi	r20, 0x7F	; 127
    24cc:	57 e4       	ldi	r21, 0x47	; 71
    24ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24d2:	18 16       	cp	r1, r24
    24d4:	4c f5       	brge	.+82     	; 0x2528 <Enter_Pass+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d6:	69 8d       	ldd	r22, Y+25	; 0x19
    24d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e2       	ldi	r20, 0x20	; 32
    24e4:	51 e4       	ldi	r21, 0x41	; 65
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9c 8b       	std	Y+20, r25	; 0x14
    24fc:	8b 8b       	std	Y+19, r24	; 0x13
    24fe:	0f c0       	rjmp	.+30     	; 0x251e <Enter_Pass+0x220>
    2500:	88 ec       	ldi	r24, 0xC8	; 200
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	9a 8b       	std	Y+18, r25	; 0x12
    2506:	89 8b       	std	Y+17, r24	; 0x11
    2508:	89 89       	ldd	r24, Y+17	; 0x11
    250a:	9a 89       	ldd	r25, Y+18	; 0x12
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <Enter_Pass+0x20e>
    2510:	9a 8b       	std	Y+18, r25	; 0x12
    2512:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2514:	8b 89       	ldd	r24, Y+19	; 0x13
    2516:	9c 89       	ldd	r25, Y+20	; 0x14
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	9c 8b       	std	Y+20, r25	; 0x14
    251c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251e:	8b 89       	ldd	r24, Y+19	; 0x13
    2520:	9c 89       	ldd	r25, Y+20	; 0x14
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	69 f7       	brne	.-38     	; 0x2500 <Enter_Pass+0x202>
    2526:	14 c0       	rjmp	.+40     	; 0x2550 <Enter_Pass+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2528:	6d 89       	ldd	r22, Y+21	; 0x15
    252a:	7e 89       	ldd	r23, Y+22	; 0x16
    252c:	8f 89       	ldd	r24, Y+23	; 0x17
    252e:	98 8d       	ldd	r25, Y+24	; 0x18
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	9c 8b       	std	Y+20, r25	; 0x14
    253a:	8b 8b       	std	Y+19, r24	; 0x13
    253c:	8b 89       	ldd	r24, Y+19	; 0x13
    253e:	9c 89       	ldd	r25, Y+20	; 0x14
    2540:	98 8b       	std	Y+16, r25	; 0x10
    2542:	8f 87       	std	Y+15, r24	; 0x0f
    2544:	8f 85       	ldd	r24, Y+15	; 0x0f
    2546:	98 89       	ldd	r25, Y+16	; 0x10
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <Enter_Pass+0x24a>
    254c:	98 8b       	std	Y+16, r25	; 0x10
    254e:	8f 87       	std	Y+15, r24	; 0x0f
		}
		_delay_ms(500);
	}

	/*Send password to MC2*/
	for (i = 0; i < PASS_LENGTH; i++) {
    2550:	8b a5       	ldd	r24, Y+43	; 0x2b
    2552:	8f 5f       	subi	r24, 0xFF	; 255
    2554:	8b a7       	std	Y+43, r24	; 0x2b
    2556:	8b a5       	ldd	r24, Y+43	; 0x2b
    2558:	85 30       	cpi	r24, 0x05	; 5
    255a:	08 f4       	brcc	.+2      	; 0x255e <Enter_Pass+0x260>
    255c:	7c cf       	rjmp	.-264    	; 0x2456 <Enter_Pass+0x158>
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	a6 e9       	ldi	r26, 0x96	; 150
    2564:	b3 e4       	ldi	r27, 0x43	; 67
    2566:	8b 87       	std	Y+11, r24	; 0x0b
    2568:	9c 87       	std	Y+12, r25	; 0x0c
    256a:	ad 87       	std	Y+13, r26	; 0x0d
    256c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2570:	7c 85       	ldd	r23, Y+12	; 0x0c
    2572:	8d 85       	ldd	r24, Y+13	; 0x0d
    2574:	9e 85       	ldd	r25, Y+14	; 0x0e
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	4a ef       	ldi	r20, 0xFA	; 250
    257c:	54 e4       	ldi	r21, 0x44	; 68
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	8f 83       	std	Y+7, r24	; 0x07
    2588:	98 87       	std	Y+8, r25	; 0x08
    258a:	a9 87       	std	Y+9, r26	; 0x09
    258c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    258e:	6f 81       	ldd	r22, Y+7	; 0x07
    2590:	78 85       	ldd	r23, Y+8	; 0x08
    2592:	89 85       	ldd	r24, Y+9	; 0x09
    2594:	9a 85       	ldd	r25, Y+10	; 0x0a
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e8       	ldi	r20, 0x80	; 128
    259c:	5f e3       	ldi	r21, 0x3F	; 63
    259e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a2:	88 23       	and	r24, r24
    25a4:	2c f4       	brge	.+10     	; 0x25b0 <Enter_Pass+0x2b2>
		__ticks = 1;
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	3f c0       	rjmp	.+126    	; 0x262e <Enter_Pass+0x330>
	else if (__tmp > 65535)
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	3f ef       	ldi	r19, 0xFF	; 255
    25bc:	4f e7       	ldi	r20, 0x7F	; 127
    25be:	57 e4       	ldi	r21, 0x47	; 71
    25c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c4:	18 16       	cp	r1, r24
    25c6:	4c f5       	brge	.+82     	; 0x261a <Enter_Pass+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    25cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e2       	ldi	r20, 0x20	; 32
    25d6:	51 e4       	ldi	r21, 0x41	; 65
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9e 83       	std	Y+6, r25	; 0x06
    25ee:	8d 83       	std	Y+5, r24	; 0x05
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <Enter_Pass+0x312>
    25f2:	88 ec       	ldi	r24, 0xC8	; 200
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	9c 83       	std	Y+4, r25	; 0x04
    25f8:	8b 83       	std	Y+3, r24	; 0x03
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <Enter_Pass+0x300>
    2602:	9c 83       	std	Y+4, r25	; 0x04
    2604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2610:	8d 81       	ldd	r24, Y+5	; 0x05
    2612:	9e 81       	ldd	r25, Y+6	; 0x06
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	69 f7       	brne	.-38     	; 0x25f2 <Enter_Pass+0x2f4>
    2618:	14 c0       	rjmp	.+40     	; 0x2642 <Enter_Pass+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9e 83       	std	Y+6, r25	; 0x06
    262c:	8d 83       	std	Y+5, r24	; 0x05
    262e:	8d 81       	ldd	r24, Y+5	; 0x05
    2630:	9e 81       	ldd	r25, Y+6	; 0x06
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <Enter_Pass+0x33c>
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(pass[i]);
		_delay_ms(100);
	}
	_delay_ms(300);

}
    2642:	e1 96       	adiw	r28, 0x31	; 49
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	cd bf       	out	0x3d, r28	; 61
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <Change_Pass>:

void Change_Pass()
{
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	cf 56       	subi	r28, 0x6F	; 111
    2662:	d0 40       	sbci	r29, 0x00	; 0
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	uint8 i;
	uint8 check;

	/*Clear the LCD screen*/
	LCD_clearScreen();
    266e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	/* Start from first Pixel */
	LCD_goToRowColumn(0,0);
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	LCD_displayString("ENTER THE NEW");
    267a:	84 ef       	ldi	r24, 0xF4	; 244
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	/* Start from second row -  first Pixel */
	LCD_goToRowColumn(1,0);
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	LCD_displayString("   PASSWORD   ");
    268a:	82 e0       	ldi	r24, 0x02	; 2
    268c:	91 e0       	ldi	r25, 0x01	; 1
    268e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    2692:	fe 01       	movw	r30, r28
    2694:	e1 5a       	subi	r30, 0xA1	; 161
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	aa e7       	ldi	r26, 0x7A	; 122
    269e:	b4 e4       	ldi	r27, 0x44	; 68
    26a0:	80 83       	st	Z, r24
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	a2 83       	std	Z+2, r26	; 0x02
    26a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a8:	8e 01       	movw	r16, r28
    26aa:	05 5a       	subi	r16, 0xA5	; 165
    26ac:	1f 4f       	sbci	r17, 0xFF	; 255
    26ae:	fe 01       	movw	r30, r28
    26b0:	e1 5a       	subi	r30, 0xA1	; 161
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	4a ef       	ldi	r20, 0xFA	; 250
    26c2:	54 e4       	ldi	r21, 0x44	; 68
    26c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	f8 01       	movw	r30, r16
    26ce:	80 83       	st	Z, r24
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	a2 83       	std	Z+2, r26	; 0x02
    26d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26d6:	fe 01       	movw	r30, r28
    26d8:	e5 5a       	subi	r30, 0xA5	; 165
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e8       	ldi	r20, 0x80	; 128
    26ea:	5f e3       	ldi	r21, 0x3F	; 63
    26ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f0:	88 23       	and	r24, r24
    26f2:	44 f4       	brge	.+16     	; 0x2704 <Change_Pass+0xb0>
		__ticks = 1;
    26f4:	fe 01       	movw	r30, r28
    26f6:	e7 5a       	subi	r30, 0xA7	; 167
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
    2702:	64 c0       	rjmp	.+200    	; 0x27cc <Change_Pass+0x178>
	else if (__tmp > 65535)
    2704:	fe 01       	movw	r30, r28
    2706:	e5 5a       	subi	r30, 0xA5	; 165
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	3f ef       	ldi	r19, 0xFF	; 255
    2716:	4f e7       	ldi	r20, 0x7F	; 127
    2718:	57 e4       	ldi	r21, 0x47	; 71
    271a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271e:	18 16       	cp	r1, r24
    2720:	0c f0       	brlt	.+2      	; 0x2724 <Change_Pass+0xd0>
    2722:	43 c0       	rjmp	.+134    	; 0x27aa <Change_Pass+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2724:	fe 01       	movw	r30, r28
    2726:	e1 5a       	subi	r30, 0xA1	; 161
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e2       	ldi	r20, 0x20	; 32
    2738:	51 e4       	ldi	r21, 0x41	; 65
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	8e 01       	movw	r16, r28
    2744:	07 5a       	subi	r16, 0xA7	; 167
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	f8 01       	movw	r30, r16
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	80 83       	st	Z, r24
    275a:	1f c0       	rjmp	.+62     	; 0x279a <Change_Pass+0x146>
    275c:	fe 01       	movw	r30, r28
    275e:	e9 5a       	subi	r30, 0xA9	; 169
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	88 ec       	ldi	r24, 0xC8	; 200
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
    276a:	fe 01       	movw	r30, r28
    276c:	e9 5a       	subi	r30, 0xA9	; 169
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	80 81       	ld	r24, Z
    2772:	91 81       	ldd	r25, Z+1	; 0x01
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <Change_Pass+0x120>
    2778:	fe 01       	movw	r30, r28
    277a:	e9 5a       	subi	r30, 0xA9	; 169
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2782:	de 01       	movw	r26, r28
    2784:	a7 5a       	subi	r26, 0xA7	; 167
    2786:	bf 4f       	sbci	r27, 0xFF	; 255
    2788:	fe 01       	movw	r30, r28
    278a:	e7 5a       	subi	r30, 0xA7	; 167
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	11 96       	adiw	r26, 0x01	; 1
    2796:	9c 93       	st	X, r25
    2798:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279a:	fe 01       	movw	r30, r28
    279c:	e7 5a       	subi	r30, 0xA7	; 167
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 81       	ld	r24, Z
    27a2:	91 81       	ldd	r25, Z+1	; 0x01
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	d1 f6       	brne	.-76     	; 0x275c <Change_Pass+0x108>
    27a8:	27 c0       	rjmp	.+78     	; 0x27f8 <Change_Pass+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	8e 01       	movw	r16, r28
    27ac:	07 5a       	subi	r16, 0xA7	; 167
    27ae:	1f 4f       	sbci	r17, 0xFF	; 255
    27b0:	fe 01       	movw	r30, r28
    27b2:	e5 5a       	subi	r30, 0xA5	; 165
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	60 81       	ld	r22, Z
    27b8:	71 81       	ldd	r23, Z+1	; 0x01
    27ba:	82 81       	ldd	r24, Z+2	; 0x02
    27bc:	93 81       	ldd	r25, Z+3	; 0x03
    27be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	f8 01       	movw	r30, r16
    27c8:	91 83       	std	Z+1, r25	; 0x01
    27ca:	80 83       	st	Z, r24
    27cc:	de 01       	movw	r26, r28
    27ce:	ab 5a       	subi	r26, 0xAB	; 171
    27d0:	bf 4f       	sbci	r27, 0xFF	; 255
    27d2:	fe 01       	movw	r30, r28
    27d4:	e7 5a       	subi	r30, 0xA7	; 167
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	8d 93       	st	X+, r24
    27de:	9c 93       	st	X, r25
    27e0:	fe 01       	movw	r30, r28
    27e2:	eb 5a       	subi	r30, 0xAB	; 171
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	91 81       	ldd	r25, Z+1	; 0x01
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <Change_Pass+0x196>
    27ee:	fe 01       	movw	r30, r28
    27f0:	eb 5a       	subi	r30, 0xAB	; 171
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	91 83       	std	Z+1, r25	; 0x01
    27f6:	80 83       	st	Z, r24
	_delay_ms(1000);

	/*Clear the LCD screen*/
	LCD_clearScreen();
    27f8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	/* Start from first Pixel */
	LCD_goToRowColumn(0,0);
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	LCD_displayString("Enter Password");
    2804:	81 e1       	ldi	r24, 0x11	; 17
    2806:	91 e0       	ldi	r25, 0x01	; 1
    2808:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	/* Start from second row -  first Pixel */
	LCD_goToRowColumn(1,0);
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>

	/* Get the password from the user*/
	for (i = 0; i < PASS_LENGTH; i++){
    2814:	fe 01       	movw	r30, r28
    2816:	ec 59       	subi	r30, 0x9C	; 156
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	10 82       	st	Z, r1
    281c:	e3 c0       	rjmp	.+454    	; 0x29e4 <Change_Pass+0x390>
		/*Get the pressed key from keypad*/
		key = KeyPad_getPressedKey();
    281e:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2822:	fe 01       	movw	r30, r28
    2824:	eb 59       	subi	r30, 0x9B	; 155
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 83       	st	Z, r24
		if ((key >= 0) && (key <= 9))
    282a:	fe 01       	movw	r30, r28
    282c:	eb 59       	subi	r30, 0x9B	; 155
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	80 81       	ld	r24, Z
    2832:	8a 30       	cpi	r24, 0x0A	; 10
    2834:	d8 f4       	brcc	.+54     	; 0x286c <Change_Pass+0x218>
		{
			/*Save the key in password array*/
			pass[i] = key;
    2836:	fe 01       	movw	r30, r28
    2838:	ec 59       	subi	r30, 0x9C	; 156
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	80 81       	ld	r24, Z
    283e:	28 2f       	mov	r18, r24
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	ce 01       	movw	r24, r28
    2844:	8a 59       	subi	r24, 0x9A	; 154
    2846:	9f 4f       	sbci	r25, 0xFF	; 255
    2848:	dc 01       	movw	r26, r24
    284a:	a2 0f       	add	r26, r18
    284c:	b3 1f       	adc	r27, r19
    284e:	fe 01       	movw	r30, r28
    2850:	eb 59       	subi	r30, 0x9B	; 155
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 81       	ld	r24, Z
    2856:	8c 93       	st	X, r24
			LCD_displayStringRowColumn(1,i,"*");
    2858:	fe 01       	movw	r30, r28
    285a:	ec 59       	subi	r30, 0x9C	; 156
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	2a e7       	ldi	r18, 0x7A	; 122
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	60 81       	ld	r22, Z
    2866:	a9 01       	movw	r20, r18
    2868:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    286c:	fe 01       	movw	r30, r28
    286e:	ef 5a       	subi	r30, 0xAF	; 175
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	aa ef       	ldi	r26, 0xFA	; 250
    2878:	b3 e4       	ldi	r27, 0x43	; 67
    287a:	80 83       	st	Z, r24
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	a2 83       	std	Z+2, r26	; 0x02
    2880:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2882:	8e 01       	movw	r16, r28
    2884:	03 5b       	subi	r16, 0xB3	; 179
    2886:	1f 4f       	sbci	r17, 0xFF	; 255
    2888:	fe 01       	movw	r30, r28
    288a:	ef 5a       	subi	r30, 0xAF	; 175
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	60 81       	ld	r22, Z
    2890:	71 81       	ldd	r23, Z+1	; 0x01
    2892:	82 81       	ldd	r24, Z+2	; 0x02
    2894:	93 81       	ldd	r25, Z+3	; 0x03
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	4a ef       	ldi	r20, 0xFA	; 250
    289c:	54 e4       	ldi	r21, 0x44	; 68
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	f8 01       	movw	r30, r16
    28a8:	80 83       	st	Z, r24
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	a2 83       	std	Z+2, r26	; 0x02
    28ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28b0:	fe 01       	movw	r30, r28
    28b2:	e3 5b       	subi	r30, 0xB3	; 179
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	60 81       	ld	r22, Z
    28b8:	71 81       	ldd	r23, Z+1	; 0x01
    28ba:	82 81       	ldd	r24, Z+2	; 0x02
    28bc:	93 81       	ldd	r25, Z+3	; 0x03
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e8       	ldi	r20, 0x80	; 128
    28c4:	5f e3       	ldi	r21, 0x3F	; 63
    28c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ca:	88 23       	and	r24, r24
    28cc:	44 f4       	brge	.+16     	; 0x28de <Change_Pass+0x28a>
		__ticks = 1;
    28ce:	fe 01       	movw	r30, r28
    28d0:	e5 5b       	subi	r30, 0xB5	; 181
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
    28dc:	64 c0       	rjmp	.+200    	; 0x29a6 <Change_Pass+0x352>
	else if (__tmp > 65535)
    28de:	fe 01       	movw	r30, r28
    28e0:	e3 5b       	subi	r30, 0xB3	; 179
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	82 81       	ldd	r24, Z+2	; 0x02
    28ea:	93 81       	ldd	r25, Z+3	; 0x03
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	3f ef       	ldi	r19, 0xFF	; 255
    28f0:	4f e7       	ldi	r20, 0x7F	; 127
    28f2:	57 e4       	ldi	r21, 0x47	; 71
    28f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f8:	18 16       	cp	r1, r24
    28fa:	0c f0       	brlt	.+2      	; 0x28fe <Change_Pass+0x2aa>
    28fc:	43 c0       	rjmp	.+134    	; 0x2984 <Change_Pass+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fe:	fe 01       	movw	r30, r28
    2900:	ef 5a       	subi	r30, 0xAF	; 175
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	60 81       	ld	r22, Z
    2906:	71 81       	ldd	r23, Z+1	; 0x01
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e2       	ldi	r20, 0x20	; 32
    2912:	51 e4       	ldi	r21, 0x41	; 65
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	8e 01       	movw	r16, r28
    291e:	05 5b       	subi	r16, 0xB5	; 181
    2920:	1f 4f       	sbci	r17, 0xFF	; 255
    2922:	bc 01       	movw	r22, r24
    2924:	cd 01       	movw	r24, r26
    2926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	f8 01       	movw	r30, r16
    2930:	91 83       	std	Z+1, r25	; 0x01
    2932:	80 83       	st	Z, r24
    2934:	1f c0       	rjmp	.+62     	; 0x2974 <Change_Pass+0x320>
    2936:	fe 01       	movw	r30, r28
    2938:	e7 5b       	subi	r30, 0xB7	; 183
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	88 ec       	ldi	r24, 0xC8	; 200
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	80 83       	st	Z, r24
    2944:	fe 01       	movw	r30, r28
    2946:	e7 5b       	subi	r30, 0xB7	; 183
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	91 81       	ldd	r25, Z+1	; 0x01
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	f1 f7       	brne	.-4      	; 0x294e <Change_Pass+0x2fa>
    2952:	fe 01       	movw	r30, r28
    2954:	e7 5b       	subi	r30, 0xB7	; 183
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295c:	de 01       	movw	r26, r28
    295e:	a5 5b       	subi	r26, 0xB5	; 181
    2960:	bf 4f       	sbci	r27, 0xFF	; 255
    2962:	fe 01       	movw	r30, r28
    2964:	e5 5b       	subi	r30, 0xB5	; 181
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	11 96       	adiw	r26, 0x01	; 1
    2970:	9c 93       	st	X, r25
    2972:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2974:	fe 01       	movw	r30, r28
    2976:	e5 5b       	subi	r30, 0xB5	; 181
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	80 81       	ld	r24, Z
    297c:	91 81       	ldd	r25, Z+1	; 0x01
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	d1 f6       	brne	.-76     	; 0x2936 <Change_Pass+0x2e2>
    2982:	27 c0       	rjmp	.+78     	; 0x29d2 <Change_Pass+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2984:	8e 01       	movw	r16, r28
    2986:	05 5b       	subi	r16, 0xB5	; 181
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
    298a:	fe 01       	movw	r30, r28
    298c:	e3 5b       	subi	r30, 0xB3	; 179
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	60 81       	ld	r22, Z
    2992:	71 81       	ldd	r23, Z+1	; 0x01
    2994:	82 81       	ldd	r24, Z+2	; 0x02
    2996:	93 81       	ldd	r25, Z+3	; 0x03
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	f8 01       	movw	r30, r16
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	80 83       	st	Z, r24
    29a6:	de 01       	movw	r26, r28
    29a8:	a9 5b       	subi	r26, 0xB9	; 185
    29aa:	bf 4f       	sbci	r27, 0xFF	; 255
    29ac:	fe 01       	movw	r30, r28
    29ae:	e5 5b       	subi	r30, 0xB5	; 181
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 81       	ld	r24, Z
    29b4:	91 81       	ldd	r25, Z+1	; 0x01
    29b6:	8d 93       	st	X+, r24
    29b8:	9c 93       	st	X, r25
    29ba:	fe 01       	movw	r30, r28
    29bc:	e9 5b       	subi	r30, 0xB9	; 185
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	80 81       	ld	r24, Z
    29c2:	91 81       	ldd	r25, Z+1	; 0x01
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <Change_Pass+0x370>
    29c8:	fe 01       	movw	r30, r28
    29ca:	e9 5b       	subi	r30, 0xB9	; 185
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	80 83       	st	Z, r24
	LCD_displayString("Enter Password");
	/* Start from second row -  first Pixel */
	LCD_goToRowColumn(1,0);

	/* Get the password from the user*/
	for (i = 0; i < PASS_LENGTH; i++){
    29d2:	de 01       	movw	r26, r28
    29d4:	ac 59       	subi	r26, 0x9C	; 156
    29d6:	bf 4f       	sbci	r27, 0xFF	; 255
    29d8:	fe 01       	movw	r30, r28
    29da:	ec 59       	subi	r30, 0x9C	; 156
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	80 81       	ld	r24, Z
    29e0:	8f 5f       	subi	r24, 0xFF	; 255
    29e2:	8c 93       	st	X, r24
    29e4:	fe 01       	movw	r30, r28
    29e6:	ec 59       	subi	r30, 0x9C	; 156
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 81       	ld	r24, Z
    29ec:	85 30       	cpi	r24, 0x05	; 5
    29ee:	08 f4       	brcc	.+2      	; 0x29f2 <Change_Pass+0x39e>
    29f0:	16 cf       	rjmp	.-468    	; 0x281e <Change_Pass+0x1ca>
		}
		_delay_ms(500);
	}

	/*Clear the LCD screen*/
	LCD_clearScreen();
    29f2:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
	/* Start from first Pixel */
	LCD_goToRowColumn(0,0);
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	LCD_displayString("Confirm Password");
    29fe:	80 e2       	ldi	r24, 0x20	; 32
    2a00:	91 e0       	ldi	r25, 0x01	; 1
    2a02:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
	/* Start from second row -  first Pixel */
	LCD_goToRowColumn(1,0);
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
	/*Get the confirmed password*/
	for (i = 0; i < PASS_LENGTH; i++){
    2a0e:	fe 01       	movw	r30, r28
    2a10:	ec 59       	subi	r30, 0x9C	; 156
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	10 82       	st	Z, r1
    2a16:	b5 c0       	rjmp	.+362    	; 0x2b82 <Change_Pass+0x52e>
		/*Get the pressed key from keypad*/
		key = KeyPad_getPressedKey();
    2a18:	0e 94 a3 05 	call	0xb46	; 0xb46 <KeyPad_getPressedKey>
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	eb 59       	subi	r30, 0x9B	; 155
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	80 83       	st	Z, r24
		if ((key >= 0) && (key <= 9))
    2a24:	fe 01       	movw	r30, r28
    2a26:	eb 59       	subi	r30, 0x9B	; 155
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	80 81       	ld	r24, Z
    2a2c:	8a 30       	cpi	r24, 0x0A	; 10
    2a2e:	d8 f4       	brcc	.+54     	; 0x2a66 <Change_Pass+0x412>
		{
			/*Save the key in Confirm array*/
			conf[i] = key;
    2a30:	fe 01       	movw	r30, r28
    2a32:	ec 59       	subi	r30, 0x9C	; 156
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	80 81       	ld	r24, Z
    2a38:	28 2f       	mov	r18, r24
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	ce 01       	movw	r24, r28
    2a3e:	85 59       	subi	r24, 0x95	; 149
    2a40:	9f 4f       	sbci	r25, 0xFF	; 255
    2a42:	dc 01       	movw	r26, r24
    2a44:	a2 0f       	add	r26, r18
    2a46:	b3 1f       	adc	r27, r19
    2a48:	fe 01       	movw	r30, r28
    2a4a:	eb 59       	subi	r30, 0x9B	; 155
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	80 81       	ld	r24, Z
    2a50:	8c 93       	st	X, r24
			LCD_displayStringRowColumn(1,i,"*");
    2a52:	fe 01       	movw	r30, r28
    2a54:	ec 59       	subi	r30, 0x9C	; 156
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	2a e7       	ldi	r18, 0x7A	; 122
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	60 81       	ld	r22, Z
    2a60:	a9 01       	movw	r20, r18
    2a62:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_displayStringRowColumn>
    2a66:	fe 01       	movw	r30, r28
    2a68:	ed 5b       	subi	r30, 0xBD	; 189
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	aa ef       	ldi	r26, 0xFA	; 250
    2a72:	b3 e4       	ldi	r27, 0x43	; 67
    2a74:	80 83       	st	Z, r24
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	a2 83       	std	Z+2, r26	; 0x02
    2a7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7c:	8e 01       	movw	r16, r28
    2a7e:	01 5c       	subi	r16, 0xC1	; 193
    2a80:	1f 4f       	sbci	r17, 0xFF	; 255
    2a82:	fe 01       	movw	r30, r28
    2a84:	ed 5b       	subi	r30, 0xBD	; 189
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	4a ef       	ldi	r20, 0xFA	; 250
    2a96:	54 e4       	ldi	r21, 0x44	; 68
    2a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	80 83       	st	Z, r24
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	a2 83       	std	Z+2, r26	; 0x02
    2aa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aaa:	fe 01       	movw	r30, r28
    2aac:	ff 96       	adiw	r30, 0x3f	; 63
    2aae:	60 81       	ld	r22, Z
    2ab0:	71 81       	ldd	r23, Z+1	; 0x01
    2ab2:	82 81       	ldd	r24, Z+2	; 0x02
    2ab4:	93 81       	ldd	r25, Z+3	; 0x03
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	2c f4       	brge	.+10     	; 0x2ad0 <Change_Pass+0x47c>
		__ticks = 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9e af       	std	Y+62, r25	; 0x3e
    2acc:	8d af       	std	Y+61, r24	; 0x3d
    2ace:	46 c0       	rjmp	.+140    	; 0x2b5c <Change_Pass+0x508>
	else if (__tmp > 65535)
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	ff 96       	adiw	r30, 0x3f	; 63
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	3f ef       	ldi	r19, 0xFF	; 255
    2ae0:	4f e7       	ldi	r20, 0x7F	; 127
    2ae2:	57 e4       	ldi	r21, 0x47	; 71
    2ae4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae8:	18 16       	cp	r1, r24
    2aea:	64 f5       	brge	.+88     	; 0x2b44 <Change_Pass+0x4f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aec:	fe 01       	movw	r30, r28
    2aee:	ed 5b       	subi	r30, 0xBD	; 189
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	60 81       	ld	r22, Z
    2af4:	71 81       	ldd	r23, Z+1	; 0x01
    2af6:	82 81       	ldd	r24, Z+2	; 0x02
    2af8:	93 81       	ldd	r25, Z+3	; 0x03
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e2       	ldi	r20, 0x20	; 32
    2b00:	51 e4       	ldi	r21, 0x41	; 65
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9e af       	std	Y+62, r25	; 0x3e
    2b18:	8d af       	std	Y+61, r24	; 0x3d
    2b1a:	0f c0       	rjmp	.+30     	; 0x2b3a <Change_Pass+0x4e6>
    2b1c:	88 ec       	ldi	r24, 0xC8	; 200
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9c af       	std	Y+60, r25	; 0x3c
    2b22:	8b af       	std	Y+59, r24	; 0x3b
    2b24:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b26:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <Change_Pass+0x4d4>
    2b2c:	9c af       	std	Y+60, r25	; 0x3c
    2b2e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b30:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b32:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	9e af       	std	Y+62, r25	; 0x3e
    2b38:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	69 f7       	brne	.-38     	; 0x2b1c <Change_Pass+0x4c8>
    2b42:	16 c0       	rjmp	.+44     	; 0x2b70 <Change_Pass+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b44:	fe 01       	movw	r30, r28
    2b46:	ff 96       	adiw	r30, 0x3f	; 63
    2b48:	60 81       	ld	r22, Z
    2b4a:	71 81       	ldd	r23, Z+1	; 0x01
    2b4c:	82 81       	ldd	r24, Z+2	; 0x02
    2b4e:	93 81       	ldd	r25, Z+3	; 0x03
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9e af       	std	Y+62, r25	; 0x3e
    2b5a:	8d af       	std	Y+61, r24	; 0x3d
    2b5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b60:	9a af       	std	Y+58, r25	; 0x3a
    2b62:	89 af       	std	Y+57, r24	; 0x39
    2b64:	89 ad       	ldd	r24, Y+57	; 0x39
    2b66:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <Change_Pass+0x514>
    2b6c:	9a af       	std	Y+58, r25	; 0x3a
    2b6e:	89 af       	std	Y+57, r24	; 0x39
	LCD_goToRowColumn(0,0);
	LCD_displayString("Confirm Password");
	/* Start from second row -  first Pixel */
	LCD_goToRowColumn(1,0);
	/*Get the confirmed password*/
	for (i = 0; i < PASS_LENGTH; i++){
    2b70:	de 01       	movw	r26, r28
    2b72:	ac 59       	subi	r26, 0x9C	; 156
    2b74:	bf 4f       	sbci	r27, 0xFF	; 255
    2b76:	fe 01       	movw	r30, r28
    2b78:	ec 59       	subi	r30, 0x9C	; 156
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	8f 5f       	subi	r24, 0xFF	; 255
    2b80:	8c 93       	st	X, r24
    2b82:	fe 01       	movw	r30, r28
    2b84:	ec 59       	subi	r30, 0x9C	; 156
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	85 30       	cpi	r24, 0x05	; 5
    2b8c:	08 f4       	brcc	.+2      	; 0x2b90 <Change_Pass+0x53c>
    2b8e:	44 cf       	rjmp	.-376    	; 0x2a18 <Change_Pass+0x3c4>
			//LCD_intgerToString(key);
		}
		_delay_ms(500);
	}
	/*Compare the password and the confirmed password*/
	check = Compare(pass,conf);
    2b90:	ce 01       	movw	r24, r28
    2b92:	8a 59       	subi	r24, 0x9A	; 154
    2b94:	9f 4f       	sbci	r25, 0xFF	; 255
    2b96:	9e 01       	movw	r18, r28
    2b98:	25 59       	subi	r18, 0x95	; 149
    2b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9c:	b9 01       	movw	r22, r18
    2b9e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <Compare>
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	ed 59       	subi	r30, 0x9D	; 157
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	80 83       	st	Z, r24

	if (check){
    2baa:	fe 01       	movw	r30, r28
    2bac:	ed 59       	subi	r30, 0x9D	; 157
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	88 23       	and	r24, r24
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <Change_Pass+0x564>
    2bb6:	88 c1       	rjmp	.+784    	; 0x2ec8 <Change_Pass+0x874>
		/*the password and the confirmed password are matched*/
		/*Clear the LCD*/
		LCD_clearScreen();
    2bb8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		/* Start from first Pixel */
		LCD_goToRowColumn(0,0);
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	60 e0       	ldi	r22, 0x00	; 0
    2bc0:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
		LCD_displayString("changed :)");
    2bc4:	81 e3       	ldi	r24, 0x31	; 49
    2bc6:	91 e0       	ldi	r25, 0x01	; 1
    2bc8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
		/*Send command to Store the password in the EEPROM*/
		UART_sendByte(NEW_PASSWORD);
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	0e 94 ad 1c 	call	0x395a	; 0x395a <UART_sendByte>
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	a8 e4       	ldi	r26, 0x48	; 72
    2bd8:	b2 e4       	ldi	r27, 0x42	; 66
    2bda:	8d ab       	std	Y+53, r24	; 0x35
    2bdc:	9e ab       	std	Y+54, r25	; 0x36
    2bde:	af ab       	std	Y+55, r26	; 0x37
    2be0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be2:	6d a9       	ldd	r22, Y+53	; 0x35
    2be4:	7e a9       	ldd	r23, Y+54	; 0x36
    2be6:	8f a9       	ldd	r24, Y+55	; 0x37
    2be8:	98 ad       	ldd	r25, Y+56	; 0x38
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	4a ef       	ldi	r20, 0xFA	; 250
    2bf0:	54 e4       	ldi	r21, 0x44	; 68
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	89 ab       	std	Y+49, r24	; 0x31
    2bfc:	9a ab       	std	Y+50, r25	; 0x32
    2bfe:	ab ab       	std	Y+51, r26	; 0x33
    2c00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c02:	69 a9       	ldd	r22, Y+49	; 0x31
    2c04:	7a a9       	ldd	r23, Y+50	; 0x32
    2c06:	8b a9       	ldd	r24, Y+51	; 0x33
    2c08:	9c a9       	ldd	r25, Y+52	; 0x34
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	40 e8       	ldi	r20, 0x80	; 128
    2c10:	5f e3       	ldi	r21, 0x3F	; 63
    2c12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c16:	88 23       	and	r24, r24
    2c18:	2c f4       	brge	.+10     	; 0x2c24 <Change_Pass+0x5d0>
		__ticks = 1;
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	98 ab       	std	Y+48, r25	; 0x30
    2c20:	8f a7       	std	Y+47, r24	; 0x2f
    2c22:	3f c0       	rjmp	.+126    	; 0x2ca2 <Change_Pass+0x64e>
	else if (__tmp > 65535)
    2c24:	69 a9       	ldd	r22, Y+49	; 0x31
    2c26:	7a a9       	ldd	r23, Y+50	; 0x32
    2c28:	8b a9       	ldd	r24, Y+51	; 0x33
    2c2a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	3f ef       	ldi	r19, 0xFF	; 255
    2c30:	4f e7       	ldi	r20, 0x7F	; 127
    2c32:	57 e4       	ldi	r21, 0x47	; 71
    2c34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c38:	18 16       	cp	r1, r24
    2c3a:	4c f5       	brge	.+82     	; 0x2c8e <Change_Pass+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c3e:	7e a9       	ldd	r23, Y+54	; 0x36
    2c40:	8f a9       	ldd	r24, Y+55	; 0x37
    2c42:	98 ad       	ldd	r25, Y+56	; 0x38
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e2       	ldi	r20, 0x20	; 32
    2c4a:	51 e4       	ldi	r21, 0x41	; 65
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	bc 01       	movw	r22, r24
    2c56:	cd 01       	movw	r24, r26
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	98 ab       	std	Y+48, r25	; 0x30
    2c62:	8f a7       	std	Y+47, r24	; 0x2f
    2c64:	0f c0       	rjmp	.+30     	; 0x2c84 <Change_Pass+0x630>
    2c66:	88 ec       	ldi	r24, 0xC8	; 200
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9e a7       	std	Y+46, r25	; 0x2e
    2c6c:	8d a7       	std	Y+45, r24	; 0x2d
    2c6e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c70:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <Change_Pass+0x61e>
    2c76:	9e a7       	std	Y+46, r25	; 0x2e
    2c78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c7c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	98 ab       	std	Y+48, r25	; 0x30
    2c82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c84:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c86:	98 a9       	ldd	r25, Y+48	; 0x30
    2c88:	00 97       	sbiw	r24, 0x00	; 0
    2c8a:	69 f7       	brne	.-38     	; 0x2c66 <Change_Pass+0x612>
    2c8c:	14 c0       	rjmp	.+40     	; 0x2cb6 <Change_Pass+0x662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c90:	7a a9       	ldd	r23, Y+50	; 0x32
    2c92:	8b a9       	ldd	r24, Y+51	; 0x33
    2c94:	9c a9       	ldd	r25, Y+52	; 0x34
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	98 ab       	std	Y+48, r25	; 0x30
    2ca0:	8f a7       	std	Y+47, r24	; 0x2f
    2ca2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ca4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ca6:	9c a7       	std	Y+44, r25	; 0x2c
    2ca8:	8b a7       	std	Y+43, r24	; 0x2b
    2caa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cac:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <Change_Pass+0x65a>
    2cb2:	9c a7       	std	Y+44, r25	; 0x2c
    2cb4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		/*Send the new password to store it*/
		for (i = 0; i < PASS_LENGTH; i++) {
    2cb6:	fe 01       	movw	r30, r28
    2cb8:	ec 59       	subi	r30, 0x9C	; 156
    2cba:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbc:	10 82       	st	Z, r1
    2cbe:	8a c0       	rjmp	.+276    	; 0x2dd4 <Change_Pass+0x780>
			UART_sendByte(pass[i]);
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	ec 59       	subi	r30, 0x9C	; 156
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	80 81       	ld	r24, Z
    2cc8:	28 2f       	mov	r18, r24
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	ce 01       	movw	r24, r28
    2cce:	8a 59       	subi	r24, 0x9A	; 154
    2cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	e2 0f       	add	r30, r18
    2cd6:	f3 1f       	adc	r31, r19
    2cd8:	80 81       	ld	r24, Z
    2cda:	0e 94 ad 1c 	call	0x395a	; 0x395a <UART_sendByte>
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	a8 ec       	ldi	r26, 0xC8	; 200
    2ce4:	b2 e4       	ldi	r27, 0x42	; 66
    2ce6:	8f a3       	std	Y+39, r24	; 0x27
    2ce8:	98 a7       	std	Y+40, r25	; 0x28
    2cea:	a9 a7       	std	Y+41, r26	; 0x29
    2cec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cee:	6f a1       	ldd	r22, Y+39	; 0x27
    2cf0:	78 a5       	ldd	r23, Y+40	; 0x28
    2cf2:	89 a5       	ldd	r24, Y+41	; 0x29
    2cf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	4a ef       	ldi	r20, 0xFA	; 250
    2cfc:	54 e4       	ldi	r21, 0x44	; 68
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	8b a3       	std	Y+35, r24	; 0x23
    2d08:	9c a3       	std	Y+36, r25	; 0x24
    2d0a:	ad a3       	std	Y+37, r26	; 0x25
    2d0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d10:	7c a1       	ldd	r23, Y+36	; 0x24
    2d12:	8d a1       	ldd	r24, Y+37	; 0x25
    2d14:	9e a1       	ldd	r25, Y+38	; 0x26
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e8       	ldi	r20, 0x80	; 128
    2d1c:	5f e3       	ldi	r21, 0x3F	; 63
    2d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d22:	88 23       	and	r24, r24
    2d24:	2c f4       	brge	.+10     	; 0x2d30 <Change_Pass+0x6dc>
		__ticks = 1;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	9a a3       	std	Y+34, r25	; 0x22
    2d2c:	89 a3       	std	Y+33, r24	; 0x21
    2d2e:	3f c0       	rjmp	.+126    	; 0x2dae <Change_Pass+0x75a>
	else if (__tmp > 65535)
    2d30:	6b a1       	ldd	r22, Y+35	; 0x23
    2d32:	7c a1       	ldd	r23, Y+36	; 0x24
    2d34:	8d a1       	ldd	r24, Y+37	; 0x25
    2d36:	9e a1       	ldd	r25, Y+38	; 0x26
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	3f ef       	ldi	r19, 0xFF	; 255
    2d3c:	4f e7       	ldi	r20, 0x7F	; 127
    2d3e:	57 e4       	ldi	r21, 0x47	; 71
    2d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d44:	18 16       	cp	r1, r24
    2d46:	4c f5       	brge	.+82     	; 0x2d9a <Change_Pass+0x746>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d48:	6f a1       	ldd	r22, Y+39	; 0x27
    2d4a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d4c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e2       	ldi	r20, 0x20	; 32
    2d56:	51 e4       	ldi	r21, 0x41	; 65
    2d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	bc 01       	movw	r22, r24
    2d62:	cd 01       	movw	r24, r26
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	9a a3       	std	Y+34, r25	; 0x22
    2d6e:	89 a3       	std	Y+33, r24	; 0x21
    2d70:	0f c0       	rjmp	.+30     	; 0x2d90 <Change_Pass+0x73c>
    2d72:	88 ec       	ldi	r24, 0xC8	; 200
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	98 a3       	std	Y+32, r25	; 0x20
    2d78:	8f 8f       	std	Y+31, r24	; 0x1f
    2d7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d7c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	f1 f7       	brne	.-4      	; 0x2d7e <Change_Pass+0x72a>
    2d82:	98 a3       	std	Y+32, r25	; 0x20
    2d84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d86:	89 a1       	ldd	r24, Y+33	; 0x21
    2d88:	9a a1       	ldd	r25, Y+34	; 0x22
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	9a a3       	std	Y+34, r25	; 0x22
    2d8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d90:	89 a1       	ldd	r24, Y+33	; 0x21
    2d92:	9a a1       	ldd	r25, Y+34	; 0x22
    2d94:	00 97       	sbiw	r24, 0x00	; 0
    2d96:	69 f7       	brne	.-38     	; 0x2d72 <Change_Pass+0x71e>
    2d98:	14 c0       	rjmp	.+40     	; 0x2dc2 <Change_Pass+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2da0:	9e a1       	ldd	r25, Y+38	; 0x26
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	9a a3       	std	Y+34, r25	; 0x22
    2dac:	89 a3       	std	Y+33, r24	; 0x21
    2dae:	89 a1       	ldd	r24, Y+33	; 0x21
    2db0:	9a a1       	ldd	r25, Y+34	; 0x22
    2db2:	9e 8f       	std	Y+30, r25	; 0x1e
    2db4:	8d 8f       	std	Y+29, r24	; 0x1d
    2db6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2db8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <Change_Pass+0x766>
    2dbe:	9e 8f       	std	Y+30, r25	; 0x1e
    2dc0:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_displayString("changed :)");
		/*Send command to Store the password in the EEPROM*/
		UART_sendByte(NEW_PASSWORD);
		_delay_ms(50);
		/*Send the new password to store it*/
		for (i = 0; i < PASS_LENGTH; i++) {
    2dc2:	de 01       	movw	r26, r28
    2dc4:	ac 59       	subi	r26, 0x9C	; 156
    2dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    2dc8:	fe 01       	movw	r30, r28
    2dca:	ec 59       	subi	r30, 0x9C	; 156
    2dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dce:	80 81       	ld	r24, Z
    2dd0:	8f 5f       	subi	r24, 0xFF	; 255
    2dd2:	8c 93       	st	X, r24
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	ec 59       	subi	r30, 0x9C	; 156
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	80 81       	ld	r24, Z
    2ddc:	85 30       	cpi	r24, 0x05	; 5
    2dde:	08 f4       	brcc	.+2      	; 0x2de2 <Change_Pass+0x78e>
    2de0:	6f cf       	rjmp	.-290    	; 0x2cc0 <Change_Pass+0x66c>
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	a6 e9       	ldi	r26, 0x96	; 150
    2de8:	b3 e4       	ldi	r27, 0x43	; 67
    2dea:	89 8f       	std	Y+25, r24	; 0x19
    2dec:	9a 8f       	std	Y+26, r25	; 0x1a
    2dee:	ab 8f       	std	Y+27, r26	; 0x1b
    2df0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df2:	69 8d       	ldd	r22, Y+25	; 0x19
    2df4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2df6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2df8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	4a ef       	ldi	r20, 0xFA	; 250
    2e00:	54 e4       	ldi	r21, 0x44	; 68
    2e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	8d 8b       	std	Y+21, r24	; 0x15
    2e0c:	9e 8b       	std	Y+22, r25	; 0x16
    2e0e:	af 8b       	std	Y+23, r26	; 0x17
    2e10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e12:	6d 89       	ldd	r22, Y+21	; 0x15
    2e14:	7e 89       	ldd	r23, Y+22	; 0x16
    2e16:	8f 89       	ldd	r24, Y+23	; 0x17
    2e18:	98 8d       	ldd	r25, Y+24	; 0x18
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	40 e8       	ldi	r20, 0x80	; 128
    2e20:	5f e3       	ldi	r21, 0x3F	; 63
    2e22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e26:	88 23       	and	r24, r24
    2e28:	2c f4       	brge	.+10     	; 0x2e34 <Change_Pass+0x7e0>
		__ticks = 1;
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	9c 8b       	std	Y+20, r25	; 0x14
    2e30:	8b 8b       	std	Y+19, r24	; 0x13
    2e32:	3f c0       	rjmp	.+126    	; 0x2eb2 <Change_Pass+0x85e>
	else if (__tmp > 65535)
    2e34:	6d 89       	ldd	r22, Y+21	; 0x15
    2e36:	7e 89       	ldd	r23, Y+22	; 0x16
    2e38:	8f 89       	ldd	r24, Y+23	; 0x17
    2e3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	3f ef       	ldi	r19, 0xFF	; 255
    2e40:	4f e7       	ldi	r20, 0x7F	; 127
    2e42:	57 e4       	ldi	r21, 0x47	; 71
    2e44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e48:	18 16       	cp	r1, r24
    2e4a:	4c f5       	brge	.+82     	; 0x2e9e <Change_Pass+0x84a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e2       	ldi	r20, 0x20	; 32
    2e5a:	51 e4       	ldi	r21, 0x41	; 65
    2e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	bc 01       	movw	r22, r24
    2e66:	cd 01       	movw	r24, r26
    2e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	9c 8b       	std	Y+20, r25	; 0x14
    2e72:	8b 8b       	std	Y+19, r24	; 0x13
    2e74:	0f c0       	rjmp	.+30     	; 0x2e94 <Change_Pass+0x840>
    2e76:	88 ec       	ldi	r24, 0xC8	; 200
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	9a 8b       	std	Y+18, r25	; 0x12
    2e7c:	89 8b       	std	Y+17, r24	; 0x11
    2e7e:	89 89       	ldd	r24, Y+17	; 0x11
    2e80:	9a 89       	ldd	r25, Y+18	; 0x12
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	f1 f7       	brne	.-4      	; 0x2e82 <Change_Pass+0x82e>
    2e86:	9a 8b       	std	Y+18, r25	; 0x12
    2e88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	9c 8b       	std	Y+20, r25	; 0x14
    2e92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e94:	8b 89       	ldd	r24, Y+19	; 0x13
    2e96:	9c 89       	ldd	r25, Y+20	; 0x14
    2e98:	00 97       	sbiw	r24, 0x00	; 0
    2e9a:	69 f7       	brne	.-38     	; 0x2e76 <Change_Pass+0x822>
    2e9c:	91 c0       	rjmp	.+290    	; 0x2fc0 <Change_Pass+0x96c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	9c 8b       	std	Y+20, r25	; 0x14
    2eb0:	8b 8b       	std	Y+19, r24	; 0x13
    2eb2:	8b 89       	ldd	r24, Y+19	; 0x13
    2eb4:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb6:	98 8b       	std	Y+16, r25	; 0x10
    2eb8:	8f 87       	std	Y+15, r24	; 0x0f
    2eba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ebc:	98 89       	ldd	r25, Y+16	; 0x10
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	f1 f7       	brne	.-4      	; 0x2ebe <Change_Pass+0x86a>
    2ec2:	98 8b       	std	Y+16, r25	; 0x10
    2ec4:	8f 87       	std	Y+15, r24	; 0x0f
    2ec6:	7c c0       	rjmp	.+248    	; 0x2fc0 <Change_Pass+0x96c>
		_delay_ms(300);
	}
	else{
		/*the password and the confirmed password are not matched*/
		/*Clear the LCD*/
		LCD_clearScreen();
    2ec8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <LCD_clearScreen>
		/* Start from first Pixel */
		LCD_goToRowColumn(0,0);
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	60 e0       	ldi	r22, 0x00	; 0
    2ed0:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LCD_goToRowColumn>
		LCD_displayString("not matched!!");
    2ed4:	88 e9       	ldi	r24, 0x98	; 152
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <LCD_displayString>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	a6 e9       	ldi	r26, 0x96	; 150
    2ee2:	b3 e4       	ldi	r27, 0x43	; 67
    2ee4:	8b 87       	std	Y+11, r24	; 0x0b
    2ee6:	9c 87       	std	Y+12, r25	; 0x0c
    2ee8:	ad 87       	std	Y+13, r26	; 0x0d
    2eea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	4a ef       	ldi	r20, 0xFA	; 250
    2efa:	54 e4       	ldi	r21, 0x44	; 68
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	8f 83       	std	Y+7, r24	; 0x07
    2f06:	98 87       	std	Y+8, r25	; 0x08
    2f08:	a9 87       	std	Y+9, r26	; 0x09
    2f0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0e:	78 85       	ldd	r23, Y+8	; 0x08
    2f10:	89 85       	ldd	r24, Y+9	; 0x09
    2f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e8       	ldi	r20, 0x80	; 128
    2f1a:	5f e3       	ldi	r21, 0x3F	; 63
    2f1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f20:	88 23       	and	r24, r24
    2f22:	2c f4       	brge	.+10     	; 0x2f2e <Change_Pass+0x8da>
		__ticks = 1;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
    2f2c:	3f c0       	rjmp	.+126    	; 0x2fac <Change_Pass+0x958>
	else if (__tmp > 65535)
    2f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f30:	78 85       	ldd	r23, Y+8	; 0x08
    2f32:	89 85       	ldd	r24, Y+9	; 0x09
    2f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	3f ef       	ldi	r19, 0xFF	; 255
    2f3a:	4f e7       	ldi	r20, 0x7F	; 127
    2f3c:	57 e4       	ldi	r21, 0x47	; 71
    2f3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f42:	18 16       	cp	r1, r24
    2f44:	4c f5       	brge	.+82     	; 0x2f98 <Change_Pass+0x944>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e2       	ldi	r20, 0x20	; 32
    2f54:	51 e4       	ldi	r21, 0x41	; 65
    2f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	9e 83       	std	Y+6, r25	; 0x06
    2f6c:	8d 83       	std	Y+5, r24	; 0x05
    2f6e:	0f c0       	rjmp	.+30     	; 0x2f8e <Change_Pass+0x93a>
    2f70:	88 ec       	ldi	r24, 0xC8	; 200
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	9c 83       	std	Y+4, r25	; 0x04
    2f76:	8b 83       	std	Y+3, r24	; 0x03
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <Change_Pass+0x928>
    2f80:	9c 83       	std	Y+4, r25	; 0x04
    2f82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f84:	8d 81       	ldd	r24, Y+5	; 0x05
    2f86:	9e 81       	ldd	r25, Y+6	; 0x06
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	9e 83       	std	Y+6, r25	; 0x06
    2f8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	69 f7       	brne	.-38     	; 0x2f70 <Change_Pass+0x91c>
    2f96:	14 c0       	rjmp	.+40     	; 0x2fc0 <Change_Pass+0x96c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f98:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9a:	78 85       	ldd	r23, Y+8	; 0x08
    2f9c:	89 85       	ldd	r24, Y+9	; 0x09
    2f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	9e 83       	std	Y+6, r25	; 0x06
    2faa:	8d 83       	std	Y+5, r24	; 0x05
    2fac:	8d 81       	ldd	r24, Y+5	; 0x05
    2fae:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <Change_Pass+0x964>
    2fbc:	9a 83       	std	Y+2, r25	; 0x02
    2fbe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(300);
	}
}
    2fc0:	c1 59       	subi	r28, 0x91	; 145
    2fc2:	df 4f       	sbci	r29, 0xFF	; 255
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	08 95       	ret

00002fd8 <Compare>:

uint8 Compare (uint8 array1[],uint8 array2[]){
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <Compare+0x6>
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <Compare+0x8>
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <Compare+0xa>
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	9b 83       	std	Y+3, r25	; 0x03
    2fe8:	8a 83       	std	Y+2, r24	; 0x02
    2fea:	7d 83       	std	Y+5, r23	; 0x05
    2fec:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	/* Check if the two arrays are matched or not*/
	for (i = 0; i < PASS_LENGTH; i++){
    2fee:	19 82       	std	Y+1, r1	; 0x01
    2ff0:	19 c0       	rjmp	.+50     	; 0x3024 <Compare+0x4c>
		if(array1[i] != array2[i]){
    2ff2:	89 81       	ldd	r24, Y+1	; 0x01
    2ff4:	28 2f       	mov	r18, r24
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	e2 0f       	add	r30, r18
    3000:	f3 1f       	adc	r31, r19
    3002:	40 81       	ld	r20, Z
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	28 2f       	mov	r18, r24
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	8c 81       	ldd	r24, Y+4	; 0x04
    300c:	9d 81       	ldd	r25, Y+5	; 0x05
    300e:	fc 01       	movw	r30, r24
    3010:	e2 0f       	add	r30, r18
    3012:	f3 1f       	adc	r31, r19
    3014:	80 81       	ld	r24, Z
    3016:	48 17       	cp	r20, r24
    3018:	11 f0       	breq	.+4      	; 0x301e <Compare+0x46>
			/*if at least one element is not matched return 0*/
			return 0;
    301a:	1e 82       	std	Y+6, r1	; 0x06
    301c:	08 c0       	rjmp	.+16     	; 0x302e <Compare+0x56>
}

uint8 Compare (uint8 array1[],uint8 array2[]){
	uint8 i;
	/* Check if the two arrays are matched or not*/
	for (i = 0; i < PASS_LENGTH; i++){
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	8f 5f       	subi	r24, 0xFF	; 255
    3022:	89 83       	std	Y+1, r24	; 0x01
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	85 30       	cpi	r24, 0x05	; 5
    3028:	20 f3       	brcs	.-56     	; 0x2ff2 <Compare+0x1a>
			/*if at least one element is not matched return 0*/
			return 0;
		}
	}
	/*if they are matched return 1*/
	return 1;
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	8e 83       	std	Y+6, r24	; 0x06
    302e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3030:	26 96       	adiw	r28, 0x06	; 6
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	cf 91       	pop	r28
    303e:	df 91       	pop	r29
    3040:	08 95       	ret

00003042 <Timer1_INT>:

void Timer1_INT(){
    3042:	df 93       	push	r29
    3044:	cf 93       	push	r28
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
	/* increment the timer counter every one second*/
	g_timer1_SecFlag++;
    304a:	80 91 45 01 	lds	r24, 0x0145
    304e:	8f 5f       	subi	r24, 0xFF	; 255
    3050:	80 93 45 01 	sts	0x0145, r24
}
    3054:	cf 91       	pop	r28
    3056:	df 91       	pop	r29
    3058:	08 95       	ret

0000305a <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    305a:	1f 92       	push	r1
    305c:	0f 92       	push	r0
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	0f 92       	push	r0
    3062:	11 24       	eor	r1, r1
    3064:	2f 93       	push	r18
    3066:	3f 93       	push	r19
    3068:	4f 93       	push	r20
    306a:	5f 93       	push	r21
    306c:	6f 93       	push	r22
    306e:	7f 93       	push	r23
    3070:	8f 93       	push	r24
    3072:	9f 93       	push	r25
    3074:	af 93       	push	r26
    3076:	bf 93       	push	r27
    3078:	ef 93       	push	r30
    307a:	ff 93       	push	r31
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    3084:	80 91 46 01 	lds	r24, 0x0146
    3088:	90 91 47 01 	lds	r25, 0x0147
    308c:	00 97       	sbiw	r24, 0x00	; 0
    308e:	29 f0       	breq	.+10     	; 0x309a <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    3090:	e0 91 46 01 	lds	r30, 0x0146
    3094:	f0 91 47 01 	lds	r31, 0x0147
    3098:	09 95       	icall
	}
}
    309a:	cf 91       	pop	r28
    309c:	df 91       	pop	r29
    309e:	ff 91       	pop	r31
    30a0:	ef 91       	pop	r30
    30a2:	bf 91       	pop	r27
    30a4:	af 91       	pop	r26
    30a6:	9f 91       	pop	r25
    30a8:	8f 91       	pop	r24
    30aa:	7f 91       	pop	r23
    30ac:	6f 91       	pop	r22
    30ae:	5f 91       	pop	r21
    30b0:	4f 91       	pop	r20
    30b2:	3f 91       	pop	r19
    30b4:	2f 91       	pop	r18
    30b6:	0f 90       	pop	r0
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	0f 90       	pop	r0
    30bc:	1f 90       	pop	r1
    30be:	18 95       	reti

000030c0 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    30c0:	1f 92       	push	r1
    30c2:	0f 92       	push	r0
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	0f 92       	push	r0
    30c8:	11 24       	eor	r1, r1
    30ca:	2f 93       	push	r18
    30cc:	3f 93       	push	r19
    30ce:	4f 93       	push	r20
    30d0:	5f 93       	push	r21
    30d2:	6f 93       	push	r22
    30d4:	7f 93       	push	r23
    30d6:	8f 93       	push	r24
    30d8:	9f 93       	push	r25
    30da:	af 93       	push	r26
    30dc:	bf 93       	push	r27
    30de:	ef 93       	push	r30
    30e0:	ff 93       	push	r31
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
	if(timer0_callBackPtr != NULL_PTR)
    30ea:	80 91 46 01 	lds	r24, 0x0146
    30ee:	90 91 47 01 	lds	r25, 0x0147
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	29 f0       	breq	.+10     	; 0x3100 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer0_callBackPtr)();
    30f6:	e0 91 46 01 	lds	r30, 0x0146
    30fa:	f0 91 47 01 	lds	r31, 0x0147
    30fe:	09 95       	icall
	}
}
    3100:	cf 91       	pop	r28
    3102:	df 91       	pop	r29
    3104:	ff 91       	pop	r31
    3106:	ef 91       	pop	r30
    3108:	bf 91       	pop	r27
    310a:	af 91       	pop	r26
    310c:	9f 91       	pop	r25
    310e:	8f 91       	pop	r24
    3110:	7f 91       	pop	r23
    3112:	6f 91       	pop	r22
    3114:	5f 91       	pop	r21
    3116:	4f 91       	pop	r20
    3118:	3f 91       	pop	r19
    311a:	2f 91       	pop	r18
    311c:	0f 90       	pop	r0
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	0f 90       	pop	r0
    3122:	1f 90       	pop	r1
    3124:	18 95       	reti

00003126 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    3126:	1f 92       	push	r1
    3128:	0f 92       	push	r0
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	0f 92       	push	r0
    312e:	11 24       	eor	r1, r1
    3130:	2f 93       	push	r18
    3132:	3f 93       	push	r19
    3134:	4f 93       	push	r20
    3136:	5f 93       	push	r21
    3138:	6f 93       	push	r22
    313a:	7f 93       	push	r23
    313c:	8f 93       	push	r24
    313e:	9f 93       	push	r25
    3140:	af 93       	push	r26
    3142:	bf 93       	push	r27
    3144:	ef 93       	push	r30
    3146:	ff 93       	push	r31
    3148:	df 93       	push	r29
    314a:	cf 93       	push	r28
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    3150:	80 91 48 01 	lds	r24, 0x0148
    3154:	90 91 49 01 	lds	r25, 0x0149
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	29 f0       	breq	.+10     	; 0x3166 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    315c:	e0 91 48 01 	lds	r30, 0x0148
    3160:	f0 91 49 01 	lds	r31, 0x0149
    3164:	09 95       	icall
	}
}
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	ff 91       	pop	r31
    316c:	ef 91       	pop	r30
    316e:	bf 91       	pop	r27
    3170:	af 91       	pop	r26
    3172:	9f 91       	pop	r25
    3174:	8f 91       	pop	r24
    3176:	7f 91       	pop	r23
    3178:	6f 91       	pop	r22
    317a:	5f 91       	pop	r21
    317c:	4f 91       	pop	r20
    317e:	3f 91       	pop	r19
    3180:	2f 91       	pop	r18
    3182:	0f 90       	pop	r0
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	0f 90       	pop	r0
    3188:	1f 90       	pop	r1
    318a:	18 95       	reti

0000318c <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    318c:	1f 92       	push	r1
    318e:	0f 92       	push	r0
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	0f 92       	push	r0
    3194:	11 24       	eor	r1, r1
    3196:	2f 93       	push	r18
    3198:	3f 93       	push	r19
    319a:	4f 93       	push	r20
    319c:	5f 93       	push	r21
    319e:	6f 93       	push	r22
    31a0:	7f 93       	push	r23
    31a2:	8f 93       	push	r24
    31a4:	9f 93       	push	r25
    31a6:	af 93       	push	r26
    31a8:	bf 93       	push	r27
    31aa:	ef 93       	push	r30
    31ac:	ff 93       	push	r31
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    31b6:	80 91 48 01 	lds	r24, 0x0148
    31ba:	90 91 49 01 	lds	r25, 0x0149
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	29 f0       	breq	.+10     	; 0x31cc <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    31c2:	e0 91 48 01 	lds	r30, 0x0148
    31c6:	f0 91 49 01 	lds	r31, 0x0149
    31ca:	09 95       	icall
	}
}
    31cc:	cf 91       	pop	r28
    31ce:	df 91       	pop	r29
    31d0:	ff 91       	pop	r31
    31d2:	ef 91       	pop	r30
    31d4:	bf 91       	pop	r27
    31d6:	af 91       	pop	r26
    31d8:	9f 91       	pop	r25
    31da:	8f 91       	pop	r24
    31dc:	7f 91       	pop	r23
    31de:	6f 91       	pop	r22
    31e0:	5f 91       	pop	r21
    31e2:	4f 91       	pop	r20
    31e4:	3f 91       	pop	r19
    31e6:	2f 91       	pop	r18
    31e8:	0f 90       	pop	r0
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	0f 90       	pop	r0
    31ee:	1f 90       	pop	r1
    31f0:	18 95       	reti

000031f2 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    31f2:	1f 92       	push	r1
    31f4:	0f 92       	push	r0
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	0f 92       	push	r0
    31fa:	11 24       	eor	r1, r1
    31fc:	2f 93       	push	r18
    31fe:	3f 93       	push	r19
    3200:	4f 93       	push	r20
    3202:	5f 93       	push	r21
    3204:	6f 93       	push	r22
    3206:	7f 93       	push	r23
    3208:	8f 93       	push	r24
    320a:	9f 93       	push	r25
    320c:	af 93       	push	r26
    320e:	bf 93       	push	r27
    3210:	ef 93       	push	r30
    3212:	ff 93       	push	r31
    3214:	df 93       	push	r29
    3216:	cf 93       	push	r28
    3218:	cd b7       	in	r28, 0x3d	; 61
    321a:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    321c:	80 91 48 01 	lds	r24, 0x0148
    3220:	90 91 49 01 	lds	r25, 0x0149
    3224:	00 97       	sbiw	r24, 0x00	; 0
    3226:	29 f0       	breq	.+10     	; 0x3232 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer1_callBackPtr)();
    3228:	e0 91 48 01 	lds	r30, 0x0148
    322c:	f0 91 49 01 	lds	r31, 0x0149
    3230:	09 95       	icall
	}
}
    3232:	cf 91       	pop	r28
    3234:	df 91       	pop	r29
    3236:	ff 91       	pop	r31
    3238:	ef 91       	pop	r30
    323a:	bf 91       	pop	r27
    323c:	af 91       	pop	r26
    323e:	9f 91       	pop	r25
    3240:	8f 91       	pop	r24
    3242:	7f 91       	pop	r23
    3244:	6f 91       	pop	r22
    3246:	5f 91       	pop	r21
    3248:	4f 91       	pop	r20
    324a:	3f 91       	pop	r19
    324c:	2f 91       	pop	r18
    324e:	0f 90       	pop	r0
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	0f 90       	pop	r0
    3254:	1f 90       	pop	r1
    3256:	18 95       	reti

00003258 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    3258:	1f 92       	push	r1
    325a:	0f 92       	push	r0
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	0f 92       	push	r0
    3260:	11 24       	eor	r1, r1
    3262:	2f 93       	push	r18
    3264:	3f 93       	push	r19
    3266:	4f 93       	push	r20
    3268:	5f 93       	push	r21
    326a:	6f 93       	push	r22
    326c:	7f 93       	push	r23
    326e:	8f 93       	push	r24
    3270:	9f 93       	push	r25
    3272:	af 93       	push	r26
    3274:	bf 93       	push	r27
    3276:	ef 93       	push	r30
    3278:	ff 93       	push	r31
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	cd b7       	in	r28, 0x3d	; 61
    3280:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    3282:	80 91 4a 01 	lds	r24, 0x014A
    3286:	90 91 4b 01 	lds	r25, 0x014B
    328a:	00 97       	sbiw	r24, 0x00	; 0
    328c:	29 f0       	breq	.+10     	; 0x3298 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    328e:	e0 91 4a 01 	lds	r30, 0x014A
    3292:	f0 91 4b 01 	lds	r31, 0x014B
    3296:	09 95       	icall
	}
}
    3298:	cf 91       	pop	r28
    329a:	df 91       	pop	r29
    329c:	ff 91       	pop	r31
    329e:	ef 91       	pop	r30
    32a0:	bf 91       	pop	r27
    32a2:	af 91       	pop	r26
    32a4:	9f 91       	pop	r25
    32a6:	8f 91       	pop	r24
    32a8:	7f 91       	pop	r23
    32aa:	6f 91       	pop	r22
    32ac:	5f 91       	pop	r21
    32ae:	4f 91       	pop	r20
    32b0:	3f 91       	pop	r19
    32b2:	2f 91       	pop	r18
    32b4:	0f 90       	pop	r0
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	0f 90       	pop	r0
    32ba:	1f 90       	pop	r1
    32bc:	18 95       	reti

000032be <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    32be:	1f 92       	push	r1
    32c0:	0f 92       	push	r0
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	0f 92       	push	r0
    32c6:	11 24       	eor	r1, r1
    32c8:	2f 93       	push	r18
    32ca:	3f 93       	push	r19
    32cc:	4f 93       	push	r20
    32ce:	5f 93       	push	r21
    32d0:	6f 93       	push	r22
    32d2:	7f 93       	push	r23
    32d4:	8f 93       	push	r24
    32d6:	9f 93       	push	r25
    32d8:	af 93       	push	r26
    32da:	bf 93       	push	r27
    32dc:	ef 93       	push	r30
    32de:	ff 93       	push	r31
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
	if(timer2_callBackPtr != NULL_PTR)
    32e8:	80 91 4a 01 	lds	r24, 0x014A
    32ec:	90 91 4b 01 	lds	r25, 0x014B
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	29 f0       	breq	.+10     	; 0x32fe <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*timer2_callBackPtr)();
    32f4:	e0 91 4a 01 	lds	r30, 0x014A
    32f8:	f0 91 4b 01 	lds	r31, 0x014B
    32fc:	09 95       	icall
	}
}
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	ff 91       	pop	r31
    3304:	ef 91       	pop	r30
    3306:	bf 91       	pop	r27
    3308:	af 91       	pop	r26
    330a:	9f 91       	pop	r25
    330c:	8f 91       	pop	r24
    330e:	7f 91       	pop	r23
    3310:	6f 91       	pop	r22
    3312:	5f 91       	pop	r21
    3314:	4f 91       	pop	r20
    3316:	3f 91       	pop	r19
    3318:	2f 91       	pop	r18
    331a:	0f 90       	pop	r0
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	0f 90       	pop	r0
    3320:	1f 90       	pop	r1
    3322:	18 95       	reti

00003324 <TIMER0_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void TIMER0_init(const Timer_ConfigType * Config_Ptr)
{
    3324:	df 93       	push	r29
    3326:	cf 93       	push	r28
    3328:	00 d0       	rcall	.+0      	; 0x332a <TIMER0_init+0x6>
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
    332e:	9a 83       	std	Y+2, r25	; 0x02
    3330:	89 83       	std	Y+1, r24	; 0x01
	/*TCCR0 &= 0x00;
	TCNT0 &= 0x00;
	OCR0  &= 0x00;
*/
	/* non PWM Mode */
	TCCR0 = (1<<FOC0);
    3332:	e3 e5       	ldi	r30, 0x53	; 83
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 e8       	ldi	r24, 0x80	; 128
    3338:	80 83       	st	Z, r24
	/*set initial value */
	TCNT0 = Config_Ptr->initial;
    333a:	a2 e5       	ldi	r26, 0x52	; 82
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	e9 81       	ldd	r30, Y+1	; 0x01
    3340:	fa 81       	ldd	r31, Y+2	; 0x02
    3342:	84 81       	ldd	r24, Z+4	; 0x04
    3344:	95 81       	ldd	r25, Z+5	; 0x05
    3346:	8c 93       	st	X, r24
	/*set compare value for compare mode*/
	OCR0 = Config_Ptr->compare_value;
    3348:	ac e5       	ldi	r26, 0x5C	; 92
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	e9 81       	ldd	r30, Y+1	; 0x01
    334e:	fa 81       	ldd	r31, Y+2	; 0x02
    3350:	86 81       	ldd	r24, Z+6	; 0x06
    3352:	97 81       	ldd	r25, Z+7	; 0x07
    3354:	8c 93       	st	X, r24


	if((Config_Ptr->OutputPin) == OC0){
    3356:	e9 81       	ldd	r30, Y+1	; 0x01
    3358:	fa 81       	ldd	r31, Y+2	; 0x02
    335a:	83 81       	ldd	r24, Z+3	; 0x03
    335c:	83 30       	cpi	r24, 0x03	; 3
    335e:	39 f4       	brne	.+14     	; 0x336e <TIMER0_init+0x4a>
		// configure the output pin PB3 in compare mode
		DDRB |= (1 << OC0);
    3360:	a7 e3       	ldi	r26, 0x37	; 55
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	e7 e3       	ldi	r30, 0x37	; 55
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	88 60       	ori	r24, 0x08	; 8
    336c:	8c 93       	st	X, r24
	}

	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    336e:	e9 81       	ldd	r30, Y+1	; 0x01
    3370:	fa 81       	ldd	r31, Y+2	; 0x02
    3372:	81 81       	ldd	r24, Z+1	; 0x01
    3374:	88 23       	and	r24, r24
    3376:	41 f4       	brne	.+16     	; 0x3388 <TIMER0_init+0x64>
		/*Enable interrupt for overflow mode*/
		TIMSK |= (1 << TOIE0);
    3378:	a9 e5       	ldi	r26, 0x59	; 89
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	e9 e5       	ldi	r30, 0x59	; 89
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	81 60       	ori	r24, 0x01	; 1
    3384:	8c 93       	st	X, r24
    3386:	0c c0       	rjmp	.+24     	; 0x33a0 <TIMER0_init+0x7c>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    3388:	e9 81       	ldd	r30, Y+1	; 0x01
    338a:	fa 81       	ldd	r31, Y+2	; 0x02
    338c:	81 81       	ldd	r24, Z+1	; 0x01
    338e:	81 30       	cpi	r24, 0x01	; 1
    3390:	39 f4       	brne	.+14     	; 0x33a0 <TIMER0_init+0x7c>
		/*Enable interrupt for compare mode*/
		TIMSK |= (1 << OCIE0);
    3392:	a9 e5       	ldi	r26, 0x59	; 89
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	e9 e5       	ldi	r30, 0x59	; 89
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	82 60       	ori	r24, 0x02	; 2
    339e:	8c 93       	st	X, r24
	}

	/*configure the mode of the timer*/
	TCCR0 =  (TCCR0 & ~(0x48) ) | ( ( (Config_Ptr->mode) << WGM00) & 0x48 ) ;
    33a0:	a3 e5       	ldi	r26, 0x53	; 83
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	e3 e5       	ldi	r30, 0x53	; 83
    33a6:	f0 e0       	ldi	r31, 0x00	; 0
    33a8:	80 81       	ld	r24, Z
    33aa:	28 2f       	mov	r18, r24
    33ac:	27 7b       	andi	r18, 0xB7	; 183
    33ae:	e9 81       	ldd	r30, Y+1	; 0x01
    33b0:	fa 81       	ldd	r31, Y+2	; 0x02
    33b2:	81 81       	ldd	r24, Z+1	; 0x01
    33b4:	88 2f       	mov	r24, r24
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	00 24       	eor	r0, r0
    33ba:	96 95       	lsr	r25
    33bc:	87 95       	ror	r24
    33be:	07 94       	ror	r0
    33c0:	96 95       	lsr	r25
    33c2:	87 95       	ror	r24
    33c4:	07 94       	ror	r0
    33c6:	98 2f       	mov	r25, r24
    33c8:	80 2d       	mov	r24, r0
    33ca:	88 74       	andi	r24, 0x48	; 72
    33cc:	82 2b       	or	r24, r18
    33ce:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR0 = (TCCR0 & 0XCF) | ( ( (Config_Ptr->compare_output) & 0X03) << COM00 );
    33d0:	a3 e5       	ldi	r26, 0x53	; 83
    33d2:	b0 e0       	ldi	r27, 0x00	; 0
    33d4:	e3 e5       	ldi	r30, 0x53	; 83
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	80 81       	ld	r24, Z
    33da:	28 2f       	mov	r18, r24
    33dc:	2f 7c       	andi	r18, 0xCF	; 207
    33de:	e9 81       	ldd	r30, Y+1	; 0x01
    33e0:	fa 81       	ldd	r31, Y+2	; 0x02
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	88 2f       	mov	r24, r24
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	83 70       	andi	r24, 0x03	; 3
    33ea:	90 70       	andi	r25, 0x00	; 0
    33ec:	82 95       	swap	r24
    33ee:	92 95       	swap	r25
    33f0:	90 7f       	andi	r25, 0xF0	; 240
    33f2:	98 27       	eor	r25, r24
    33f4:	80 7f       	andi	r24, 0xF0	; 240
    33f6:	98 27       	eor	r25, r24
    33f8:	82 2b       	or	r24, r18
    33fa:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR0 = (TCCR0 & 0XF8) | (Config_Ptr->clock & 0X07);
    33fc:	a3 e5       	ldi	r26, 0x53	; 83
    33fe:	b0 e0       	ldi	r27, 0x00	; 0
    3400:	e3 e5       	ldi	r30, 0x53	; 83
    3402:	f0 e0       	ldi	r31, 0x00	; 0
    3404:	80 81       	ld	r24, Z
    3406:	98 2f       	mov	r25, r24
    3408:	98 7f       	andi	r25, 0xF8	; 248
    340a:	e9 81       	ldd	r30, Y+1	; 0x01
    340c:	fa 81       	ldd	r31, Y+2	; 0x02
    340e:	80 81       	ld	r24, Z
    3410:	87 70       	andi	r24, 0x07	; 7
    3412:	89 2b       	or	r24, r25
    3414:	8c 93       	st	X, r24
}
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	cf 91       	pop	r28
    341c:	df 91       	pop	r29
    341e:	08 95       	ret

00003420 <TIMER1_init>:

void TIMER1_init(const Timer_ConfigType * Config_Ptr)
{
    3420:	df 93       	push	r29
    3422:	cf 93       	push	r28
    3424:	00 d0       	rcall	.+0      	; 0x3426 <TIMER1_init+0x6>
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	9a 83       	std	Y+2, r25	; 0x02
    342c:	89 83       	std	Y+1, r24	; 0x01
/*			TCNT1  = 0;
			OCR1A  = 0;
			OCR1B  = 0;
*/
	/*set the initial value*/
	TCNT1 = ( (Config_Ptr -> initial) );
    342e:	ac e4       	ldi	r26, 0x4C	; 76
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	e9 81       	ldd	r30, Y+1	; 0x01
    3434:	fa 81       	ldd	r31, Y+2	; 0x02
    3436:	84 81       	ldd	r24, Z+4	; 0x04
    3438:	95 81       	ldd	r25, Z+5	; 0x05
    343a:	11 96       	adiw	r26, 0x01	; 1
    343c:	9c 93       	st	X, r25
    343e:	8e 93       	st	-X, r24
	/*  Non PWM Mode */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    3440:	ef e4       	ldi	r30, 0x4F	; 79
    3442:	f0 e0       	ldi	r31, 0x00	; 0
    3444:	8c e0       	ldi	r24, 0x0C	; 12
    3446:	80 83       	st	Z, r24
	if((Config_Ptr -> OutputPin) == OC1A){
    3448:	e9 81       	ldd	r30, Y+1	; 0x01
    344a:	fa 81       	ldd	r31, Y+2	; 0x02
    344c:	83 81       	ldd	r24, Z+3	; 0x03
    344e:	85 30       	cpi	r24, 0x05	; 5
    3450:	41 f4       	brne	.+16     	; 0x3462 <TIMER1_init+0x42>
	// configure the output pin PD5 in compare mode
		DDRD |= (1 << OC1A);
    3452:	a1 e3       	ldi	r26, 0x31	; 49
    3454:	b0 e0       	ldi	r27, 0x00	; 0
    3456:	e1 e3       	ldi	r30, 0x31	; 49
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	80 81       	ld	r24, Z
    345c:	80 62       	ori	r24, 0x20	; 32
    345e:	8c 93       	st	X, r24
    3460:	0c c0       	rjmp	.+24     	; 0x347a <TIMER1_init+0x5a>
	}

	/* Check for OC1B */
	else if ((Config_Ptr -> OutputPin) == OC1B){
    3462:	e9 81       	ldd	r30, Y+1	; 0x01
    3464:	fa 81       	ldd	r31, Y+2	; 0x02
    3466:	83 81       	ldd	r24, Z+3	; 0x03
    3468:	84 30       	cpi	r24, 0x04	; 4
    346a:	39 f4       	brne	.+14     	; 0x347a <TIMER1_init+0x5a>
		// configure the output pin PD4 in compare mode
		DDRD |= (1 << OC1B);
    346c:	a1 e3       	ldi	r26, 0x31	; 49
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	e1 e3       	ldi	r30, 0x31	; 49
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	80 61       	ori	r24, 0x10	; 16
    3478:	8c 93       	st	X, r24
	}
	if( (Config_Ptr->mode ) == NORMAL_MODE)
    347a:	e9 81       	ldd	r30, Y+1	; 0x01
    347c:	fa 81       	ldd	r31, Y+2	; 0x02
    347e:	81 81       	ldd	r24, Z+1	; 0x01
    3480:	88 23       	and	r24, r24
    3482:	41 f4       	brne	.+16     	; 0x3494 <TIMER1_init+0x74>
	{
		/* Enable interrupt FOR normal mode */
		TIMSK |= (1 << TOIE1);
    3484:	a9 e5       	ldi	r26, 0x59	; 89
    3486:	b0 e0       	ldi	r27, 0x00	; 0
    3488:	e9 e5       	ldi	r30, 0x59	; 89
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	80 81       	ld	r24, Z
    348e:	84 60       	ori	r24, 0x04	; 4
    3490:	8c 93       	st	X, r24
    3492:	56 c0       	rjmp	.+172    	; 0x3540 <TIMER1_init+0x120>
	}
	else if ((Config_Ptr->mode) == CTC_MODE_CHANNEL_A)
    3494:	e9 81       	ldd	r30, Y+1	; 0x01
    3496:	fa 81       	ldd	r31, Y+2	; 0x02
    3498:	81 81       	ldd	r24, Z+1	; 0x01
    349a:	82 30       	cpi	r24, 0x02	; 2
    349c:	41 f5       	brne	.+80     	; 0x34ee <TIMER1_init+0xce>
	{
		/*set compare value for compare mode channel A*/
		OCR1A  = ((Config_Ptr->compare_value));
    349e:	aa e4       	ldi	r26, 0x4A	; 74
    34a0:	b0 e0       	ldi	r27, 0x00	; 0
    34a2:	e9 81       	ldd	r30, Y+1	; 0x01
    34a4:	fa 81       	ldd	r31, Y+2	; 0x02
    34a6:	86 81       	ldd	r24, Z+6	; 0x06
    34a8:	97 81       	ldd	r25, Z+7	; 0x07
    34aa:	11 96       	adiw	r26, 0x01	; 1
    34ac:	9c 93       	st	X, r25
    34ae:	8e 93       	st	-X, r24
		/* Enable interrupt for compare mode channel A */
		TIMSK |= (1 << OCIE1A);
    34b0:	a9 e5       	ldi	r26, 0x59	; 89
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	e9 e5       	ldi	r30, 0x59	; 89
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	80 61       	ori	r24, 0x10	; 16
    34bc:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel A */
		TCCR1A = ( (TCCR1A & 0x3F) | ( (Config_Ptr -> compare_output) << COM1A0) );
    34be:	af e4       	ldi	r26, 0x4F	; 79
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	ef e4       	ldi	r30, 0x4F	; 79
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	28 2f       	mov	r18, r24
    34ca:	2f 73       	andi	r18, 0x3F	; 63
    34cc:	e9 81       	ldd	r30, Y+1	; 0x01
    34ce:	fa 81       	ldd	r31, Y+2	; 0x02
    34d0:	82 81       	ldd	r24, Z+2	; 0x02
    34d2:	88 2f       	mov	r24, r24
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	00 24       	eor	r0, r0
    34d8:	96 95       	lsr	r25
    34da:	87 95       	ror	r24
    34dc:	07 94       	ror	r0
    34de:	96 95       	lsr	r25
    34e0:	87 95       	ror	r24
    34e2:	07 94       	ror	r0
    34e4:	98 2f       	mov	r25, r24
    34e6:	80 2d       	mov	r24, r0
    34e8:	82 2b       	or	r24, r18
    34ea:	8c 93       	st	X, r24
    34ec:	29 c0       	rjmp	.+82     	; 0x3540 <TIMER1_init+0x120>
	}

	else if ( (Config_Ptr->mode) == CTC_MODE_CHANNEL_B){
    34ee:	e9 81       	ldd	r30, Y+1	; 0x01
    34f0:	fa 81       	ldd	r31, Y+2	; 0x02
    34f2:	81 81       	ldd	r24, Z+1	; 0x01
    34f4:	83 30       	cpi	r24, 0x03	; 3
    34f6:	21 f5       	brne	.+72     	; 0x3540 <TIMER1_init+0x120>
		/*set compare value for compare mode channel B*/
		OCR1B  = ((Config_Ptr -> compare_value));
    34f8:	a8 e4       	ldi	r26, 0x48	; 72
    34fa:	b0 e0       	ldi	r27, 0x00	; 0
    34fc:	e9 81       	ldd	r30, Y+1	; 0x01
    34fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3500:	86 81       	ldd	r24, Z+6	; 0x06
    3502:	97 81       	ldd	r25, Z+7	; 0x07
    3504:	11 96       	adiw	r26, 0x01	; 1
    3506:	9c 93       	st	X, r25
    3508:	8e 93       	st	-X, r24

		/* Enable interrupt for compare mode channel B */
		TIMSK |= (1 << OCIE1B);
    350a:	a9 e5       	ldi	r26, 0x59	; 89
    350c:	b0 e0       	ldi	r27, 0x00	; 0
    350e:	e9 e5       	ldi	r30, 0x59	; 89
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
    3514:	88 60       	ori	r24, 0x08	; 8
    3516:	8c 93       	st	X, r24
		/* Choose the operation that should be done in compare match occurs in channel B */
		TCCR1A = ( (TCCR1A & 0xCF) | ( (Config_Ptr -> compare_output) << COM1B0) );
    3518:	af e4       	ldi	r26, 0x4F	; 79
    351a:	b0 e0       	ldi	r27, 0x00	; 0
    351c:	ef e4       	ldi	r30, 0x4F	; 79
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	80 81       	ld	r24, Z
    3522:	28 2f       	mov	r18, r24
    3524:	2f 7c       	andi	r18, 0xCF	; 207
    3526:	e9 81       	ldd	r30, Y+1	; 0x01
    3528:	fa 81       	ldd	r31, Y+2	; 0x02
    352a:	82 81       	ldd	r24, Z+2	; 0x02
    352c:	88 2f       	mov	r24, r24
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	82 95       	swap	r24
    3532:	92 95       	swap	r25
    3534:	90 7f       	andi	r25, 0xF0	; 240
    3536:	98 27       	eor	r25, r24
    3538:	80 7f       	andi	r24, 0xF0	; 240
    353a:	98 27       	eor	r25, r24
    353c:	82 2b       	or	r24, r18
    353e:	8c 93       	st	X, r24

	}

	/*configure the mode of the timer*/
	TCCR1B = ( ( TCCR1B & 0xE7 ) |  ( ( (Config_Ptr -> mode) >> 1) << WGM12)  );
    3540:	ae e4       	ldi	r26, 0x4E	; 78
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	ee e4       	ldi	r30, 0x4E	; 78
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	28 2f       	mov	r18, r24
    354c:	27 7e       	andi	r18, 0xE7	; 231
    354e:	e9 81       	ldd	r30, Y+1	; 0x01
    3550:	fa 81       	ldd	r31, Y+2	; 0x02
    3552:	81 81       	ldd	r24, Z+1	; 0x01
    3554:	86 95       	lsr	r24
    3556:	88 2f       	mov	r24, r24
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	88 0f       	add	r24, r24
    355c:	99 1f       	adc	r25, r25
    355e:	88 0f       	add	r24, r24
    3560:	99 1f       	adc	r25, r25
    3562:	88 0f       	add	r24, r24
    3564:	99 1f       	adc	r25, r25
    3566:	82 2b       	or	r24, r18
    3568:	8c 93       	st	X, r24
		/* choose the timer clock (F_CPU / prescaler)*/
	TCCR1B = ( ( TCCR1B & 0xF8 ) | (Config_Ptr -> clock) );
    356a:	ae e4       	ldi	r26, 0x4E	; 78
    356c:	b0 e0       	ldi	r27, 0x00	; 0
    356e:	ee e4       	ldi	r30, 0x4E	; 78
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	80 81       	ld	r24, Z
    3574:	98 2f       	mov	r25, r24
    3576:	98 7f       	andi	r25, 0xF8	; 248
    3578:	e9 81       	ldd	r30, Y+1	; 0x01
    357a:	fa 81       	ldd	r31, Y+2	; 0x02
    357c:	80 81       	ld	r24, Z
    357e:	89 2b       	or	r24, r25
    3580:	8c 93       	st	X, r24
}
    3582:	0f 90       	pop	r0
    3584:	0f 90       	pop	r0
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	08 95       	ret

0000358c <TIMER2_init>:

void TIMER2_init(const Timer_ConfigType * Config_Ptr)
{
    358c:	df 93       	push	r29
    358e:	cf 93       	push	r28
    3590:	00 d0       	rcall	.+0      	; 0x3592 <TIMER2_init+0x6>
    3592:	cd b7       	in	r28, 0x3d	; 61
    3594:	de b7       	in	r29, 0x3e	; 62
    3596:	9a 83       	std	Y+2, r25	; 0x02
    3598:	89 83       	std	Y+1, r24	; 0x01
	/* Clear Registers before do anything */
/*	TCCR2 &= 0x00;
	TCNT2 &= 0x00;
*/
	/*set the initail value of the timer*/
	TCNT2 = Config_Ptr->initial;
    359a:	a4 e4       	ldi	r26, 0x44	; 68
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	e9 81       	ldd	r30, Y+1	; 0x01
    35a0:	fa 81       	ldd	r31, Y+2	; 0x02
    35a2:	84 81       	ldd	r24, Z+4	; 0x04
    35a4:	95 81       	ldd	r25, Z+5	; 0x05
    35a6:	8c 93       	st	X, r24
	/*set the compare value of the compare mode timer*/
	OCR2 = Config_Ptr->compare_value;
    35a8:	a3 e4       	ldi	r26, 0x43	; 67
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	e9 81       	ldd	r30, Y+1	; 0x01
    35ae:	fa 81       	ldd	r31, Y+2	; 0x02
    35b0:	86 81       	ldd	r24, Z+6	; 0x06
    35b2:	97 81       	ldd	r25, Z+7	; 0x07
    35b4:	8c 93       	st	X, r24
	/*non PWM mode*/
	TCCR2 = (1<<FOC2);
    35b6:	e5 e4       	ldi	r30, 0x45	; 69
    35b8:	f0 e0       	ldi	r31, 0x00	; 0
    35ba:	80 e8       	ldi	r24, 0x80	; 128
    35bc:	80 83       	st	Z, r24

	/* Check which timer mode is chosen */
	if( (Config_Ptr -> mode ) == NORMAL_MODE) {
    35be:	e9 81       	ldd	r30, Y+1	; 0x01
    35c0:	fa 81       	ldd	r31, Y+2	; 0x02
    35c2:	81 81       	ldd	r24, Z+1	; 0x01
    35c4:	88 23       	and	r24, r24
    35c6:	41 f4       	brne	.+16     	; 0x35d8 <TIMER2_init+0x4c>
	/*	Enable interrupt for normal mode */
		TIMSK |= (1 << TOIE2);
    35c8:	a9 e5       	ldi	r26, 0x59	; 89
    35ca:	b0 e0       	ldi	r27, 0x00	; 0
    35cc:	e9 e5       	ldi	r30, 0x59	; 89
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	80 64       	ori	r24, 0x40	; 64
    35d4:	8c 93       	st	X, r24
    35d6:	0c c0       	rjmp	.+24     	; 0x35f0 <TIMER2_init+0x64>
	}
	else if ( (Config_Ptr -> mode) == CTC_MODE){
    35d8:	e9 81       	ldd	r30, Y+1	; 0x01
    35da:	fa 81       	ldd	r31, Y+2	; 0x02
    35dc:	81 81       	ldd	r24, Z+1	; 0x01
    35de:	81 30       	cpi	r24, 0x01	; 1
    35e0:	39 f4       	brne	.+14     	; 0x35f0 <TIMER2_init+0x64>

		/*	 Enable interrupt for compare mode */
		TIMSK |= (1 << OCIE2);
    35e2:	a9 e5       	ldi	r26, 0x59	; 89
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
    35e6:	e9 e5       	ldi	r30, 0x59	; 89
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	80 81       	ld	r24, Z
    35ec:	80 68       	ori	r24, 0x80	; 128
    35ee:	8c 93       	st	X, r24
	}
	/*configure the mode of the timer*/
	TCCR2 = (TCCR2 & 0XB7) | ((Config_Ptr->mode & 0X48)<< WGM20);
    35f0:	a5 e4       	ldi	r26, 0x45	; 69
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	e5 e4       	ldi	r30, 0x45	; 69
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	28 2f       	mov	r18, r24
    35fc:	27 7b       	andi	r18, 0xB7	; 183
    35fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3600:	fa 81       	ldd	r31, Y+2	; 0x02
    3602:	81 81       	ldd	r24, Z+1	; 0x01
    3604:	88 2f       	mov	r24, r24
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	88 74       	andi	r24, 0x48	; 72
    360a:	90 70       	andi	r25, 0x00	; 0
    360c:	00 24       	eor	r0, r0
    360e:	96 95       	lsr	r25
    3610:	87 95       	ror	r24
    3612:	07 94       	ror	r0
    3614:	96 95       	lsr	r25
    3616:	87 95       	ror	r24
    3618:	07 94       	ror	r0
    361a:	98 2f       	mov	r25, r24
    361c:	80 2d       	mov	r24, r0
    361e:	82 2b       	or	r24, r18
    3620:	8c 93       	st	X, r24
	/* Choose the operation that should be done in compare match occurs*/
	TCCR2 = (TCCR2 & 0XCF) | ((Config_Ptr->compare_output & 0X03)<<COM20);
    3622:	a5 e4       	ldi	r26, 0x45	; 69
    3624:	b0 e0       	ldi	r27, 0x00	; 0
    3626:	e5 e4       	ldi	r30, 0x45	; 69
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	80 81       	ld	r24, Z
    362c:	28 2f       	mov	r18, r24
    362e:	2f 7c       	andi	r18, 0xCF	; 207
    3630:	e9 81       	ldd	r30, Y+1	; 0x01
    3632:	fa 81       	ldd	r31, Y+2	; 0x02
    3634:	82 81       	ldd	r24, Z+2	; 0x02
    3636:	88 2f       	mov	r24, r24
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	83 70       	andi	r24, 0x03	; 3
    363c:	90 70       	andi	r25, 0x00	; 0
    363e:	82 95       	swap	r24
    3640:	92 95       	swap	r25
    3642:	90 7f       	andi	r25, 0xF0	; 240
    3644:	98 27       	eor	r25, r24
    3646:	80 7f       	andi	r24, 0xF0	; 240
    3648:	98 27       	eor	r25, r24
    364a:	82 2b       	or	r24, r18
    364c:	8c 93       	st	X, r24
	/* choose the timer clock (F_CPU / prescaler)*/
	TCCR2 = (TCCR2 & 0XF8) | (Config_Ptr->clock & 0X07);
    364e:	a5 e4       	ldi	r26, 0x45	; 69
    3650:	b0 e0       	ldi	r27, 0x00	; 0
    3652:	e5 e4       	ldi	r30, 0x45	; 69
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	80 81       	ld	r24, Z
    3658:	98 2f       	mov	r25, r24
    365a:	98 7f       	andi	r25, 0xF8	; 248
    365c:	e9 81       	ldd	r30, Y+1	; 0x01
    365e:	fa 81       	ldd	r31, Y+2	; 0x02
    3660:	80 81       	ld	r24, Z
    3662:	87 70       	andi	r24, 0x07	; 7
    3664:	89 2b       	or	r24, r25
    3666:	8c 93       	st	X, r24
}
    3668:	0f 90       	pop	r0
    366a:	0f 90       	pop	r0
    366c:	cf 91       	pop	r28
    366e:	df 91       	pop	r29
    3670:	08 95       	ret

00003672 <Timer0_Stop>:

void Timer0_Stop()
{
    3672:	df 93       	push	r29
    3674:	cf 93       	push	r28
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= 0b11111000; // stop the clock
    367a:	a3 e5       	ldi	r26, 0x53	; 83
    367c:	b0 e0       	ldi	r27, 0x00	; 0
    367e:	e3 e5       	ldi	r30, 0x53	; 83
    3680:	f0 e0       	ldi	r31, 0x00	; 0
    3682:	80 81       	ld	r24, Z
    3684:	88 7f       	andi	r24, 0xF8	; 248
    3686:	8c 93       	st	X, r24
}
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	08 95       	ret

0000368e <Timer1_Stop>:

void Timer1_Stop(){
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= 0b11111000; // stop the clock
    3696:	ae e4       	ldi	r26, 0x4E	; 78
    3698:	b0 e0       	ldi	r27, 0x00	; 0
    369a:	ee e4       	ldi	r30, 0x4E	; 78
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	80 81       	ld	r24, Z
    36a0:	88 7f       	andi	r24, 0xF8	; 248
    36a2:	8c 93       	st	X, r24
}
    36a4:	cf 91       	pop	r28
    36a6:	df 91       	pop	r29
    36a8:	08 95       	ret

000036aa <Timer2_Stop>:

void Timer2_Stop(){
    36aa:	df 93       	push	r29
    36ac:	cf 93       	push	r28
    36ae:	cd b7       	in	r28, 0x3d	; 61
    36b0:	de b7       	in	r29, 0x3e	; 62
	TCCR2 &= 0b11111000; // stop the clock
    36b2:	a5 e4       	ldi	r26, 0x45	; 69
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	e5 e4       	ldi	r30, 0x45	; 69
    36b8:	f0 e0       	ldi	r31, 0x00	; 0
    36ba:	80 81       	ld	r24, Z
    36bc:	88 7f       	andi	r24, 0xF8	; 248
    36be:	8c 93       	st	X, r24
}
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <Timer0_setCallBack>:



void Timer0_setCallBack(void(*a_ptr)(void))
{
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <Timer0_setCallBack+0x6>
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	9a 83       	std	Y+2, r25	; 0x02
    36d2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer0_callBackPtr = a_ptr;
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	9a 81       	ldd	r25, Y+2	; 0x02
    36d8:	90 93 47 01 	sts	0x0147, r25
    36dc:	80 93 46 01 	sts	0x0146, r24
}
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	cf 91       	pop	r28
    36e6:	df 91       	pop	r29
    36e8:	08 95       	ret

000036ea <Timer1_setCallBack>:
void Timer1_setCallBack(void(*a_ptr)(void))
{
    36ea:	df 93       	push	r29
    36ec:	cf 93       	push	r28
    36ee:	00 d0       	rcall	.+0      	; 0x36f0 <Timer1_setCallBack+0x6>
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    36f4:	9a 83       	std	Y+2, r25	; 0x02
    36f6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer1_callBackPtr = a_ptr;
    36f8:	89 81       	ldd	r24, Y+1	; 0x01
    36fa:	9a 81       	ldd	r25, Y+2	; 0x02
    36fc:	90 93 49 01 	sts	0x0149, r25
    3700:	80 93 48 01 	sts	0x0148, r24
}
    3704:	0f 90       	pop	r0
    3706:	0f 90       	pop	r0
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <Timer2_setCallBack>:
void Timer2_setCallBack(void(*a_ptr)(void))
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	00 d0       	rcall	.+0      	; 0x3714 <Timer2_setCallBack+0x6>
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	9a 83       	std	Y+2, r25	; 0x02
    371a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	timer2_callBackPtr = a_ptr;
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	9a 81       	ldd	r25, Y+2	; 0x02
    3720:	90 93 4b 01 	sts	0x014B, r25
    3724:	80 93 4a 01 	sts	0x014A, r24
}
    3728:	0f 90       	pop	r0
    372a:	0f 90       	pop	r0
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	08 95       	ret

00003732 <__vector_11>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(USART_RXC_vect)
{
    3732:	1f 92       	push	r1
    3734:	0f 92       	push	r0
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	0f 92       	push	r0
    373a:	11 24       	eor	r1, r1
    373c:	2f 93       	push	r18
    373e:	3f 93       	push	r19
    3740:	4f 93       	push	r20
    3742:	5f 93       	push	r21
    3744:	6f 93       	push	r22
    3746:	7f 93       	push	r23
    3748:	8f 93       	push	r24
    374a:	9f 93       	push	r25
    374c:	af 93       	push	r26
    374e:	bf 93       	push	r27
    3750:	ef 93       	push	r30
    3752:	ff 93       	push	r31
    3754:	df 93       	push	r29
    3756:	cf 93       	push	r28
    3758:	cd b7       	in	r28, 0x3d	; 61
    375a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrUartRx != NULL_PTR){
    375c:	80 91 4c 01 	lds	r24, 0x014C
    3760:	90 91 4d 01 	lds	r25, 0x014D
    3764:	00 97       	sbiw	r24, 0x00	; 0
    3766:	29 f0       	breq	.+10     	; 0x3772 <__vector_11+0x40>
		 /* Call the Call Back function for UART Rx Interrupt */
		(*g_callBackPtrUartRx)();
    3768:	e0 91 4c 01 	lds	r30, 0x014C
    376c:	f0 91 4d 01 	lds	r31, 0x014D
    3770:	09 95       	icall
	}
}
    3772:	cf 91       	pop	r28
    3774:	df 91       	pop	r29
    3776:	ff 91       	pop	r31
    3778:	ef 91       	pop	r30
    377a:	bf 91       	pop	r27
    377c:	af 91       	pop	r26
    377e:	9f 91       	pop	r25
    3780:	8f 91       	pop	r24
    3782:	7f 91       	pop	r23
    3784:	6f 91       	pop	r22
    3786:	5f 91       	pop	r21
    3788:	4f 91       	pop	r20
    378a:	3f 91       	pop	r19
    378c:	2f 91       	pop	r18
    378e:	0f 90       	pop	r0
    3790:	0f be       	out	0x3f, r0	; 63
    3792:	0f 90       	pop	r0
    3794:	1f 90       	pop	r1
    3796:	18 95       	reti

00003798 <__vector_13>:

ISR(USART_TXC_vect)
{
    3798:	1f 92       	push	r1
    379a:	0f 92       	push	r0
    379c:	0f b6       	in	r0, 0x3f	; 63
    379e:	0f 92       	push	r0
    37a0:	11 24       	eor	r1, r1
    37a2:	2f 93       	push	r18
    37a4:	3f 93       	push	r19
    37a6:	4f 93       	push	r20
    37a8:	5f 93       	push	r21
    37aa:	6f 93       	push	r22
    37ac:	7f 93       	push	r23
    37ae:	8f 93       	push	r24
    37b0:	9f 93       	push	r25
    37b2:	af 93       	push	r26
    37b4:	bf 93       	push	r27
    37b6:	ef 93       	push	r30
    37b8:	ff 93       	push	r31
    37ba:	df 93       	push	r29
    37bc:	cf 93       	push	r28
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrUartRx != NULL_PTR){
    37c2:	80 91 4c 01 	lds	r24, 0x014C
    37c6:	90 91 4d 01 	lds	r25, 0x014D
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	29 f0       	breq	.+10     	; 0x37d8 <__vector_13+0x40>

		 /* Call the Call Back function for UART Tx Interrupt */
		(*g_callBackPtrUartTx)();
    37ce:	e0 91 4e 01 	lds	r30, 0x014E
    37d2:	f0 91 4f 01 	lds	r31, 0x014F
    37d6:	09 95       	icall
	}
}
    37d8:	cf 91       	pop	r28
    37da:	df 91       	pop	r29
    37dc:	ff 91       	pop	r31
    37de:	ef 91       	pop	r30
    37e0:	bf 91       	pop	r27
    37e2:	af 91       	pop	r26
    37e4:	9f 91       	pop	r25
    37e6:	8f 91       	pop	r24
    37e8:	7f 91       	pop	r23
    37ea:	6f 91       	pop	r22
    37ec:	5f 91       	pop	r21
    37ee:	4f 91       	pop	r20
    37f0:	3f 91       	pop	r19
    37f2:	2f 91       	pop	r18
    37f4:	0f 90       	pop	r0
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	0f 90       	pop	r0
    37fa:	1f 90       	pop	r1
    37fc:	18 95       	reti

000037fe <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const UART_ConfigType* config_Ptr)
{
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	df 93       	push	r29
    3804:	cf 93       	push	r28
    3806:	00 d0       	rcall	.+0      	; 0x3808 <UART_init+0xa>
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
    380c:	9a 83       	std	Y+2, r25	; 0x02
    380e:	89 83       	std	Y+1, r24	; 0x01
	UBRRH &= 0x00;
	UBRRL &= 0x00;
*/

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    3810:	eb e2       	ldi	r30, 0x2B	; 43
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	82 e0       	ldi	r24, 0x02	; 2
    3816:	80 83       	st	Z, r24

	/* Enable UART Tx, Rx */
	UCSRB = (1 << RXEN) | (1 << TXEN);
    3818:	ea e2       	ldi	r30, 0x2A	; 42
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	88 e1       	ldi	r24, 0x18	; 24
    381e:	80 83       	st	Z, r24

	/* Chose the interrupt mode*/
	UCSRB = ( (UCSRB & 0x3F) | ( (config_Ptr -> InterruptMode) << TXCIE) );
    3820:	aa e2       	ldi	r26, 0x2A	; 42
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	ea e2       	ldi	r30, 0x2A	; 42
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	80 81       	ld	r24, Z
    382a:	28 2f       	mov	r18, r24
    382c:	2f 73       	andi	r18, 0x3F	; 63
    382e:	e9 81       	ldd	r30, Y+1	; 0x01
    3830:	fa 81       	ldd	r31, Y+2	; 0x02
    3832:	80 81       	ld	r24, Z
    3834:	88 2f       	mov	r24, r24
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	00 24       	eor	r0, r0
    383a:	96 95       	lsr	r25
    383c:	87 95       	ror	r24
    383e:	07 94       	ror	r0
    3840:	96 95       	lsr	r25
    3842:	87 95       	ror	r24
    3844:	07 94       	ror	r0
    3846:	98 2f       	mov	r25, r24
    3848:	80 2d       	mov	r24, r0
    384a:	82 2b       	or	r24, r18
    384c:	8c 93       	st	X, r24

	/*
	 * Enable UCSRC Register
	 * Choose Asyncronous Mode
	*/
	UCSRC = (1 << URSEL);
    384e:	e0 e4       	ldi	r30, 0x40	; 64
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	80 e8       	ldi	r24, 0x80	; 128
    3854:	80 83       	st	Z, r24

	/* Choose Parity Mode*/
	UCSRC = ( (UCSRC & 0xCF) | ( (config_Ptr -> ParityMode) << UPM0) );
    3856:	a0 e4       	ldi	r26, 0x40	; 64
    3858:	b0 e0       	ldi	r27, 0x00	; 0
    385a:	e0 e4       	ldi	r30, 0x40	; 64
    385c:	f0 e0       	ldi	r31, 0x00	; 0
    385e:	80 81       	ld	r24, Z
    3860:	28 2f       	mov	r18, r24
    3862:	2f 7c       	andi	r18, 0xCF	; 207
    3864:	e9 81       	ldd	r30, Y+1	; 0x01
    3866:	fa 81       	ldd	r31, Y+2	; 0x02
    3868:	82 81       	ldd	r24, Z+2	; 0x02
    386a:	88 2f       	mov	r24, r24
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	82 95       	swap	r24
    3870:	92 95       	swap	r25
    3872:	90 7f       	andi	r25, 0xF0	; 240
    3874:	98 27       	eor	r25, r24
    3876:	80 7f       	andi	r24, 0xF0	; 240
    3878:	98 27       	eor	r25, r24
    387a:	82 2b       	or	r24, r18
    387c:	8c 93       	st	X, r24

	/* Choose number of stop bits number (1 or 2) */
	UCSRC = ( (UCSRC & 0xF7) | ( (config_Ptr -> StopBit) << USBS) );
    387e:	a0 e4       	ldi	r26, 0x40	; 64
    3880:	b0 e0       	ldi	r27, 0x00	; 0
    3882:	e0 e4       	ldi	r30, 0x40	; 64
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	80 81       	ld	r24, Z
    3888:	28 2f       	mov	r18, r24
    388a:	27 7f       	andi	r18, 0xF7	; 247
    388c:	e9 81       	ldd	r30, Y+1	; 0x01
    388e:	fa 81       	ldd	r31, Y+2	; 0x02
    3890:	81 81       	ldd	r24, Z+1	; 0x01
    3892:	88 2f       	mov	r24, r24
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	88 0f       	add	r24, r24
    3898:	99 1f       	adc	r25, r25
    389a:	88 0f       	add	r24, r24
    389c:	99 1f       	adc	r25, r25
    389e:	88 0f       	add	r24, r24
    38a0:	99 1f       	adc	r25, r25
    38a2:	82 2b       	or	r24, r18
    38a4:	8c 93       	st	X, r24

	/* Choose 8 bit mode */
	UCSRC = ( (UCSRC & 0xF9) | (EIGHT_BIT_CHAR_SIZE << UCSZ0) );
    38a6:	a0 e4       	ldi	r26, 0x40	; 64
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	e0 e4       	ldi	r30, 0x40	; 64
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	80 81       	ld	r24, Z
    38b0:	86 60       	ori	r24, 0x06	; 6
    38b2:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ( ( ( (F_CPU / ( (config_Ptr -> BaudRate)* 8UL) ) ) - 1) >> 8 );
    38b4:	00 e4       	ldi	r16, 0x40	; 64
    38b6:	10 e0       	ldi	r17, 0x00	; 0
    38b8:	e9 81       	ldd	r30, Y+1	; 0x01
    38ba:	fa 81       	ldd	r31, Y+2	; 0x02
    38bc:	83 81       	ldd	r24, Z+3	; 0x03
    38be:	94 81       	ldd	r25, Z+4	; 0x04
    38c0:	a5 81       	ldd	r26, Z+5	; 0x05
    38c2:	b6 81       	ldd	r27, Z+6	; 0x06
    38c4:	88 0f       	add	r24, r24
    38c6:	99 1f       	adc	r25, r25
    38c8:	aa 1f       	adc	r26, r26
    38ca:	bb 1f       	adc	r27, r27
    38cc:	88 0f       	add	r24, r24
    38ce:	99 1f       	adc	r25, r25
    38d0:	aa 1f       	adc	r26, r26
    38d2:	bb 1f       	adc	r27, r27
    38d4:	88 0f       	add	r24, r24
    38d6:	99 1f       	adc	r25, r25
    38d8:	aa 1f       	adc	r26, r26
    38da:	bb 1f       	adc	r27, r27
    38dc:	9c 01       	movw	r18, r24
    38de:	ad 01       	movw	r20, r26
    38e0:	80 e0       	ldi	r24, 0x00	; 0
    38e2:	92 e1       	ldi	r25, 0x12	; 18
    38e4:	aa e7       	ldi	r26, 0x7A	; 122
    38e6:	b0 e0       	ldi	r27, 0x00	; 0
    38e8:	bc 01       	movw	r22, r24
    38ea:	cd 01       	movw	r24, r26
    38ec:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <__udivmodsi4>
    38f0:	da 01       	movw	r26, r20
    38f2:	c9 01       	movw	r24, r18
    38f4:	01 97       	sbiw	r24, 0x01	; 1
    38f6:	a1 09       	sbc	r26, r1
    38f8:	b1 09       	sbc	r27, r1
    38fa:	89 2f       	mov	r24, r25
    38fc:	9a 2f       	mov	r25, r26
    38fe:	ab 2f       	mov	r26, r27
    3900:	bb 27       	eor	r27, r27
    3902:	f8 01       	movw	r30, r16
    3904:	80 83       	st	Z, r24
	UBRRL = ( ( (F_CPU / ( (config_Ptr -> BaudRate)* 8UL) ) ) - 1);
    3906:	09 e2       	ldi	r16, 0x29	; 41
    3908:	10 e0       	ldi	r17, 0x00	; 0
    390a:	e9 81       	ldd	r30, Y+1	; 0x01
    390c:	fa 81       	ldd	r31, Y+2	; 0x02
    390e:	83 81       	ldd	r24, Z+3	; 0x03
    3910:	94 81       	ldd	r25, Z+4	; 0x04
    3912:	a5 81       	ldd	r26, Z+5	; 0x05
    3914:	b6 81       	ldd	r27, Z+6	; 0x06
    3916:	88 0f       	add	r24, r24
    3918:	99 1f       	adc	r25, r25
    391a:	aa 1f       	adc	r26, r26
    391c:	bb 1f       	adc	r27, r27
    391e:	88 0f       	add	r24, r24
    3920:	99 1f       	adc	r25, r25
    3922:	aa 1f       	adc	r26, r26
    3924:	bb 1f       	adc	r27, r27
    3926:	88 0f       	add	r24, r24
    3928:	99 1f       	adc	r25, r25
    392a:	aa 1f       	adc	r26, r26
    392c:	bb 1f       	adc	r27, r27
    392e:	9c 01       	movw	r18, r24
    3930:	ad 01       	movw	r20, r26
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	92 e1       	ldi	r25, 0x12	; 18
    3936:	aa e7       	ldi	r26, 0x7A	; 122
    3938:	b0 e0       	ldi	r27, 0x00	; 0
    393a:	bc 01       	movw	r22, r24
    393c:	cd 01       	movw	r24, r26
    393e:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <__udivmodsi4>
    3942:	da 01       	movw	r26, r20
    3944:	c9 01       	movw	r24, r18
    3946:	81 50       	subi	r24, 0x01	; 1
    3948:	f8 01       	movw	r30, r16
    394a:	80 83       	st	Z, r24
}
    394c:	0f 90       	pop	r0
    394e:	0f 90       	pop	r0
    3950:	cf 91       	pop	r28
    3952:	df 91       	pop	r29
    3954:	1f 91       	pop	r17
    3956:	0f 91       	pop	r16
    3958:	08 95       	ret

0000395a <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    395a:	df 93       	push	r29
    395c:	cf 93       	push	r28
    395e:	0f 92       	push	r0
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3966:	eb e2       	ldi	r30, 0x2B	; 43
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	80 81       	ld	r24, Z
    396c:	88 2f       	mov	r24, r24
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	80 72       	andi	r24, 0x20	; 32
    3972:	90 70       	andi	r25, 0x00	; 0
    3974:	00 97       	sbiw	r24, 0x00	; 0
    3976:	b9 f3       	breq	.-18     	; 0x3966 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    3978:	ec e2       	ldi	r30, 0x2C	; 44
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3980:	0f 90       	pop	r0
    3982:	cf 91       	pop	r28
    3984:	df 91       	pop	r29
    3986:	08 95       	ret

00003988 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    3988:	df 93       	push	r29
    398a:	cf 93       	push	r28
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3990:	eb e2       	ldi	r30, 0x2B	; 43
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	88 23       	and	r24, r24
    3998:	dc f7       	brge	.-10     	; 0x3990 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    399a:	ec e2       	ldi	r30, 0x2C	; 44
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
}
    39a0:	cf 91       	pop	r28
    39a2:	df 91       	pop	r29
    39a4:	08 95       	ret

000039a6 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    39a6:	df 93       	push	r29
    39a8:	cf 93       	push	r28
    39aa:	00 d0       	rcall	.+0      	; 0x39ac <UART_sendString+0x6>
    39ac:	0f 92       	push	r0
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	9b 83       	std	Y+3, r25	; 0x03
    39b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    39b6:	19 82       	std	Y+1, r1	; 0x01
    39b8:	0e c0       	rjmp	.+28     	; 0x39d6 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	28 2f       	mov	r18, r24
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	8a 81       	ldd	r24, Y+2	; 0x02
    39c2:	9b 81       	ldd	r25, Y+3	; 0x03
    39c4:	fc 01       	movw	r30, r24
    39c6:	e2 0f       	add	r30, r18
    39c8:	f3 1f       	adc	r31, r19
    39ca:	80 81       	ld	r24, Z
    39cc:	0e 94 ad 1c 	call	0x395a	; 0x395a <UART_sendByte>
		i++;
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	8f 5f       	subi	r24, 0xFF	; 255
    39d4:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    39d6:	89 81       	ldd	r24, Y+1	; 0x01
    39d8:	28 2f       	mov	r18, r24
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	8a 81       	ldd	r24, Y+2	; 0x02
    39de:	9b 81       	ldd	r25, Y+3	; 0x03
    39e0:	fc 01       	movw	r30, r24
    39e2:	e2 0f       	add	r30, r18
    39e4:	f3 1f       	adc	r31, r19
    39e6:	80 81       	ld	r24, Z
    39e8:	88 23       	and	r24, r24
    39ea:	39 f7       	brne	.-50     	; 0x39ba <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	0f 90       	pop	r0
    39f2:	cf 91       	pop	r28
    39f4:	df 91       	pop	r29
    39f6:	08 95       	ret

000039f8 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    39f8:	0f 93       	push	r16
    39fa:	1f 93       	push	r17
    39fc:	df 93       	push	r29
    39fe:	cf 93       	push	r28
    3a00:	00 d0       	rcall	.+0      	; 0x3a02 <UART_receiveString+0xa>
    3a02:	0f 92       	push	r0
    3a04:	cd b7       	in	r28, 0x3d	; 61
    3a06:	de b7       	in	r29, 0x3e	; 62
    3a08:	9b 83       	std	Y+3, r25	; 0x03
    3a0a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3a0c:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    3a0e:	89 81       	ldd	r24, Y+1	; 0x01
    3a10:	28 2f       	mov	r18, r24
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	8a 81       	ldd	r24, Y+2	; 0x02
    3a16:	9b 81       	ldd	r25, Y+3	; 0x03
    3a18:	8c 01       	movw	r16, r24
    3a1a:	02 0f       	add	r16, r18
    3a1c:	13 1f       	adc	r17, r19
    3a1e:	0e 94 c4 1c 	call	0x3988	; 0x3988 <UART_recieveByte>
    3a22:	f8 01       	movw	r30, r16
    3a24:	80 83       	st	Z, r24
    3a26:	0f c0       	rjmp	.+30     	; 0x3a46 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3a28:	89 81       	ldd	r24, Y+1	; 0x01
    3a2a:	8f 5f       	subi	r24, 0xFF	; 255
    3a2c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3a2e:	89 81       	ldd	r24, Y+1	; 0x01
    3a30:	28 2f       	mov	r18, r24
    3a32:	30 e0       	ldi	r19, 0x00	; 0
    3a34:	8a 81       	ldd	r24, Y+2	; 0x02
    3a36:	9b 81       	ldd	r25, Y+3	; 0x03
    3a38:	8c 01       	movw	r16, r24
    3a3a:	02 0f       	add	r16, r18
    3a3c:	13 1f       	adc	r17, r19
    3a3e:	0e 94 c4 1c 	call	0x3988	; 0x3988 <UART_recieveByte>
    3a42:	f8 01       	movw	r30, r16
    3a44:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    3a46:	89 81       	ldd	r24, Y+1	; 0x01
    3a48:	28 2f       	mov	r18, r24
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a50:	fc 01       	movw	r30, r24
    3a52:	e2 0f       	add	r30, r18
    3a54:	f3 1f       	adc	r31, r19
    3a56:	80 81       	ld	r24, Z
    3a58:	83 32       	cpi	r24, 0x23	; 35
    3a5a:	31 f7       	brne	.-52     	; 0x3a28 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    3a5c:	89 81       	ldd	r24, Y+1	; 0x01
    3a5e:	28 2f       	mov	r18, r24
    3a60:	30 e0       	ldi	r19, 0x00	; 0
    3a62:	8a 81       	ldd	r24, Y+2	; 0x02
    3a64:	9b 81       	ldd	r25, Y+3	; 0x03
    3a66:	fc 01       	movw	r30, r24
    3a68:	e2 0f       	add	r30, r18
    3a6a:	f3 1f       	adc	r31, r19
    3a6c:	10 82       	st	Z, r1
}
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	0f 90       	pop	r0
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	1f 91       	pop	r17
    3a7a:	0f 91       	pop	r16
    3a7c:	08 95       	ret

00003a7e <UART_setCallBackTx>:

void UART_setCallBackTx(void (*f_ptr)(void)){
    3a7e:	df 93       	push	r29
    3a80:	cf 93       	push	r28
    3a82:	00 d0       	rcall	.+0      	; 0x3a84 <UART_setCallBackTx+0x6>
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	9a 83       	std	Y+2, r25	; 0x02
    3a8a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrUartTx = f_ptr;
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a90:	90 93 4f 01 	sts	0x014F, r25
    3a94:	80 93 4e 01 	sts	0x014E, r24
}
    3a98:	0f 90       	pop	r0
    3a9a:	0f 90       	pop	r0
    3a9c:	cf 91       	pop	r28
    3a9e:	df 91       	pop	r29
    3aa0:	08 95       	ret

00003aa2 <UART_setCallBackRx>:

void UART_setCallBackRx(void (*f_ptr)(void)){
    3aa2:	df 93       	push	r29
    3aa4:	cf 93       	push	r28
    3aa6:	00 d0       	rcall	.+0      	; 0x3aa8 <UART_setCallBackRx+0x6>
    3aa8:	cd b7       	in	r28, 0x3d	; 61
    3aaa:	de b7       	in	r29, 0x3e	; 62
    3aac:	9a 83       	std	Y+2, r25	; 0x02
    3aae:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrUartRx = f_ptr;
    3ab0:	89 81       	ldd	r24, Y+1	; 0x01
    3ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab4:	90 93 4d 01 	sts	0x014D, r25
    3ab8:	80 93 4c 01 	sts	0x014C, r24
}
    3abc:	0f 90       	pop	r0
    3abe:	0f 90       	pop	r0
    3ac0:	cf 91       	pop	r28
    3ac2:	df 91       	pop	r29
    3ac4:	08 95       	ret

00003ac6 <__udivmodsi4>:
    3ac6:	a1 e2       	ldi	r26, 0x21	; 33
    3ac8:	1a 2e       	mov	r1, r26
    3aca:	aa 1b       	sub	r26, r26
    3acc:	bb 1b       	sub	r27, r27
    3ace:	fd 01       	movw	r30, r26
    3ad0:	0d c0       	rjmp	.+26     	; 0x3aec <__udivmodsi4_ep>

00003ad2 <__udivmodsi4_loop>:
    3ad2:	aa 1f       	adc	r26, r26
    3ad4:	bb 1f       	adc	r27, r27
    3ad6:	ee 1f       	adc	r30, r30
    3ad8:	ff 1f       	adc	r31, r31
    3ada:	a2 17       	cp	r26, r18
    3adc:	b3 07       	cpc	r27, r19
    3ade:	e4 07       	cpc	r30, r20
    3ae0:	f5 07       	cpc	r31, r21
    3ae2:	20 f0       	brcs	.+8      	; 0x3aec <__udivmodsi4_ep>
    3ae4:	a2 1b       	sub	r26, r18
    3ae6:	b3 0b       	sbc	r27, r19
    3ae8:	e4 0b       	sbc	r30, r20
    3aea:	f5 0b       	sbc	r31, r21

00003aec <__udivmodsi4_ep>:
    3aec:	66 1f       	adc	r22, r22
    3aee:	77 1f       	adc	r23, r23
    3af0:	88 1f       	adc	r24, r24
    3af2:	99 1f       	adc	r25, r25
    3af4:	1a 94       	dec	r1
    3af6:	69 f7       	brne	.-38     	; 0x3ad2 <__udivmodsi4_loop>
    3af8:	60 95       	com	r22
    3afa:	70 95       	com	r23
    3afc:	80 95       	com	r24
    3afe:	90 95       	com	r25
    3b00:	9b 01       	movw	r18, r22
    3b02:	ac 01       	movw	r20, r24
    3b04:	bd 01       	movw	r22, r26
    3b06:	cf 01       	movw	r24, r30
    3b08:	08 95       	ret

00003b0a <__prologue_saves__>:
    3b0a:	2f 92       	push	r2
    3b0c:	3f 92       	push	r3
    3b0e:	4f 92       	push	r4
    3b10:	5f 92       	push	r5
    3b12:	6f 92       	push	r6
    3b14:	7f 92       	push	r7
    3b16:	8f 92       	push	r8
    3b18:	9f 92       	push	r9
    3b1a:	af 92       	push	r10
    3b1c:	bf 92       	push	r11
    3b1e:	cf 92       	push	r12
    3b20:	df 92       	push	r13
    3b22:	ef 92       	push	r14
    3b24:	ff 92       	push	r15
    3b26:	0f 93       	push	r16
    3b28:	1f 93       	push	r17
    3b2a:	cf 93       	push	r28
    3b2c:	df 93       	push	r29
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
    3b32:	ca 1b       	sub	r28, r26
    3b34:	db 0b       	sbc	r29, r27
    3b36:	0f b6       	in	r0, 0x3f	; 63
    3b38:	f8 94       	cli
    3b3a:	de bf       	out	0x3e, r29	; 62
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	cd bf       	out	0x3d, r28	; 61
    3b40:	09 94       	ijmp

00003b42 <__epilogue_restores__>:
    3b42:	2a 88       	ldd	r2, Y+18	; 0x12
    3b44:	39 88       	ldd	r3, Y+17	; 0x11
    3b46:	48 88       	ldd	r4, Y+16	; 0x10
    3b48:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b50:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b52:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b54:	b9 84       	ldd	r11, Y+9	; 0x09
    3b56:	c8 84       	ldd	r12, Y+8	; 0x08
    3b58:	df 80       	ldd	r13, Y+7	; 0x07
    3b5a:	ee 80       	ldd	r14, Y+6	; 0x06
    3b5c:	fd 80       	ldd	r15, Y+5	; 0x05
    3b5e:	0c 81       	ldd	r16, Y+4	; 0x04
    3b60:	1b 81       	ldd	r17, Y+3	; 0x03
    3b62:	aa 81       	ldd	r26, Y+2	; 0x02
    3b64:	b9 81       	ldd	r27, Y+1	; 0x01
    3b66:	ce 0f       	add	r28, r30
    3b68:	d1 1d       	adc	r29, r1
    3b6a:	0f b6       	in	r0, 0x3f	; 63
    3b6c:	f8 94       	cli
    3b6e:	de bf       	out	0x3e, r29	; 62
    3b70:	0f be       	out	0x3f, r0	; 63
    3b72:	cd bf       	out	0x3d, r28	; 61
    3b74:	ed 01       	movw	r28, r26
    3b76:	08 95       	ret

00003b78 <itoa>:
    3b78:	fb 01       	movw	r30, r22
    3b7a:	9f 01       	movw	r18, r30
    3b7c:	e8 94       	clt
    3b7e:	42 30       	cpi	r20, 0x02	; 2
    3b80:	c4 f0       	brlt	.+48     	; 0x3bb2 <itoa+0x3a>
    3b82:	45 32       	cpi	r20, 0x25	; 37
    3b84:	b4 f4       	brge	.+44     	; 0x3bb2 <itoa+0x3a>
    3b86:	4a 30       	cpi	r20, 0x0A	; 10
    3b88:	29 f4       	brne	.+10     	; 0x3b94 <itoa+0x1c>
    3b8a:	97 fb       	bst	r25, 7
    3b8c:	1e f4       	brtc	.+6      	; 0x3b94 <itoa+0x1c>
    3b8e:	90 95       	com	r25
    3b90:	81 95       	neg	r24
    3b92:	9f 4f       	sbci	r25, 0xFF	; 255
    3b94:	64 2f       	mov	r22, r20
    3b96:	77 27       	eor	r23, r23
    3b98:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <__udivmodhi4>
    3b9c:	80 5d       	subi	r24, 0xD0	; 208
    3b9e:	8a 33       	cpi	r24, 0x3A	; 58
    3ba0:	0c f0       	brlt	.+2      	; 0x3ba4 <itoa+0x2c>
    3ba2:	89 5d       	subi	r24, 0xD9	; 217
    3ba4:	81 93       	st	Z+, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	00 97       	sbiw	r24, 0x00	; 0
    3baa:	a1 f7       	brne	.-24     	; 0x3b94 <itoa+0x1c>
    3bac:	16 f4       	brtc	.+4      	; 0x3bb2 <itoa+0x3a>
    3bae:	5d e2       	ldi	r21, 0x2D	; 45
    3bb0:	51 93       	st	Z+, r21
    3bb2:	10 82       	st	Z, r1
    3bb4:	c9 01       	movw	r24, r18
    3bb6:	0c 94 dd 1d 	jmp	0x3bba	; 0x3bba <strrev>

00003bba <strrev>:
    3bba:	dc 01       	movw	r26, r24
    3bbc:	fc 01       	movw	r30, r24
    3bbe:	67 2f       	mov	r22, r23
    3bc0:	71 91       	ld	r23, Z+
    3bc2:	77 23       	and	r23, r23
    3bc4:	e1 f7       	brne	.-8      	; 0x3bbe <strrev+0x4>
    3bc6:	32 97       	sbiw	r30, 0x02	; 2
    3bc8:	04 c0       	rjmp	.+8      	; 0x3bd2 <strrev+0x18>
    3bca:	7c 91       	ld	r23, X
    3bcc:	6d 93       	st	X+, r22
    3bce:	70 83       	st	Z, r23
    3bd0:	62 91       	ld	r22, -Z
    3bd2:	ae 17       	cp	r26, r30
    3bd4:	bf 07       	cpc	r27, r31
    3bd6:	c8 f3       	brcs	.-14     	; 0x3bca <strrev+0x10>
    3bd8:	08 95       	ret

00003bda <__udivmodhi4>:
    3bda:	aa 1b       	sub	r26, r26
    3bdc:	bb 1b       	sub	r27, r27
    3bde:	51 e1       	ldi	r21, 0x11	; 17
    3be0:	07 c0       	rjmp	.+14     	; 0x3bf0 <__udivmodhi4_ep>

00003be2 <__udivmodhi4_loop>:
    3be2:	aa 1f       	adc	r26, r26
    3be4:	bb 1f       	adc	r27, r27
    3be6:	a6 17       	cp	r26, r22
    3be8:	b7 07       	cpc	r27, r23
    3bea:	10 f0       	brcs	.+4      	; 0x3bf0 <__udivmodhi4_ep>
    3bec:	a6 1b       	sub	r26, r22
    3bee:	b7 0b       	sbc	r27, r23

00003bf0 <__udivmodhi4_ep>:
    3bf0:	88 1f       	adc	r24, r24
    3bf2:	99 1f       	adc	r25, r25
    3bf4:	5a 95       	dec	r21
    3bf6:	a9 f7       	brne	.-22     	; 0x3be2 <__udivmodhi4_loop>
    3bf8:	80 95       	com	r24
    3bfa:	90 95       	com	r25
    3bfc:	bc 01       	movw	r22, r24
    3bfe:	cd 01       	movw	r24, r26
    3c00:	08 95       	ret

00003c02 <_exit>:
    3c02:	f8 94       	cli

00003c04 <__stop_program>:
    3c04:	ff cf       	rjmp	.-2      	; 0x3c04 <__stop_program>
